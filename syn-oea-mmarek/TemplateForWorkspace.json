{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "syn-oea-mmarek"
		},
		"LS_Azure_SQL_DB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Azure_SQL_DB'"
		},
		"LS_SQL_Serverless_OEA_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SQL_Serverless_OEA'"
		},
		"syn-oea-mmarek-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'syn-oea-mmarek-WorkspaceDefaultSqlServer'"
		},
		"LS_ADLS_OEA_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stoeammarek.dfs.core.windows.net"
		},
		"LS_HTTP_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().baseURL}"
		},
		"LS_KeyVault_OEA_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-oea-mmarek.vault.azure.net/"
		},
		"syn-oea-mmarek-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stoeammarek.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Antares_OEA_Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This pipeline generates test data and stores it in stage1np. It then moves the data through stage 2 (p and np) and then stage 3 (transformed)",
				"activities": [
					{
						"name": "Generate Test Data and copy to Stage1np",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Antares_OEA",
								"type": "NotebookReference"
							},
							"parameters": {
								"numberOfSchools": {
									"value": "1",
									"type": "int"
								},
								"folderName": {
									"value": "/generated_data",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							}
						}
					},
					{
						"name": "ingest to state2np and stage2p",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Generate Test Data and copy to Stage1np",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "contoso_sis",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"storageAccount": {
						"type": "string",
						"defaultValue": "stoeammarek"
					},
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "generated_data"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Antares_OEA')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]",
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_all_from_Azure_SQL_DB')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get list of tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select schema_name(t.schema_id) as schema_name, t.name as table_name\nfrom sys.tables t",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB",
								"type": "DatasetReference",
								"parameters": {
									"dbServer": {
										"value": "@pipeline().parameters.dbServer",
										"type": "Expression"
									},
									"dbName": {
										"value": "@pipeline().parameters.dbName",
										"type": "Expression"
									},
									"userName": {
										"value": "@pipeline().parameters.userName",
										"type": "Expression"
									},
									"keyVaultSecretName": {
										"value": "@pipeline().parameters.keyVaultSecretName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set currentDateTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDateTime",
							"value": {
								"value": "@{formatDateTime(convertTimeZone(utcnow(), 'UTC', pipeline().parameters.timezone), 'yyyy-MM-ddTHHmm_ss')}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get list of tables",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set currentDateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get list of tables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy_from_Azure_SQL_DB",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy_from_Azure_SQL_DB",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"dbServer": {
												"value": "@pipeline().parameters.dbServer",
												"type": "Expression"
											},
											"dbName": {
												"value": "@pipeline().parameters.dbName",
												"type": "Expression"
											},
											"userName": {
												"value": "@pipeline().parameters.userName",
												"type": "Expression"
											},
											"keyVaultSecretName": {
												"value": "@pipeline().parameters.keyVaultSecretName",
												"type": "Expression"
											},
											"query": {
												"value": "select * from @{item().schema_name}.@{item().table_name}",
												"type": "Expression"
											},
											"sinkFilesystem": {
												"value": "@pipeline().parameters.sinkFilesystem",
												"type": "Expression"
											},
											"sinkDirectory": {
												"value": "@{pipeline().parameters.sinkDirectory}/@{variables('currentDateTime')}/@{item().table_name}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "contosoisd3a.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "contoso_sis"
					},
					"userName": {
						"type": "string",
						"defaultValue": "sqladmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "sqladmin-password"
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"sinkDirectory": {
						"type": "string",
						"defaultValue": "contoso_sis_db"
					},
					"timezone": {
						"type": "string",
						"defaultValue": "Eastern Standard Time"
					}
				},
				"variables": {
					"currentDateTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OEA_Framework/Extracts"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-09T08:04:23Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_Azure_SQL_DB')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy_from_Azure_SQL_DB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_from_Azure_SQL_DB')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy from Azure SQL DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.query",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Azure_SQL_DB",
								"type": "DatasetReference",
								"parameters": {
									"dbServer": {
										"value": "@pipeline().parameters.dbServer",
										"type": "Expression"
									},
									"dbName": {
										"value": "@pipeline().parameters.dbName",
										"type": "Expression"
									},
									"userName": {
										"value": "@pipeline().parameters.userName",
										"type": "Expression"
									},
									"keyVaultSecretName": {
										"value": "@pipeline().parameters.keyVaultSecretName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_parquet",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "@pipeline().parameters.sinkFilesystem",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sinkDirectory",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "contosoisd3a.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "contoso_sis"
					},
					"userName": {
						"type": "string",
						"defaultValue": "sqladmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "sqladmin-password"
					},
					"query": {
						"type": "string",
						"defaultValue": "select * from person"
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"sinkDirectory": {
						"type": "string",
						"defaultValue": "contoso_sis_db/person"
					}
				},
				"folder": {
					"name": "OEA_Framework/Extracts"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-09T08:04:12Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_Azure_SQL_DB')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_from_URL')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copies data from the specified URL and lands it in the specified location in the data lake.",
				"activities": [
					{
						"name": "copy from URL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "URL",
								"value": "@pipeline().parameters.URL"
							},
							{
								"name": "sinkFilesystem",
								"value": "@pipeline().parameters.sinkFilesystem"
							},
							{
								"name": "sinkFilename",
								"value": "@pipeline().parameters.sinkFilename"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_HTTP_binary",
								"type": "DatasetReference",
								"parameters": {
									"URL": {
										"value": "@pipeline().parameters.URL",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_binary_file",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "@pipeline().parameters.sinkFilesystem",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.sinkFilename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"URL": {
						"type": "string",
						"defaultValue": "https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Contoso_SIS/test_data/studentattendance.csv"
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"sinkFilename": {
						"type": "string",
						"defaultValue": "contoso_sis/example1/studentattendance.csv"
					}
				},
				"folder": {
					"name": "OEA_Framework/Extracts"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-09T08:03:48Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_HTTP_binary')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_file')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_from_each_URL')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Retrieves data from multiple HTTP endpoints as specified in the 'endpoints' parameter.\nThe data is landed in the data lake within a folder named with the current datetime (in the timezone specified).\n\nFor a list of timezones, see: https://docs.microsoft.com/en-us/azure/data-factory/control-flow-expression-language-functions#convertfromutc",
				"activities": [
					{
						"name": "get data for each endpoint",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set currentDateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.endpoints",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 3,
							"activities": [
								{
									"name": "Copy_from_URL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy_from_URL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"URL": {
												"value": "@item().URL",
												"type": "Expression"
											},
											"sinkFilesystem": {
												"value": "@pipeline().parameters.sinkFilesystem",
												"type": "Expression"
											},
											"sinkFilename": {
												"value": "@{item().sinkDirectory}/@{variables('currentDateTime')}/@{item().sinkFilename}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Set currentDateTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDateTime",
							"value": {
								"value": "@{formatDateTime(convertTimeZone(utcnow(), 'UTC', pipeline().parameters.timezone), 'yyyy-MM-ddTHHmm_ss')}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"endpoints": {
						"type": "array",
						"defaultValue": [
							{
								"URL": "https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Student_and_School_Data_Systems/test_data/batch1/studentattendance.csv",
								"sinkDirectory": "contoso_sis/studentattendance",
								"sinkFilename": "part1.csv"
							},
							{
								"URL": "https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Student_and_School_Data_Systems/test_data/batch1/studentdemographics.csv",
								"sinkDirectory": "contoso_sis/studentdemographics",
								"sinkFilename": "part1.csv"
							},
							{
								"URL": "https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Student_and_School_Data_Systems/test_data/batch1/studentsectionmark.csv",
								"sinkDirectory": "contoso_sis/studentsectionmark",
								"sinkFilename": "part1.csv"
							}
						]
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"timezone": {
						"type": "string",
						"defaultValue": "Eastern Standard Time"
					}
				},
				"variables": {
					"currentDateTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OEA_Framework/Extracts"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-15T04:00:41Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Copy_from_URL')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_lake_db')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "create_lake_db",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "kwargs",
								"value": "{'stage_num':@{pipeline().parameters.stageNum},'source_dir':@{pipeline().parameters.sourceDirectory}"
							}
						],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "oea",
									"type": "string"
								},
								"method_name": {
									"value": "create_lake_db",
									"type": "string"
								},
								"kwargs": {
									"value": {
										"value": "{'stage_num':@{pipeline().parameters.stageNum},'source_dir':'@{pipeline().parameters.sourceDirectory}'}",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"stageNum": {
						"type": "string",
						"defaultValue": "2"
					},
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "contoso_sis"
					}
				},
				"folder": {
					"name": "OEA_Framework/Ingest"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-15T01:58:17Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_sql_db')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "set sqlDBName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sqlDBName",
							"value": {
								"value": "sqls@{pipeline().parameters.stage}_@{pipeline().parameters.sourceDirectory}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "set sqlDBName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_executesql]",
							"storedProcedureParameters": {
								"command": {
									"value": {
										"value": "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = '@{variables('sqlDBName')}') \nBEGIN\n  CREATE DATABASE @{variables('sqlDBName')}; \nEND;",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_Serverless_OEA",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "master"
							}
						}
					},
					{
						"name": "get folders in stageXp",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "stage@{pipeline().parameters.stage}p",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get folders in stageXp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get folders in stageXp').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "create or alter view for pseduonymized tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "command",
											"value": "CREATE OR ALTER VIEW @{item().name} AS SELECT * FROM OPENROWSET( BULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}p/@{pipeline().parameters.sourceDirectory}/@{item().name}', FORMAT='DELTA' ) AS [r]"
										}
									],
									"typeProperties": {
										"storedProcedureName": "[dbo].[sp_executesql]",
										"storedProcedureParameters": {
											"command": {
												"value": {
													"value": "CREATE OR ALTER VIEW @{item().name} AS\nSELECT * FROM OPENROWSET(\nBULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}p/@{pipeline().parameters.sourceDirectory}/@{item().name}',\nFORMAT='DELTA'\n) AS [r]",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQL_Serverless_OEA",
										"type": "LinkedServiceReference",
										"parameters": {
											"dbName": {
												"value": "@variables('sqlDBName')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "get folders in stageXnp",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "stage@{pipeline().parameters.stage}np",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get folders in stageXnp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get folders in stageXnp').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "create or alter view for lookup tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "command",
											"value": "CREATE OR ALTER VIEW @{item().name} AS SELECT * FROM OPENROWSET( BULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}p/@{pipeline().parameters.sourceDirectory}/@{item().name}', FORMAT='DELTA' ) AS [r]"
										}
									],
									"typeProperties": {
										"storedProcedureName": "[dbo].[sp_executesql]",
										"storedProcedureParameters": {
											"command": {
												"value": {
													"value": "CREATE OR ALTER VIEW @{item().name} AS\nSELECT * FROM OPENROWSET(\nBULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}np/@{pipeline().parameters.sourceDirectory}/@{item().name}',\nFORMAT='DELTA'\n) AS [r]",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQL_Serverless_OEA",
										"type": "LinkedServiceReference",
										"parameters": {
											"dbName": {
												"value": "@variables('sqlDBName')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"storageAccount": {
						"type": "string",
						"defaultValue": "stoeammarek"
					},
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "contoso_sis"
					},
					"stage": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"sqlDBName": {
						"type": "String",
						"defaultValue": "sqls2_mydb"
					}
				},
				"folder": {
					"name": "OEA_Framework/Ingest"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-15T01:57:13Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_Serverless_OEA')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_folder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/example_main_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Example pipeline demonstrating typical orchestration of data extraction, landing, ingestion, and creation of lake and sql db's.",
				"activities": [
					{
						"name": "Extract from source - land in stage1np",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_from_each_URL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"endpoints": {
									"value": "@json('[{\"URL\": \"https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Student_and_School_Data_Systems/test_data/batch1/studentattendance.csv\",\"sinkDirectory\": \"contoso_sis/studentattendance\",\"sinkFilename\": \"part1.csv\"}, {\"URL\": \"https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Student_and_School_Data_Systems/test_data/batch1/studentdemographics.csv\",\"sinkDirectory\": \"contoso_sis/studentdemographics\",\"sinkFilename\": \"part1.csv\"}, {\"URL\": \"https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Student_and_School_Data_Systems/test_data/batch1/studentsectionmark.csv\",\"sinkDirectory\": \"contoso_sis/studentsectionmark\",\"sinkFilename\": \"part1.csv\"}]')",
									"type": "Expression"
								},
								"sinkFilesystem": "stage1np",
								"timezone": "Eastern Standard Time"
							}
						}
					},
					{
						"name": "ingest into stage2p and 2np",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Extract from source - land in stage1np",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "contoso_sis",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								}
							},
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							}
						}
					},
					{
						"name": "If create_sql_db",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ingest into stage2p and 2np",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.create_sql_db",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "create_sql_db",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "create_sql_db",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"storageAccount": {
												"value": "@pipeline().parameters.storageAccount",
												"type": "Expression"
											},
											"sourceDirectory": {
												"value": "@pipeline().parameters.sourceDirectory",
												"type": "Expression"
											},
											"stage": "2"
										}
									}
								}
							]
						}
					},
					{
						"name": "If create_lake_db",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ingest into stage2p and 2np",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.create_lake_db",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "create_lake_db",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "create_lake_db",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"stageNum": "2",
											"sourceDirectory": {
												"value": "@pipeline().parameters.sourceDirectory",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"storageAccount": {
						"type": "string",
						"defaultValue": "stoeammarek"
					},
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "contoso_sis"
					},
					"create_sql_db": {
						"type": "bool",
						"defaultValue": true
					},
					"create_lake_db": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-15T03:54:38Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Copy_from_each_URL')]",
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]",
				"[concat(variables('workspaceId'), '/pipelines/create_sql_db')]",
				"[concat(variables('workspaceId'), '/pipelines/create_lake_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/reset_all_for_source')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Deletes the ingestion for the specified system and table - in order to start over when testing during implementation.",
				"activities": [
					{
						"name": "delete source system dir from stage1np",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage1np",
									"directory": {
										"value": "@pipeline().parameters.sourceSystem",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete from stage2np",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage2np",
									"directory": {
										"value": "@pipeline().parameters.sourceSystem",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete from stage2p",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage2p",
									"directory": {
										"value": "@pipeline().parameters.sourceSystem",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSystem": {
						"type": "string",
						"defaultValue": "contoso_sis"
					}
				},
				"folder": {
					"name": "OEA_Framework/Reset"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-09T08:05:11Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_folder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/reset_ingestion_of_table')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Deletes the ingestion for the specified system and table - in order to start over when testing during implementation.",
				"activities": [
					{
						"name": "delete _checkpoints_p",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage1np",
									"directory": {
										"value": "@{pipeline().parameters.sourceSystem}/@{pipeline().parameters.tablename}/_checkpoints_p",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete _checkpoints_np",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage1np",
									"directory": {
										"value": "@{pipeline().parameters.sourceSystem}/@{pipeline().parameters.tablename}/_checkpoints_np",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete from stage2np",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage2np",
									"directory": {
										"value": "@{pipeline().parameters.sourceSystem}/@{pipeline().parameters.tablename}",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete from stage2p",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage2p",
									"directory": {
										"value": "@{pipeline().parameters.sourceSystem}/@{pipeline().parameters.tablename}",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSystem": {
						"type": "string",
						"defaultValue": "contoso_sis"
					},
					"tablename": {
						"type": "string",
						"defaultValue": "studentattendance"
					}
				},
				"folder": {
					"name": "OEA_Framework/Reset"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-09T08:05:26Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_folder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_binary_file')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used for landing data in the data lake.\nDefaults to landing data in stage1np.\nNote that you can specify a full path in the filename param (eg, to land a file in a specific folder filename param can be 'contoso_sis/students/students.csv').\n",
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().filesystem",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_binary_folder')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filesystem": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().filesystem",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used for landing data in the data lake as in parquet format.\nDefaults to landing data in stage1np.\nNote that you cannot specify a filename because with parquet the filename should be auto-generated.\n",
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"directory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().filesystem",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_Azure_SQL_DB')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SQL_DB",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbServer": {
							"value": "@dataset().dbServer",
							"type": "Expression"
						},
						"dbName": {
							"value": "@dataset().dbName",
							"type": "Expression"
						},
						"userName": {
							"value": "@dataset().userName",
							"type": "Expression"
						},
						"keyVaultSecretName": {
							"value": "@dataset().keyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "myserver.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "testdb"
					},
					"userName": {
						"type": "string",
						"defaultValue": "sqlAdmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "sqlAdminPwd"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": []
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_Azure_SQL_DB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_HTTP_binary')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Retrieves data from an http endpoint.\nThe data can be in any format - the binary dataset allows us to pull any payload without affecting it.",
				"linkedServiceName": {
					"referenceName": "LS_HTTP",
					"type": "LinkedServiceReference",
					"parameters": {
						"baseURL": {
							"value": "@dataset().URL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"URL": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_HTTP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_ADLS_OEA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to the OEA data lake",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_ADLS_OEA_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_Azure_SQL_DB')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Allows for connecting to an Azure SQL database using SQL authentication and retrieving the user password from the key vault.",
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "myserver.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "testdb"
					},
					"userName": {
						"type": "string",
						"defaultValue": "sqlAdmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "sqlAdminPwd"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_Azure_SQL_DB_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_KeyVault_OEA",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().keyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_KeyVault_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_HTTP')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to an HTTP endpoint.\nThe baseURL parameter must be passed in from the dataset that utilizes this linked service.",
				"parameters": {
					"baseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('LS_HTTP_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_KeyVault_OEA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_KeyVault_OEA_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_SQL_Serverless_OEA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"dbName": {
						"type": "string",
						"defaultValue": "master"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_SQL_Serverless_OEA_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/syn-oea-mmarek-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('syn-oea-mmarek-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/syn-oea-mmarek-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('syn-oea-mmarek-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/firstTenStudents')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (10) [student_id]\n,[school_year]\n,[student_id_pseudonym]\n FROM [dbo].[studentattendance_lookup]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sqls2_contoso_sis",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_read_me')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {}
				},
				"metadata": {
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"![OEA](https://openeducationanalytics.org/assets/imgs/img_oea_logo.png)\n",
							"# OEA and the OEA Framework\n",
							"\n",
							"[OEA](https://openeducationanalytics.org/) is the overarching community and ecosystem centered around the effective and responsible use of data and analytics in education.\n",
							"\n",
							"The [OEA framework](https://github.com/microsoft/OpenEduAnalytics/tree/main/framework) is an open source python library and synapse pipeline assets - built in collaboration with the OEA community - that simplifies the process of working with the data in your data lake in a way that follows a standardized data lake architecture and data processing best practices through use of [Apache Spark](https://spark.apache.org/) and [delta lake](https://delta.io/) technologies.\n",
							"\n",
							"Listed below are 3 included examples that demonstrate the usage of the OEA framework."
						],
						"attachments": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [],
						"attachments": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"# Example #1: End to end (collect, prep, view)\n",
							"The OEA framework comes with a set of Synapse pipelines that demonstrate how to extract data from data sources with common interfaces.\n",
							"\n",
							"By clicking on \"Integrate\" in the left nav bar and opening \"example_main_pipeline\" you can run an example pipeline that does the following:\n",
							"- 1. Retrieves data from an http endpoint\n",
							"- 2. Lands the data in the stage1np directory\n",
							"- 3. Ingests the data by first running a pseudonymization process, then writing pseudonymized data to delta tables in stage2p and writing non-pseudonymized data to delta tables in stage2np\n",
							"- 4. Creates a spark db that points to the delta tables in stage2p and stage2np\n",
							"- 5. Creates a sql serverless db with views pointing to the delta tables in stage2p and stage2np\n",
							"\n",
							"You can then run the pipeline in the Reset folder called \"reset_all_for_source\" to reset everything in the data lake that was done in the \"example_main_pipeline\"."
						],
						"attachments": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Example #2: batch data processing\n",
							"The notebook **_2_batch_processing_demo_** provides a self-contained demonstration of landing and ingesting 3 different types of batch data sets:\n",
							"\n",
							"1. [Incremental data](https://github.com/microsoft/OpenEduAnalytics/tree/main/framework#1-incremental-data)\n",
							"2. [Delta data](https://github.com/microsoft/OpenEduAnalytics/tree/main/framework#2-delta-data-change-data)\n",
							"3. [Snapshot data](https://github.com/microsoft/OpenEduAnalytics/tree/main/framework#3-snapshot-data)\n",
							"\n",
							"Open that notebook and walk through each cell for the details."
						],
						"attachments": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Example #3: data generation demo\n",
							"When learning to work synapse studio and the OEA framework, and when developing the data exploration and data prep scripts you need, it's especially helpful to have test data sets to work with.\n",
							"\n",
							"The notebook **_3_data_generation_demo_** data generation demo shows how to generate test data sets across multiple fictional schools for testing purposes."
						],
						"attachments": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_batch_processing_demo')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {}
				},
				"metadata": {
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA Demo\r\n",
							"This notebook demonstrates the batch processing features of the OEA framework."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Incremental batches"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# reset this example (deletes data in stage1np/example, stage2np/example, and stage2p/example)\r\n",
							"oea.delete_data_source('example')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Land the first batch of test data\r\n",
							"df1 = spark.createDataFrame([(1,'Joe','English','2021'), (2,'Helen','English','2021')], ['id', 'name', 'language', 'school_year'])\r\n",
							"oea.land('example', 'student', df1)\r\n",
							"# show what's landed in stage1\r\n",
							"df = oea.load_csv('stage1np/example/student')\r\n",
							"df.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# ingest the first batch of test data into stage2\r\n",
							"example_schema = [['id', 'string', 'hash'], ['name', 'string', 'mask'], ['language', 'string', 'no-op'], ['school_year', 'string', 'partition-by']]\r\n",
							"oea.ingest_incremental_data('example', 'student', example_schema, 'school_year', 'id')\r\n",
							"\r\n",
							"# show what's in stage2\r\n",
							"df = oea.load_delta('stage2np/example/student_lookup')\r\n",
							"df.show()\r\n",
							"df = oea.load_delta('stage2p/example/student_pseudo')\r\n",
							"df.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# land the second batch of test data\r\n",
							"df2 = spark.createDataFrame([(3,'Elisa','Spanish','2021'), (4,'Lily','English','2021')], ['id', 'name', 'language', 'school_year'])\r\n",
							"oea.land('example', 'student', df2)\r\n",
							"# show the comprehensive set of data landed in stage1\r\n",
							"df = oea.load_csv('stage1np/example/student')\r\n",
							"df.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# ingest the second batch of test data into stage2\r\n",
							"oea.ingest_incremental_data('example', 'student', example_schema, 'school_year', 'id')\r\n",
							"\r\n",
							"# show what's in stage2\r\n",
							"df = oea.load_delta('stage2np/example/student_lookup')\r\n",
							"df.show()\r\n",
							"df = oea.load_delta('stage2p/example/student_pseudo')\r\n",
							"df.show()\r\n",
							"df.printSchema()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Delta batches"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# reset this example (deletes data in stage1np/example, stage2np/example, and stage2p/example)\r\n",
							"oea.delete_data_source('delta_example')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Land the first batch of test data\r\n",
							"df1 = spark.createDataFrame([(1,'Joseph','English','2021'), (2,'Helen','English','2021')], ['id', 'name', 'language', 'school_year'])\r\n",
							"oea.land('delta_example', 'student', df1)\r\n",
							"\r\n",
							"# show what's landed in stage1\r\n",
							"df = oea.load_csv('stage1np/delta_example/student')\r\n",
							"df.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# ingest the first batch of test data into stage2\r\n",
							"example_schema = [['id', 'string', 'hash'], ['name', 'string', 'mask'], ['language', 'string', 'no-op'], ['school_year', 'string', 'partition-by']]\r\n",
							"oea.ingest_delta_data('delta_example', 'student', example_schema, 'school_year')\r\n",
							"\r\n",
							"# show what's in stage2\r\n",
							"df = oea.load_delta('stage2np/delta_example/student_lookup')\r\n",
							"df.show()\r\n",
							"df = oea.load_delta('stage2p/delta_example/student_pseudo')\r\n",
							"df.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Land the second batch of test data\r\n",
							"df2 = spark.createDataFrame([(1,'Joseph','Spanish','2021'), (3,'Elisa','Spanish','2021')], ['id', 'name', 'language', 'school_year'])\r\n",
							"oea.land('delta_example', 'student', df2)\r\n",
							"\r\n",
							"# show what's landed in stage1\r\n",
							"df = oea.load_csv('stage1np/delta_example/student')\r\n",
							"df.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# ingest the second batch of test data into stage2\r\n",
							"oea.ingest_delta_data('delta_example', 'student', example_schema, 'school_year')\r\n",
							"\r\n",
							"# show what's in stage2\r\n",
							"df = oea.load_delta('stage2np/delta_example/student_lookup')\r\n",
							"df.show()\r\n",
							"df = oea.load_delta('stage2p/delta_example/student_pseudo')\r\n",
							"df.show()\r\n",
							"df.printSchema()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Snapshot batches"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# reset this example (deletes data in stage1np/example, stage2np/example, and stage2p/example)\r\n",
							"oea.delete_data_source('snapshot_example')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# land data in stage1\r\n",
							"df1 = spark.createDataFrame([(1,'Joseph','English','2021'), (2,'Helen','English','2021')], ['id', 'name', 'language', 'school_year'])\r\n",
							"oea.land('snapshot_example', 'student', df1)\r\n",
							"\r\n",
							"# show what's landed in stage1\r\n",
							"df = oea.load_csv('stage1np/snapshot_example/student')\r\n",
							"df.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# process data from stage1 into stage2\r\n",
							"example_schema = [['id', 'string', 'hash'], ['name', 'string', 'mask'], ['language', 'string', 'no-op'], ['school_year', 'string', 'partition-by']]\r\n",
							"oea.ingest_snapshot_data('snapshot_example', 'student', example_schema, 'school_year')\r\n",
							"\r\n",
							"# show what's in stage2\r\n",
							"df = oea.load_delta('stage2np/snapshot_example/student_lookup')\r\n",
							"df.show()\r\n",
							"df = oea.load_delta('stage2p/snapshot_example/student_pseudo')\r\n",
							"df.show()\r\n",
							"df.printSchema()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# land the second test data batch in stage1\r\n",
							"df2 = spark.createDataFrame([(1,'Joseph','Spanish','2021'), (3,'Elisa','Spanish','2021')], ['id', 'name', 'language', 'school_year'])\r\n",
							"oea.land('snapshot_example', 'student', df2)\r\n",
							"\r\n",
							"# show what's landed in stage1\r\n",
							"df = oea.load_csv('stage1np/snapshot_example/student')\r\n",
							"df.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# process data from stage1 into stage2\r\n",
							"example_schema = [['id', 'string', 'hash'], ['name', 'string', 'mask'], ['language', 'string', 'no-op'], ['school_year', 'string', 'partition-by']]\r\n",
							"oea.ingest_snapshot_data('snapshot_example', 'student', example_schema, 'school_year')\r\n",
							"\r\n",
							"# show what's in stage2\r\n",
							"df = oea.load_delta('stage2np/snapshot_example/student_lookup')\r\n",
							"df.show()\r\n",
							"df = oea.load_delta('stage2p/snapshot_example/student_pseudo')\r\n",
							"df.show()\r\n",
							"df.printSchema()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_data_generation_demo')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f9b75a81-f6b6-468e-9d64-13ccbf64a876"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/1735300c-0c18-453f-b3b7-8b49cbac9c06/resourceGroups/rg-oea-mmarek/providers/Microsoft.Synapse/workspaces/syn-oea-mmarek/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-mmarek.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Data Generation Example\r\n",
							"This notebook demonstrates how to use the EdFiDataGenerator to generate test student data in the Ed-Fi format for as many schools as specified.\r\n",
							"\r\n",
							"To generate test Ed-Fi data, simple run this notebook.\r\n",
							"The test data will be generated in json format and written to stage1np/test_data in your data lake."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run DataGen_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dg = EdFiDataGenerator()\r\n",
							"writer = DataLakeWriter(oea.stage1np + '/test_data')\r\n",
							"dg.generate_data(2, writer)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AddToExistingDataset')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "1c0925b3-e901-47c1-9894-29f7d6f9102b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import os\r\n",
							"import csv\r\n",
							"import random\r\n",
							"\r\n",
							"_path = os.path.dirname(__file__)\r\n",
							"reader = csv.reader(open(f\"{_path}/../../modules/M365/test_data/DIPData/Roster/Person.csv\"))\r\n",
							"students = []\r\n",
							"buffer = 'SIS ID,FederalRaceCategory,PrimaryLanguage,ELLStatus,SpecialEducation,LowIncome\\n'\r\n",
							"for row in reader:\r\n",
							"    sis_id = row[7]\r\n",
							"    if sis_id.startswith('st'):\r\n",
							"        buffer += sis_id + ','\r\n",
							"        buffer += random.choices(['Asian', 'Black', 'White', 'Hispanic', 'American Indian'], weights=(15, 25, 30, 25, 5))[0] + ','\r\n",
							"        buffer += random.choices(['English', 'Spanish', 'German', 'French', 'Japanese'], weights=(85, 10, 2, 2, 1))[0] + ','\r\n",
							"        buffer += random.choices(['', 'English Learner', 'Initially Fluent English Proficient', 'Redesignated Fluent English Proficient'], weights=(80, 10, 5, 5))[0] + ','\r\n",
							"        buffer += random.choices(['', 'Designated Instruction Service', 'Resource Specialty Program', 'Special Day Class'], weights=(80, 10, 5, 5))[0] + ','\r\n",
							"        buffer += random.choices(['0', '1'], weights=(60, 40))[0] + '\\n'\r\n",
							"\r\n",
							"        student = {\r\n",
							"            'SIS ID': sis_id,\r\n",
							"            'FederalRaceCategory': random.choices(['Asian', 'Black', 'White', 'Hispanic', 'American Indian'], weights=(15, 25, 30, 25, 5))[0],\r\n",
							"            'PrimaryLanguage': random.choices(['English', 'Spanish', 'German', 'French', 'Japanese'], weights=(85, 10, 2, 2, 1))[0],\r\n",
							"            'ELLStatus': random.choices(['', 'English Learner', 'Initially Fluent English Proficient', 'Redesignated Fluent English Proficient'], weights=(80, 10, 5, 5))[0],\r\n",
							"            'SpecialEducation': random.choices(['', 'Designated Instruction Service', 'Resource Specialty Program', 'Special Day Class'], weights=(80, 10, 5, 5))[0],\r\n",
							"            'LowIncome': random.choices([0, 1], weights=(60, 40))[0]\r\n",
							"        }    \r\n",
							"        students.append(student)\r\n",
							"\r\n",
							"\r\n",
							"print(buffer)\r\n",
							"with open('mycsvfile.csv','w') as f:\r\n",
							"    f.write(buffer)\r\n",
							"    #w = csv.writer(f)\r\n",
							"    #w.writerow(students[0].keys())\r\n",
							"    #for student in students: w.writerow(student.values())\r\n",
							"\r\n",
							"\r\n",
							"\"\"\"\r\n",
							"for row in csv.DictReader(open(f\"{_path}/../../modules/M365/test_data/DIPData/Roster/Person.csv\")):\r\n",
							"    print(row)\r\n",
							"\r\n",
							"    student_id = row['SIS ID']\r\n",
							"    section_id = row['Section SIS ID']\r\n",
							"    attendance_code = get_random_attendance()\r\n",
							"    attendance_flag = int(attendance_code == 'P')\r\n",
							"    attendance_status = 'Present'\r\n",
							"    if attendance_code != 'P': attendance_status = 'Absent'\r\n",
							"    attendance_csv.write(f\"att_{str(index)},{student_id},2021,,{date_str},No,1,{section_id},{attendance_code},{attendance_flag},{attendance_status},ClassSectionAttendance,0\\n\")\r\n",
							"    index += 1\r\n",
							"\"\"\""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Antares_OEA')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This notebook contains test data generation and ingestion into stage2",
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c335625f-c63f-4271-9177-6eeac28ecaad"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/1735300c-0c18-453f-b3b7-8b49cbac9c06/resourceGroups/rg-oea-mmarek/providers/Microsoft.Synapse/workspaces/syn-oea-mmarek/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-mmarek.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Antares OEA Hack Assessment"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 82
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run DataGenUtil"
						],
						"outputs": [],
						"execution_count": 76
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run M365DataGenerator"
						],
						"outputs": [],
						"execution_count": 83
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dataGen = M365DataGenerator()\r\n",
							"writer = DataLakeWriter(oea.stage1np + folderName)\r\n",
							"dataGen.generate_data(numberOfSchools, writer)"
						],
						"outputs": [],
						"execution_count": 84
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureClient')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "79dbc1a5-5f67-434a-ad39-9b336b1ff45f"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# need to run \"pip install -r requirements.txt\"\r\n",
							"#import sys\r\n",
							"#import secrets\r\n",
							"#import string\r\n",
							"#import logging\r\n",
							"#import os, random\r\n",
							"#import json\r\n",
							"#import time\r\n",
							"from azure.identity import AzureCliCredential\r\n",
							"from azure.mgmt.resource import ResourceManagementClient\r\n",
							"from azure.mgmt.keyvault import KeyVaultManagementClient\r\n",
							"from azure.mgmt.synapse import SynapseManagementClient\r\n",
							"from azure.synapse.artifacts import ArtifactsClient\r\n",
							"from azure.mgmt.storage import StorageManagementClient\r\n",
							"from azure.core.exceptions import HttpResponseError\r\n",
							"\r\n",
							"class AzureClient:\r\n",
							"    \"\"\" todo: consider removing self.resource_group_name and self.storage_account_name - those should probably be passed in as needed \"\"\"\r\n",
							"    def __init__(self, tenant_id, subscription_id, location, default_tags = None, resource_group_name = None):\r\n",
							"        self.credential = AzureCliCredential()\r\n",
							"        self.tenant_id = tenant_id\r\n",
							"        self.subscription_id = subscription_id\r\n",
							"        self.location = location\r\n",
							"        self.tags = default_tags if default_tags else {}\r\n",
							"        self.resource_group_name = resource_group_name\r\n",
							"        self.key_vault_client = None\r\n",
							"        self.resource_client = None\r\n",
							"        self.storage_client = None\r\n",
							"        self.artifacts_client = {}\r\n",
							"        self.synapse_client = None\r\n",
							"        self.storage_account_name = None\r\n",
							"\r\n",
							"    def get_storage_account_id(self):\r\n",
							"        return f\"/subscriptions/{self.subscription_id}/resourceGroups/{self.resource_group_name}/providers/Microsoft.Storage/storageAccounts/{self.storage_account_name}\"\r\n",
							"\r\n",
							"    def get_resource_client(self):\r\n",
							"        if not self.resource_client: self.resource_client = ResourceManagementClient(self.credential, self.subscription_id)\r\n",
							"        return self.resource_client\r\n",
							"\r\n",
							"    def get_key_vault_client(self):\r\n",
							"        if not self.key_vault_client: self.key_vault_client = KeyVaultManagementClient(self.credential, self.subscription_id)\r\n",
							"        return self.key_vault_client\r\n",
							"\r\n",
							"    def get_storage_client(self):\r\n",
							"        if not self.storage_client: self.storage_client = StorageManagementClient(self.credential, self.subscription_id)\r\n",
							"        return self.storage_client\r\n",
							"\r\n",
							"    def get_synapse_client(self):\r\n",
							"        if not self.synapse_client: self.synapse_client = SynapseManagementClient(self.credential, self.subscription_id)\r\n",
							"        return self.synapse_client\r\n",
							"\r\n",
							"    def get_artifacts_client(self, synapse_workspace_name):\r\n",
							"        if not synapse_workspace_name in self.artifacts_client:\r\n",
							"            self.artifacts_client[synapse_workspace_name] = ArtifactsClient(self.credential, f\"https://{synapse_workspace_name}.dev.azuresynapse.net\")\r\n",
							"        return self.artifacts_client[synapse_workspace_name]        \r\n",
							"\r\n",
							"    # ref info: https://docs.microsoft.com/en-us/python/api/azure-mgmt-keyvault/azure.mgmt.keyvault.keyvaultmanagementclient?view=azure-python#vaults\r\n",
							"    # example: https://docs.microsoft.com/en-us/samples/azure-samples/resource-manager-python-resources-and-groups/manage-azure-resources-and-resource-groups-with-python/#create-resource\r\n",
							"    def create_key_vault(self, key_vault_name, access_policies):\r\n",
							"        #availability_result = self.get_key_vault_client().vaults.check_name_availability({ \"name\": key_vault_name }  )\r\n",
							"        #if not availability_result.name_available:\r\n",
							"        #    logger.error(f\"Key Vault name {key_vault_name} is not available. Try another name.\")\r\n",
							"        #    exit()\r\n",
							"        \r\n",
							"        poller = self.get_key_vault_client().vaults.begin_create_or_update(self.resource_group_name, key_vault_name,\r\n",
							"            {\r\n",
							"                'location': self.location,\r\n",
							"                'properties': {\r\n",
							"                    'sku': { 'name': 'standard', 'family': 'A' },\r\n",
							"                    'tenant_id': self.tenant_id,\r\n",
							"                    'access_policies': access_policies\r\n",
							"                }\r\n",
							"            }\r\n",
							"    )\r\n",
							"\r\n",
							"    def create_notebook_with_ipynb(self, notebook_name, notebook_filename, synapse_workspace_name):\r\n",
							"        # todo: remove hardcoded url - this is just an example\r\n",
							"        with open(notebook_filename) as f: \r\n",
							"            notebook_dict = json.load(f)\r\n",
							"        artifacts_client = self.get_artifacts_client(synapse_workspace_name)\r\n",
							"        poller = artifacts_client.notebook.begin_create_or_update_notebook(notebook_name, {'name':notebook_name, 'properties':notebook_dict} )\r\n",
							"        return poller\r\n",
							"\r\n",
							"    def create_notebook(self, notebook_filename, synapse_workspace_name):\r\n",
							"        \"\"\" Creates synapse notebook from json (using the json from git when Synapse studio is connected to a repo) \"\"\"\r\n",
							"        artifacts_client = ArtifactsClient(AzureCliCredential(), f\"https://{synapse_workspace_name}.dev.azuresynapse.net\")\r\n",
							"        with open(notebook_filename) as f: notebook_dict = json.load(f)\r\n",
							"        validate_notebook_json(notebook_dict)\r\n",
							"        logger.info(\"Creating notebook: notebook_dict['name']\")\r\n",
							"        poller = artifacts_client.notebook.begin_create_or_update_notebook(notebook_dict['name'], notebook_dict)\r\n",
							"        return poller #AzureOperationPoller\r\n",
							"\r\n",
							"    def validate_notebook_json(self, nb_json):\r\n",
							"        \"\"\" These attributes must exist for the call to begin_create_or_update_notebook to pass validation \"\"\"\r\n",
							"        if not 'nbformat' in nb_json: nb_json['properties']['nbformat'] = 4\r\n",
							"        if not 'nbformat_minor' in nb_json: nb_json['properties']['nbformat_minor'] = 2\r\n",
							"        for cell in nb_json['properties']['cells']:\r\n",
							"            if not 'metadata' in cell: cell['metadata'] = {}\r\n",
							"\r\n",
							"    def create_spark_pool(self):\r\n",
							"        pass\r\n",
							"\r\n",
							"    #create_notebook('new_notebook.json', 'syn-oea-cisdggv04r')\r\n",
							"\r\n",
							"    def delete_resource_group(self, name):\r\n",
							"        self.get_resource_client().resource_groups.begin_delete(name)\r\n",
							"        self.resource_group_name = None\r\n",
							"\r\n",
							"    def create_resource_group(self, resource_group_name, tags=None):\r\n",
							"        if not tags: tags = {}\r\n",
							"        self.get_resource_client().resource_groups.create_or_update(resource_group_name, {'location': self.location, 'tags': tags})\r\n",
							"        self.resource_group_name = resource_group_name\r\n",
							"\r\n",
							"    def create_synapse_workspace(self, synapse_workspace_name, storage_account_name):\r\n",
							"        \"\"\" https://docs.microsoft.com/en-us/python/api/azure-mgmt-synapse/azure.mgmt.synapse.aio.operations.workspacesoperations?view=azure-python#begin-create-or-update-resource-group-name--str--workspace-name--str--workspace-info--azure-mgmt-synapse-models--models-py3-workspace----kwargs-----azure-core-polling--async-poller-asynclropoller--forwardref---models-workspace--- \"\"\"\r\n",
							"        # https://docs.microsoft.com/en-us/python/api/azure-mgmt-synapse/azure.mgmt.synapse.aio.operations.workspacesoperations?view=azure-python\r\n",
							"        cmd = (f\"az synapse workspace create --name {synapse_workspace_name} --resource-group {self.resource_group_name} --tags oea_version=0.4+ \"\r\n",
							"          f\"--storage-account {storage_account_name} --file-system synapse-workspace --location {self.location} \"\r\n",
							"          f\"--sql-admin-login-user oea-admin --sql-admin-login-password {AzureClient.create_random_password()}\")\r\n",
							"        os.system(cmd)\r\n",
							"\r\n",
							"    def create_storage_account(self, storage_account_name):\r\n",
							"        storage_client = self.get_storage_client()\r\n",
							"        # Check if the account name is available.\r\n",
							"        #availability_result = storage_client.storage_accounts.check_name_availability({ \"name\": storage_account_name })\r\n",
							"        #if not availability_result.name_available:\r\n",
							"            #logger.error(f\"Storage name {storage_account_name} is already in use. Try another name.\")\r\n",
							"            #exit()\r\n",
							"\r\n",
							"        poller = storage_client.storage_accounts.begin_create(self.resource_group_name, storage_account_name,\r\n",
							"            {           \r\n",
							"                \"location\" : self.location,\r\n",
							"                \"tags\" : self.tags,\r\n",
							"                \"kind\": \"StorageV2\",\r\n",
							"                \"sku\": {\"name\": \"Standard_RAGRS\"},\r\n",
							"                \"enable-hierarchical-namespace\": True,\r\n",
							"                \"access-tier\": \"Hot\",\r\n",
							"                \"default-action\": \"Allow\"\r\n",
							"            }\r\n",
							"        )\r\n",
							"        # Call poller.result() to wait for completion\r\n",
							"        account_result = poller.result()\r\n",
							"        self.storage_account_name = storage_account_name\r\n",
							"        return account_result\r\n",
							"\r\n",
							"    def create_containers(self, storage_account_name, container_names):\r\n",
							"        storage_client = self.get_storage_client()\r\n",
							"        keys = storage_client.storage_accounts.list_keys(self.resource_group_name, storage_account_name)\r\n",
							"        conn_string = f\"DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName={storage_account_name};AccountKey={keys.keys[0].value}\"\r\n",
							"        # Provision the containers in the account (this call is synchronous)\r\n",
							"        for name in container_names:\r\n",
							"            container = storage_client.blob_containers.create(self.resource_group_name, storage_account_name, name, {})\r\n",
							"\r\n",
							"    def create_linked_service(self):\r\n",
							"        #os.system(\"az synapse linked-service create --workspace-name syn-oea-cisdggv04r --name MSGraphAPI2 --file @./MSGraphAPI.json\")\r\n",
							"        pass\r\n",
							"\r\n",
							"    def add_role_assignment_to_storage_account(self, role, assignee):\r\n",
							"        os.system(f\"az role assignment create --role \\\"{role}\\\" --assignee {assignee} --scope {self.get_storage_account_id()}\")\r\n",
							"    \r\n",
							"    def add_firewall_rule_for_synapse(self, synapse_workspace_name):\r\n",
							"        os.system(f\"az synapse workspace firewall-rule create --name allowAll --workspace-name {synapse_workspace_name} --resource-group {self.resource_group_name} --start-ip-address 0.0.0.0 --end-ip-address 255.255.255.255\")\r\n",
							"\r\n",
							"    def create_spark_pool(self, synapse_workspace_name, spark_pool_name, library_requirements):\r\n",
							"        os.system(f\"az synapse spark pool create --name {spark_pool_name} --workspace-name {synapse_workspace_name} --resource-group {self.resource_group_name} \"\r\n",
							"                   \"--spark-version 3.1 --node-count 3 --node-size Small --min-node-count 3 --max-node-count 10 --enable-auto-scale true --delay 15 --enable-auto-pause true\")\r\n",
							"        #Now update spark pool to include required libraries (note that this has to be done as a separate step or the create command will fail, despite what the docs say)\r\n",
							"        os.system(f\"az synapse spark pool update --name {spark_pool_name} --workspace-name {synapse_workspace_name} --resource-group {self.resource_group_name} --library-requirements {library_requirements} --no-wait\")       \r\n",
							"\r\n",
							"    def create_random_password():\r\n",
							"        password = secrets.choice(string.ascii_uppercase) + secrets.choice(string.digits) + secrets.choice(['*', '%', '#', '@'])\r\n",
							"        for _ in range(9): password += secrets.choice(string.ascii_lowercase)\r\n",
							"        return password    "
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ContosoDataGenerator')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "62089197-f2a5-4f4a-a4af-294e14b1e680"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import datetime\r\n",
							"import random\r\n",
							"import math\r\n",
							"import pandas as pd\r\n",
							"from faker import Faker\r\n",
							"\r\n",
							"# DataGenUtils\r\n",
							"def list_of_dict_to_csv(list_of_dict, includeHeaders = True):\r\n",
							"    csv_str = ''\r\n",
							"    if includeHeaders == True:\r\n",
							"        header = []\r\n",
							"        for column_name in list_of_dict[0].keys(): \r\n",
							"            if not column_name.startswith('_'): header.append(column_name)\r\n",
							"        csv_str += \",\".join(header) + \"\\n\"\r\n",
							"\r\n",
							"    for row in list_of_dict:\r\n",
							"        csv_str += obj_to_csv(row) + \"\\n\"\r\n",
							"\r\n",
							"    return csv_str\r\n",
							"\r\n",
							"def obj_to_csv(obj):\r\n",
							"    csv = ''\r\n",
							"    for key in obj:\r\n",
							"        if not (key.startswith('_')): csv += str(obj[key]) + ','\r\n",
							"    return csv[:-1]\r\n",
							"\r\n",
							"def list_of_dict_to_json(list_of_dict):\r\n",
							"    json_str = '['\r\n",
							"    for row in list_of_dict:\r\n",
							"        json_str += obj_to_json(row) + \",\\n\"\r\n",
							"    return json_str[:-2] + ']'\r\n",
							"\r\n",
							"def obj_to_json(obj):\r\n",
							"    json_dict = {}\r\n",
							"    for key in obj:\r\n",
							"        if not (key.startswith('_')): json_dict[key] = obj[key]\r\n",
							"    return json.dumps(json_dict)\r\n",
							"\r\n",
							"class FileWriter:\r\n",
							"    def __init__(self, root_destination=None):\r\n",
							"        if not root_destination: self.root_destination = ''\r\n",
							"        elif not root_destination.endswith('/'): self.root_destination = root_destination + '/'\r\n",
							"        else: self.root_destination = root_destination\r\n",
							"        self.writers = {}\r\n",
							"\r\n",
							"    def write(self, path_and_filename, data_str):\r\n",
							"        path_and_filename = self.root_destination + path_and_filename\r\n",
							"        if path_and_filename not in self.writers.keys():\r\n",
							"            if not os.path.exists(os.path.dirname(path_and_filename)):\r\n",
							"                os.makedirs(os.path.dirname(path_and_filename))\r\n",
							"            self.writers[path_and_filename] = open(path_and_filename, 'a')\r\n",
							"        \r\n",
							"        self.writers[path_and_filename].write(data_str)    \r\n",
							"\r\n",
							"\r\n",
							"SUBJECTS = ['Math - Algebra', 'Math - Geometry', 'English Language', 'History - World History',\r\n",
							"            'Science Biology', 'Health', 'Technology - Programming', 'Physical Education', 'Art', 'Music']\r\n",
							"SCHOOL_TYPES = ['Elementary', 'Middle', 'High']\r\n",
							"GRADES = [(0, 'Kindergarten'), (1, 'First'), (2, 'Second'), (3, 'Third'),\r\n",
							"          (4, 'Fourth'), (5, 'Fifth'), (6, 'Sixth'), (7, 'Seventh'), (8, 'Eigth')]\r\n",
							"ACTIONS = [('ID', 'In-school Suspension'), ('ES', 'Restorative Dialogue'), ('RJ', 'Restorative Justice'), ('EY', 'Expelled Remainder Of School/yr'),\r\n",
							"           ('As', 'Tcher/parent/student Conference'), ('IS', 'In-school Detention'), ('LD', 'Lunch Detention'), ('PC', 'Parent Contact'), ('EL', 'Expelled Less Than School Year'),\r\n",
							"           ('AC', 'Behavior/Attendance Contract'), ('VB', 'Verbal Warning'), ('SF', 'Suspension 5 Days Or Less'), ('RS', 'Referral To Social Worker'), ('SM', 'Suspension More Than Five Days'),\r\n",
							"           ('SS', 'Saturday School'), ('AP', 'Admin/Prnt/Gurdn/Stu Conference'), ('RF', 'Referral To Counseling'), ('DB', 'Detention Before/after School'), ('LP', 'Loss of Privileges'),\r\n",
							"           ('IA', 'In-school Alternative'), ('Cn', 'Ref Police - No charges filed'), ('EN', 'Expelled Into Next School Year')]\r\n",
							"ATTENDANCE_TYPES = [('V', 'Early Completion'), ('5', 'Parent Request Opt Out Testing'), ('A', 'Absent (unexcused)'), ('F', 'Field Trip'), ('C', 'Counselor'), ('X', 'Excused Tardy'), ('I', 'In School Detention'), ('Q', 'Went Home Ill'), ('O', 'Office'), ('W', 'Weather'),\r\n",
							"                    ('6', 'State or District Testing'), ('N', 'Nurse/Infirmary'), ('G', 'Early Release/Parent'), ('H', 'Timeout to Home'), ('Y', 'In a Facility'), ('R', 'Runaway'), ('P', 'Prearranged'), ('S', 'Suspended'), ('L', 'Tutored-District'), ('D', 'Enrolled in Special Program'),\r\n",
							"                    ('M', 'SPED ONLY in school no IEP Svcs'), ('J', 'Teacher Excused'), ('E', 'Excused Absence'), ('T', 'Tardy (Unexcused)'), ('Pr', 'Present'), ('K', 'Social Worker'), ('Z', 'In Detention Center (SCYSC)')]\r\n",
							"INVOLVEMENTS = [('A', 'Accomplice'), ('W', 'Witness'), ('V', 'Victim'), ('P', 'Perpetrator'), ('N', 'Not Applicable')]\r\n",
							"INCIDENTS = [('AA1', 'L1 Unexcused Absences'), ('ALA', 'L2 Abusive Lang w/Staff'), ('ALP', 'L1 Abusive Lang/Intim w/Student'), ('APL', 'L3 Any Act Prohibit by F/S/L Law'),\r\n",
							"             ('ASR', 'L2 Altering Sch/Classrm Rcrds'), ('AT3', 'L3 3rd Degree Assault  (by adult'), ('CLM', 'L1 Classroom Misconduct'), ('CLO', 'L2 Continual LEVEL I Infraction'),\r\n",
							"             ('CLT', 'L3 Continual LEVEL II Infraction'), ('CP2', 'L2 Campus Misconduct'), ('CPM', 'L1 Campus Misconduct'), ('DEP', 'L3 Destruction/Sch/Emp Prop'), ('DIS', 'L1 Dishonesty'),\r\n",
							"             ('DSP', 'L2 Defacing School Prop'), ('FCD', 'L2 Fail Complete Disc Asignmt'), ('FIG', 'L2 Fighting'), ( 'HA3', 'L3 Harassment'), ('HAR', 'L2 Harassment'), ('IDH', 'L1 Inappropriate Dress/Hygiene'),\r\n",
							"             ('INS', 'L1 Insubordination'), ('IS2', 'L2 Insubor/open/persist defiance'), ('L1E', 'L1 Inappropriate/Prsnl Elect Dev'), ('L2B', 'L2 Bullying'), ('L2E', 'L2 Inappropriate/Prsnl Elect Dev'),\r\n",
							"             ('L2P', 'L2 Phys Mistreatment of Studnt'), ('L2V', 'L2 Violation of AUA'), ('L3A', 'L3 P/U of Alcohol'), ('L3D', 'L3 P/U of Drug Paraphernalia'), ('PSV', 'L2 P/D/S Sched 4 or 5 substances'),\r\n",
							"             ('PU4', 'L4 P/U Dangerous Weapon'), ('PUT', 'L2 P/U of  Tobacco/Simulated'), ('PUW', 'L2 Inadvertent  Pos(Stand )Weap'), ('SV2', 'L2 Serious Violations at School'), ('SV3', 'L3 Serious Violations at School'),\r\n",
							"             ('THE', 'L2 Theft'), ('ULC', 'L2 Unauthorized Leaving Campus'), ('ULM', 'L3 Unlawful U/P/D/S of Marijuana'), ('UNA', 'L2 Unexcused Absences/Truancy'), ('UNT', 'L1 Unexcused Tardiness'), ('WF3', 'L3 Weapon/Facsimile (Standard)')]\r\n",
							"\r\n",
							"class ContosoDataGenerator:\r\n",
							"    def __init__(self, students_per_school=100, classes_in_student_schedule=6, students_per_section=25, student_teacher_ratio=9, include_optional_fields=True,\r\n",
							"                 fall_semester_start_date='2021-08-15', fall_semester_end_date='2021-12-15', spring_semester_start_date='2022-01-10', spring_semester_end_date='2022-05-10'):\r\n",
							"        # Set a seed value in Faker so it generates the same values every time it's run\r\n",
							"        self.faker = Faker('en_US')\r\n",
							"        Faker.seed(1)\r\n",
							"\r\n",
							"        self.students_per_school = students_per_school\r\n",
							"        self.classes_in_student_schedule = classes_in_student_schedule\r\n",
							"        self.students_per_section = students_per_section\r\n",
							"        self.student_teacher_ratio = student_teacher_ratio\r\n",
							"        self.include_optional = include_optional_fields\r\n",
							"        self.fall_semester_start_date = fall_semester_start_date\r\n",
							"        self.fall_semester_end_date = fall_semester_end_date\r\n",
							"        self.spring_semester_start_date = spring_semester_start_date\r\n",
							"        self.spring_semester_end_date = spring_semester_end_date\r\n",
							"\r\n",
							"        self.teachers_per_school = math.ceil(self.students_per_school/self.student_teacher_ratio)\r\n",
							"        self.section_id = 1\r\n",
							"        self.student_id = 1\r\n",
							"        self.teacher_id = 1\r\n",
							"        self.course_id = 1\r\n",
							"        self.school_id = 1\r\n",
							"        self.term_id = 1\r\n",
							"        self.domain = '@Classrmtest86.org'\r\n",
							"\r\n",
							"    def generate_data(self, num_of_schools, writer):\r\n",
							"        schools = []\r\n",
							"        for n in range(num_of_schools):\r\n",
							"            school_data = self.create_school(n)\r\n",
							"            schools.append(school_data.pop('School'))\r\n",
							"            for key in school_data.keys(): \r\n",
							"                data_str = list_of_dict_to_csv(school_data[key])\r\n",
							"                writer.write(f\"contoso_sis/{key}.csv\", data_str)\r\n",
							"\r\n",
							"        data_str = list_of_dict_to_csv(schools)\r\n",
							"        writer.write('contoso_sis/School.csv', data_str)        \r\n",
							"\r\n",
							"    def create_school(self, school_id):\r\n",
							"        school_data = {}\r\n",
							"        school_data['School'] = {\r\n",
							"            'SchoolID': school_id,\r\n",
							"            'SchoolName': f\"{self.faker.last_name()} {random.choice(SCHOOL_TYPES)}\"\r\n",
							"        }\r\n",
							"        school_data['Students'] = self.create_students(school_id)\r\n",
							"        school_data['Courses'] = self.create_courses()\r\n",
							"        school_data['Terms'] = self.create_terms()\r\n",
							"        school_data['Attendance'], school_data['ClassAttendance'], school_data['DailyIncidents'] = self.create_daily_records(school_id, school_data)\r\n",
							"        return school_data\r\n",
							"\r\n",
							"    def create_students(self, school_id):\r\n",
							"        students = []\r\n",
							"        for n in range(self.students_per_school):\r\n",
							"            students.append(self.create_student(school_id, self.student_id, 'student'))\r\n",
							"            self.student_id += 1\r\n",
							"        return students\r\n",
							"\r\n",
							"    def create_student(self, school_id, user_id, user_type):\r\n",
							"        grade_num, grade = random.choice(GRADES)\r\n",
							"        gender = random.choice(['Male', 'Female'])\r\n",
							"        if gender == 'Male': fname = self.faker.first_name_male()\r\n",
							"        else: fname = self.faker.first_name_female()\r\n",
							"\r\n",
							"        user = {\r\n",
							"            'ID': user_id,\r\n",
							"            'Firstname': fname,\r\n",
							"            'Lastname': self.faker.last_name(),\r\n",
							"            'Gender': gender,\r\n",
							"            'FederalRaceCategory': random.choice(['Asian', 'Black', 'White', 'Hispanic', 'American Indian']),\r\n",
							"            'PrimaryLanguage': random.choices(['English', 'Spanish', 'German', 'French', 'Japanese'], weights=(85, 10, 2, 2, 1))[0],\r\n",
							"            'ELLStatus': random.choices(['', 'English Learner', 'Initially Fluent English Proficient', 'Redesignated Fluent English Proficient'], weights=(80, 10, 5, 5))[0],\r\n",
							"            'SpecialEducation': random.choices(['', 'Designated Instruction Service', 'Resource Specialty Program', 'Special Day Class'], weights=(80, 10, 5, 5))[0],\r\n",
							"            'LowIncome': random.choices([0, 1], weights=(60, 40))[0],\r\n",
							"            'GradeNumber': grade_num,\r\n",
							"            'Grade': grade,\r\n",
							"            'CumulativeGPA': random.choice([0.523, 0.423, 1.13, 2.63, 2.33, 3.33, 4.0]),\r\n",
							"            'StartSchoolYear': self.fall_semester_start_date,\r\n",
							"            'EndSchoolYear': self.spring_semester_end_date\r\n",
							"        }\r\n",
							"        return user\r\n",
							"\r\n",
							"    def create_terms(self):\r\n",
							"        terms = []\r\n",
							"        terms.append({\r\n",
							"            'TermID': self.term_id,\r\n",
							"            'TermName': 'Fall Semester',\r\n",
							"            'TermStartDate': self.fall_semester_start_date,\r\n",
							"            'TermEndDate': self.fall_semester_end_date,\r\n",
							"        })\r\n",
							"        self.term_id += 1\r\n",
							"        terms.append({\r\n",
							"            'TermID': self.term_id,\r\n",
							"            'TermName': 'Spring Semester',\r\n",
							"            'TermStartDate': self.spring_semester_start_date,\r\n",
							"            'TermEndDate': self.spring_semester_end_date,\r\n",
							"        })\r\n",
							"        self.term_id += 1\r\n",
							"        return terms\r\n",
							"\r\n",
							"    def create_courses(self):\r\n",
							"        courses = []\r\n",
							"        for subject in SUBJECTS:\r\n",
							"            courses.append({\r\n",
							"                'CourseID': self.course_id,\r\n",
							"                'CourseName': subject,\r\n",
							"                'CourseCode': subject\r\n",
							"            })\r\n",
							"            self.course_id += 1\r\n",
							"        return courses\r\n",
							"\r\n",
							"    def create_daily_records(self, school_id, school_data):\r\n",
							"        date_range = pd.date_range(datetime.datetime.strptime(self.fall_semester_start_date, \"%Y-%m-%d\"), datetime.datetime.strptime(self.spring_semester_end_date, \"%Y-%m-%d\"))\r\n",
							"        daily_attendance = []\r\n",
							"        class_attendance = []\r\n",
							"        incidents = []\r\n",
							"        for student in school_data['Students']:\r\n",
							"            for single_date in date_range:\r\n",
							"                daily_attendance.append(self.create_daily_attendance_record(school_id, student, single_date))\r\n",
							"                class_attendance.append(self.create_class_attendance_record(school_id, student, single_date, school_data['Courses']))\r\n",
							"                if (random.randint(1, 100)) <= 10:  # 10% chance of an incident occurring\r\n",
							"                    incidents.append(self.create_incident_record(school_id, student['ID'], single_date))\r\n",
							"        return (daily_attendance, class_attendance, incidents)\r\n",
							"\r\n",
							"    def create_class_attendance_record(self, school_id, student_id, date_value, courses):\r\n",
							"        # todo: fix term id to use the correct term id based on the date\r\n",
							"        class_attendance = {\r\n",
							"            'SchoolID': school_id,\r\n",
							"            'AttendanceDate': date_value.strftime(\"%Y-%m-%d\"),\r\n",
							"            'StudentID': student_id,\r\n",
							"            'Term': '1',\r\n",
							"            'CourseID': random.choice(courses)['CourseID'],\r\n",
							"            'AttendTypeID': random.choice(ATTENDANCE_TYPES)[0]\r\n",
							"        }\r\n",
							"        return class_attendance\r\n",
							"\r\n",
							"    def create_incident_record(self, school_id, student_id, date_value):\r\n",
							"        incident_id, incident = random.choice(INCIDENTS)\r\n",
							"        involvement_id, incident = random.choice(INVOLVEMENTS)\r\n",
							"        action_id, action = random.choice(ACTIONS)\r\n",
							"        incident_record = {\r\n",
							"            'StudentID': student_id,\r\n",
							"            'SchoolID': school_id,\r\n",
							"            'IncidentID': incident_id,\r\n",
							"            'InvolvementID': involvement_id,\r\n",
							"            'IncidentDate': date_value.strftime(\"%Y-%m-%d\"),\r\n",
							"            'ActionID': action_id\r\n",
							"        }\r\n",
							"        return incident_record\r\n",
							"\r\n",
							"    def create_daily_attendance_record(self, school_id, student, date_value):\r\n",
							"        possible_periods_in_day = 6\r\n",
							"        unexcused_all_day = random.choices([0, 1], weights=(80, 20))[0]\r\n",
							"        if unexcused_all_day == 1:\r\n",
							"            excused_all_day = 0\r\n",
							"        else:\r\n",
							"            excused_all_day = random.choices([0, 1], weights=(70, 30))[0]\r\n",
							"\r\n",
							"        attendance_record = {\r\n",
							"            'SchoolID': school_id,\r\n",
							"            'AttendanceDate': date_value.strftime(\"%Y-%m-%d\"),\r\n",
							"            'StudentID': student['ID'],\r\n",
							"            'NumofPossiblePeriods': possible_periods_in_day,\r\n",
							"            'NumofTardies': random.choices([0, 1, 2, 3, 4, 5, 6], weights=(50, 20, 10, 5, 5, 5, 5))[0],\r\n",
							"            'NumofUnexcusedAbsent': random.choices([0, 1, 2, 3], weights=(70, 10, 10, 10))[0],\r\n",
							"            'NumofExcusedAbsent': random.choices([0, 1, 2, 3], weights=(60, 20, 10, 10))[0],\r\n",
							"            'UnexcusedAllDay': unexcused_all_day,\r\n",
							"            'ExcusedAllDay': excused_all_day,\r\n",
							"            'Cumulative GPA': student['CumulativeGPA']\r\n",
							"        }\r\n",
							"        return attendance_record\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ContosoSIS_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "26eb63b8-c8c9-458f-8287-c2c6918447af"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/1735300c-0c18-453f-b3b7-8b49cbac9c06/resourceGroups/rg-oea-mmarek/providers/Microsoft.Synapse/workspaces/syn-oea-mmarek/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-mmarek.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"class ContosoSIS(BaseOEAModule):\n",
							"    def __init__(self, source_folder='generated_data', pseudonymize = True):\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\n",
							"        self.schemas['studentattendance'] = [['id', 'string', 'no-op'],\n",
							"                                            ['student_id', 'string', 'hash'],\n",
							"                                            ['school_year', 'integer', 'partition-by'],\n",
							"                                            ['school_id', 'string', 'no-op'],\n",
							"                                            ['attendance_date', 'timestamp', 'no-op'],\n",
							"                                            ['all_day', 'string', 'no-op'],\n",
							"                                            ['Period', 'short', 'no-op'],\n",
							"                                            ['section_id', 'string', 'no-op'],\n",
							"                                            ['AttendanceCode', 'string', 'no-op'],\n",
							"                                            ['PresenceFlag', 'boolean', 'no-op'],\n",
							"                                            ['attendance_status', 'string', 'no-op'],\n",
							"                                            ['attendance_type', 'string', 'no-op'],\n",
							"                                            ['attendance_sequence', 'short', 'no-op']]\n",
							"\n",
							"        self.schemas['studentsectionmark'] = [['id', 'string', 'no-op'],\n",
							"                                            ['student_id', 'string', 'hash'],\n",
							"                                            ['section_id', 'string', 'no-op'],\n",
							"                                            ['school_year', 'string', 'partition-by'],\n",
							"                                            ['term_id', 'string', 'no-op'],\n",
							"                                            ['numeric_grade_earned', 'short', 'no-op'],\n",
							"                                            ['alpha_grade_earned', 'string', 'no-op'],\n",
							"                                            ['is_final_grade', 'string', 'no-op'],\n",
							"                                            ['credits_attempted', 'short', 'no-op'],\n",
							"                                            ['credits_earned', 'short', 'no-op'],\n",
							"                                            ['grad_credit_type', 'string', 'no-op']]\n",
							"\n",
							"        self.schemas['studentdemographics'] = [['SIS ID', 'string', 'hash'],\n",
							"                                            ['FederalRaceCategory', 'string', 'no-op'],\n",
							"                                            ['PrimaryLanguage', 'string', 'no-op'],\n",
							"                                            ['ELLStatus', 'string', 'no-op'],\n",
							"                                            ['SpecialEducation', 'string', 'no-op'],\n",
							"                                            ['LowIncome', 'boolean', 'no-op']]                                            \n",
							"\n",
							"    def ingest(self):\n",
							"        oea.ingest_incremental_data(self.source_folder, 'studentattendance', self.schemas['studentattendance'], 'school_year', 'id')\n",
							"        oea.ingest_incremental_data(self.source_folder, 'studentsectionmark', self.schemas['studentsectionmark'], 'school_year', 'id')\n",
							"        oea.ingest_incremental_data(self.source_folder, 'studentdemographics', self.schemas['studentdemographics'], 'school_year', 'id')\n",
							"        #oea.ingest_snapshot_data(self.source_folder, 'studentsectionmark', self.schemas['studentsectionmark'], 'school_year', 'id')\n",
							"        #oea.ingest_delta_data(self.source_folder, 'studentdemographics', self.schemas['studentdemographics'], 'school_year', 'id')\n",
							"\n",
							"contoso_sis = ContosoSIS()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataGenUtil')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a903c0bf-6c35-4952-ae8d-e62f79da9648"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import os\r\n",
							"import json\r\n",
							"\r\n",
							"def list_of_dict_to_csv(list_of_dict, includeHeaders = True):\r\n",
							"    csv_str = ''\r\n",
							"    if includeHeaders == True:\r\n",
							"        header = []\r\n",
							"        for column_name in list_of_dict[0].keys(): \r\n",
							"            if not column_name.startswith('_'): header.append(column_name)\r\n",
							"        csv_str += \",\".join(header) + \"\\n\"\r\n",
							"\r\n",
							"    for row in list_of_dict:\r\n",
							"        csv_str += obj_to_csv(row) + \"\\n\"\r\n",
							"\r\n",
							"    return csv_str\r\n",
							"\r\n",
							"def obj_to_csv(obj):\r\n",
							"    csv = ''\r\n",
							"    for key in obj:\r\n",
							"        if not (key.startswith('_')): csv += str(obj[key]) + ','\r\n",
							"    return csv[:-1]\r\n",
							"\r\n",
							"def list_of_dict_to_json(list_of_dict):\r\n",
							"    json_str = '['\r\n",
							"    for row in list_of_dict:\r\n",
							"        json_str += obj_to_json(row) + \",\\n\"\r\n",
							"    return json_str[:-2] + ']'\r\n",
							"\r\n",
							"def obj_to_json(obj):\r\n",
							"    json_dict = {}\r\n",
							"    for key in obj:\r\n",
							"        if not (key.startswith('_')): json_dict[key] = obj[key]\r\n",
							"    return json.dumps(json_dict)\r\n",
							"\r\n",
							"class FileWriter:\r\n",
							"    def __init__(self, root_destination=None):\r\n",
							"        if not root_destination: self.root_destination = ''\r\n",
							"        elif not root_destination.endswith('/'): self.root_destination = root_destination + '/'\r\n",
							"        else: self.root_destination = root_destination\r\n",
							"        self.writers = {}\r\n",
							"\r\n",
							"    def write(self, path_and_filename, data_str):\r\n",
							"        path_and_filename = self.root_destination + path_and_filename\r\n",
							"        if path_and_filename not in self.writers.keys():\r\n",
							"            if not os.path.exists(os.path.dirname(path_and_filename)):\r\n",
							"                os.makedirs(os.path.dirname(path_and_filename))\r\n",
							"            self.writers[path_and_filename] = open(path_and_filename, 'a')\r\n",
							"        \r\n",
							"        self.writers[path_and_filename].write(data_str)    "
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataGen_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f8b5ee70-d663-4819-8320-e0c5b61fca8a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/1735300c-0c18-453f-b3b7-8b49cbac9c06/resourceGroups/rg-oea-mmarek/providers/Microsoft.Synapse/workspaces/syn-oea-mmarek/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-mmarek.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import random\r\n",
							"import json\r\n",
							"from faker import Faker\r\n",
							"\r\n",
							"\"\"\" From DataGenUtil.py \"\"\"\r\n",
							"def list_of_dict_to_csv(list_of_dict, includeHeaders = True):\r\n",
							"    csv_str = ''\r\n",
							"    if includeHeaders == True:\r\n",
							"        header = []\r\n",
							"        for column_name in list_of_dict[0].keys(): \r\n",
							"            if not column_name.startswith('_'): header.append(column_name)\r\n",
							"        csv_str += \",\".join(header) + \"\\n\"\r\n",
							"\r\n",
							"    for row in list_of_dict:\r\n",
							"        csv_str += obj_to_csv(row) + \"\\n\"\r\n",
							"\r\n",
							"    print(\"start\")\r\n",
							"    print(csv_str, end = \"\\n\")\r\n",
							"\r\n",
							"    return csv_str\r\n",
							"\r\n",
							"def obj_to_csv(obj):\r\n",
							"    csv = ''\r\n",
							"    for key in obj:\r\n",
							"        if not (key.startswith('_')): csv += str(obj[key]) + ','\r\n",
							"    return csv[:-1]\r\n",
							"\r\n",
							"def list_of_dict_to_json(list_of_dict):\r\n",
							"    json_str = '['\r\n",
							"    for row in list_of_dict:\r\n",
							"        json_str += obj_to_json(row) + \",\\n\"\r\n",
							"    return json_str[:-2] + ']'\r\n",
							"\r\n",
							"def obj_to_json(obj):\r\n",
							"    json_dict = {}\r\n",
							"    for key in obj:\r\n",
							"        if not (key.startswith('_')): json_dict[key] = obj[key]\r\n",
							"    return json.dumps(json_dict)\r\n",
							"\r\n",
							"\"\"\" From EdFiDataGenerator.py \"\"\"\r\n",
							"GENDER = ['Male','Female']\r\n",
							"BOOLEAN = [True, False]\r\n",
							"OPERATIONAL_STATUS = ['Active','Inactive']\r\n",
							"CHARTER_STATUS = ['School Charter', 'Open Enrollment Charter', 'Not a Charter School']\r\n",
							"GRADE_LEVEL = ['First Grade','Second Grade','Third Grade','Fourth Grade','Fifth Grade','Sixth Grade','Seventh Grade','Eighth Grade','Ninth Grade','Tenth Grade','Eleventh Grade','Twelfth Grade']\r\n",
							"SCHOOL_TYPES = ['High School', 'Middle School', 'Elementary School']\r\n",
							"SUBJECT_NAMES = [('Math','Algebra'), ('Math','Geometry'), ('Language','English'), ('History','World History'),('Science','Biology'), ('Science','Health'), ('Technology',' Programming'), ('Physical Education','Sports'), ('Arts','Music')]\r\n",
							"LEVELS_OF_EDUCATION = ['Some College No Degree', 'Doctorate', 'Bachelor\\'s','Master\\'s']\r\n",
							"PERSONAL_INFORMATION_VERIFICATION_DESCRIPTIONS = ['Entry in family Bible', 'Other official document', 'State-issued ID', 'Hospital certificate', 'Passport', 'Parents affidavit', 'Immigration document/visa', 'Drivers license']\r\n",
							"RACES = ['Asian' , 'Native Hawaiian - Pacific Islander', 'American Indian - Alaska Native', 'White']\r\n",
							"\r\n",
							"class EdFiDataGenerator:\r\n",
							"    def __init__(self,number_students_per_school=100, include_optional_fields=True, school_year='2021', credit_conversion_factor = 2.0, number_of_grades_per_school = 5, is_current_school_year = True, graduation_plans_per_school = 10, unique_id_length = 5, number_staffs_per_school = 50, number_sections_per_school = 10):\r\n",
							"        # Set a seed value in Faker so it generates same values every run.\r\n",
							"        self.faker = Faker('en_US')\r\n",
							"        Faker.seed(1)\r\n",
							"\r\n",
							"        self.include_optional_fields = include_optional_fields\r\n",
							"        self.graduation_plans_per_school = graduation_plans_per_school\r\n",
							"        self.school_year = school_year\r\n",
							"        self.country = 'United States of America'\r\n",
							"        self.number_students_per_school = number_students_per_school\r\n",
							"        self.credit_conversion_factor = credit_conversion_factor\r\n",
							"        self.number_of_grades_per_school = number_of_grades_per_school\r\n",
							"        self.is_current_school_year = is_current_school_year\r\n",
							"        self.unique_id_length = unique_id_length\r\n",
							"        self.number_staffs_per_school = number_staffs_per_school\r\n",
							"        self.number_sections_per_school = number_sections_per_school\r\n",
							"\r\n",
							"    def get_descriptor_string(self, key, value):\r\n",
							"        return \"uri://ed-fi.org/{}#{}\".format(key,value)\r\n",
							"\r\n",
							"    def generate_data(self, num_of_schools, writer):\r\n",
							"        edfi_data = [self.create_school() for _ in range(num_of_schools)]\r\n",
							"        edfi_data_formatted = self.format_edfi_data(edfi_data)\r\n",
							"\r\n",
							"        \"\"\" original json version\r\n",
							"        writer.write(f'EdFi/School.json',list_of_dict_to_json(edfi_data_formatted['Schools']))\r\n",
							"        writer.write(f'EdFi/Student.json',list_of_dict_to_json(edfi_data_formatted['Students']))\r\n",
							"        writer.write(f'EdFi/StudentSchoolAssociation.json',list_of_dict_to_json(edfi_data_formatted['StudentSchoolAssociations']))\r\n",
							"        writer.write(f'EdFi/Course.json',list_of_dict_to_json(edfi_data_formatted['Courses']))\r\n",
							"        writer.write(f'EdFi/Calendar.json',list_of_dict_to_json(edfi_data_formatted['Calendars']))\r\n",
							"        writer.write(f'EdFi/Sessions.json',list_of_dict_to_json(edfi_data_formatted['Sessions']))\r\n",
							"        writer.write(f'EdFi/StaffSchoolAssociations.json',list_of_dict_to_json(edfi_data_formatted['StaffSchoolAssociations']))\r\n",
							"        writer.write(f'EdFi/Sections.json',list_of_dict_to_json(edfi_data_formatted['Sections']))\r\n",
							"        writer.write(f'EdFi/Staffs.json',list_of_dict_to_json(edfi_data_formatted['Staffs']))\r\n",
							"        writer.write(f'EdFi/StudentSectionAssociations.json',list_of_dict_to_json(edfi_data_formatted['StudentSectionAssociations']))\r\n",
							"        writer.write(f'EdFi/StaffSectionAssociations.json',list_of_dict_to_json(edfi_data_formatted['StaffSectionAssociations']))\r\n",
							"        \"\"\"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        writer.write(f'EdFi/School.csv',list_of_dict_to_csv(edfi_data_formatted['Schools']))\r\n",
							"        writer.write(f'EdFi/Student.csv',list_of_dict_to_csv(edfi_data_formatted['Students']))\r\n",
							"        writer.write(f'EdFi/StudentSchoolAssociation.csv',list_of_dict_to_csv(edfi_data_formatted['StudentSchoolAssociations']))\r\n",
							"        writer.write(f'EdFi/Course.csv',list_of_dict_to_csv(edfi_data_formatted['Courses']))\r\n",
							"        writer.write(f'EdFi/Calendar.csv',list_of_dict_to_csv(edfi_data_formatted['Calendars']))\r\n",
							"        writer.write(f'EdFi/Sessions.csv',list_of_dict_to_csv(edfi_data_formatted['Sessions']))\r\n",
							"        writer.write(f'EdFi/StaffSchoolAssociations.csv',list_of_dict_to_csv(edfi_data_formatted['StaffSchoolAssociations']))\r\n",
							"        writer.write(f'EdFi/Sections.csv',list_of_dict_to_csv(edfi_data_formatted['Sections']))\r\n",
							"        writer.write(f'EdFi/Staffs.csv',list_of_dict_to_csv(edfi_data_formatted['Staffs']))\r\n",
							"        writer.write(f'EdFi/StudentSectionAssociations.csv',list_of_dict_to_csv(edfi_data_formatted['StudentSectionAssociations']))\r\n",
							"        writer.write(f'EdFi/StaffSectionAssociations.csv',list_of_dict_to_csv(edfi_data_formatted['StaffSectionAssociations']))\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"    def create_school(self):\r\n",
							"        school_type = random.choice(SCHOOL_TYPES)\r\n",
							"        school_name = self.faker.city() + ' ' + school_type\r\n",
							"        school = {\r\n",
							"            'Id': self.faker.uuid4().replace('-',''),\r\n",
							"            'SchoolId': self.faker.random_number(digits = self.unique_id_length),\r\n",
							"            'NameOfInstitution': school_name,\r\n",
							"            'OperationalStatusDescriptor': self.get_descriptor_string('OperationalStatusDescriptor',random.choice(OPERATIONAL_STATUS)),\r\n",
							"            'ShortNameOfInstitution': ''.join([word[0] for word in school_name.split()]),\r\n",
							"            'Website':''.join(['www.',school_name.lower().replace(' ',''),'.com']),\r\n",
							"            'AdministrativeFundingControlDescriptor': self.get_descriptor_string('AdministrativeFundingControlDescriptor',random.choice(['public', 'private']) + ' School'),\r\n",
							"            'CharterStatusDescriptor': self.get_descriptor_string('CharterStatusDescriptor',random.choice(CHARTER_STATUS)),\r\n",
							"            'SchoolTypeDescriptor': self.get_descriptor_string('SchoolTypeDescriptor','Regular'),\r\n",
							"            'TitleIPartASchoolDesignationDescriptor': self.get_descriptor_string('TitleIPartASchoolDesignationDescriptor','Not A Title I School'),\r\n",
							"            'Addresses': self.create_address() if self.include_optional_fields else '',\r\n",
							"            'EducationOrganizationCategories':[{'EducationOrganizationCategoryDescriptor': self.get_descriptor_string('educationOrganizationCategoryDescriptor','School')}],\r\n",
							"            'IdentificationCodes': [\r\n",
							"                {\r\n",
							"                    'educationOrganizationIdentificationSystemDescriptor': self.get_descriptor_string('educationOrganizationIdentificationSystemDescriptor','SEA'),\r\n",
							"                    'identificationCode': self.faker.random_number(digits=10)\r\n",
							"                }\r\n",
							"            ],\r\n",
							"            'InstitutionTelephones': self.create_telephones(),\r\n",
							"            'InternationalAddresses': [],\r\n",
							"            'SchoolCategories': [\r\n",
							"                {\r\n",
							"                    'SchoolCategoryDescriptor': self.get_descriptor_string('SchoolCategoryDescriptor',school_type)\r\n",
							"                }\r\n",
							"            ],\r\n",
							"            'gradeLevels': [\r\n",
							"                {'gradeLevelDescriptor': self.get_descriptor_string('GradeLevelDescriptor',random.choice(GRADE_LEVEL))} for _ in range(4)\r\n",
							"            ]\r\n",
							"        }\r\n",
							"\r\n",
							"        school['_SchoolYears'] = self.create_school_years()\r\n",
							"        school['_Calendars'] = self.create_calendars(school)\r\n",
							"        school['_Students'] = self.create_students()\r\n",
							"        school['_Courses'] = self.create_courses(school['SchoolId'],school['Id'],school_name)\r\n",
							"        school['_GraduationPlans'] = self.create_graduation_plans(school)\r\n",
							"        school['_StudentAssociations'] = self.create_student_school_associations(school)\r\n",
							"        school['_Staffs'] = self.create_staffs()\r\n",
							"        school['_StaffSchoolAssociations'] = self.create_staff_school_associations(school)\r\n",
							"        school['_Sessions'] = self.create_sessions(school)\r\n",
							"        school['_Sections'] = self.create_sections(school)\r\n",
							"        school['_StaffSectionAssociations'] = self.create_staff_section_associations(school)\r\n",
							"        school['_StudentSectionAssociations'] = self.create_student_section_associations(school)\r\n",
							"        return school\r\n",
							"\r\n",
							"    def create_students(self):\r\n",
							"        students = []\r\n",
							"        for _ in range(self.number_students_per_school):\r\n",
							"            gender = random.choice(GENDER)\r\n",
							"            fname = self.faker.first_name_male() if gender == 'Male' else self.faker.first_name_female()\r\n",
							"            students.append({\r\n",
							"                'Id': self.faker.uuid4().replace('-',''),\r\n",
							"                'StudentUniqueId': self.faker.random_number(digits = self.unique_id_length),\r\n",
							"                \"BirthCity\": self.faker.city(),\r\n",
							"                \"BirthDate\": str(self.faker.date_between(start_date='-18y',end_date='-5y')),\r\n",
							"                \"BirthSexDescriptor\": self.get_descriptor_string('birthStateAbbreviationDescriptor', gender),\r\n",
							"                \"FirstName\": fname,\r\n",
							"                \"IdentificationDocuments\": [],\r\n",
							"                \"LastSurname\": self.faker.last_name(),\r\n",
							"                \"OtherNames\": [\r\n",
							"                    {\r\n",
							"                        \"OtherNameTypeDescriptor\": self.get_descriptor_string('otherNameTypeDescriptor','Nickname'),\r\n",
							"                        \"FirstName\": self.faker.first_name_male() if gender == 'Male' else self.faker.first_name_female(),\r\n",
							"                        \"PersonalTitlePrefix\": 'Mr' if gender == 'Male' else 'Ms'\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"PersonalIdentificationDocuments\": [],\r\n",
							"                \"PersonalTitlePrefix\": 'Mr' if gender == 'Male' else 'Ms',\r\n",
							"                \"Visas\": [],\r\n",
							"                \"_etag\": self.faker.random_number(digits=10)\r\n",
							"        })\r\n",
							"        return students\r\n",
							"\r\n",
							"\r\n",
							"    def create_student_school_associations(self,school):\r\n",
							"        result = []\r\n",
							"        graduation_plan_ids = [gp['Id'] for gp in school['_GraduationPlans']]\r\n",
							"        for student in school['_Students']:\r\n",
							"            result.append({\r\n",
							"                'Id': self.faker.uuid4().replace('-',''),\r\n",
							"                \"GraduationPlanReference\": {\r\n",
							"                    \"EducationOrganizationId\": school['SchoolId'],\r\n",
							"                    \"GraduationPlanTypeDescriptor\": \"uri://ed-fi.org/GraduationPlanTypeDescriptor#Minimum\",\r\n",
							"                    \"GraduationSchoolYear\": self.school_year,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"GraduationPlan\",\r\n",
							"                        \"href\": '/ed-fi/graduationPlans/{}'.format(random.choice(graduation_plan_ids))\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"SchoolReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"School\",\r\n",
							"                        \"href\": '/ed-fi/schools/{}'.format(school['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"StudentReference\": {\r\n",
							"                    \"StudentUniqueId\": student['StudentUniqueId'],\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"Student\",\r\n",
							"                        \"href\": \"/ed-fi/students/{}\".format(student['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"EntryDate\": str(self.faker.date_between(start_date='-5y',end_date='today')),\r\n",
							"                \"EntryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#{}\".format(random.choice(GRADE_LEVEL)),\r\n",
							"                \"AlternativeGraduationPlans\": [],\r\n",
							"                \"EducationPlans\": [],\r\n",
							"                \"_etag\": self.faker.random_number(digits=10)\r\n",
							"            })\r\n",
							"        return result\r\n",
							"\r\n",
							"    def create_calendars(self,school):\r\n",
							"        return {\r\n",
							"            'Id': self.faker.uuid4().replace('-',''),\r\n",
							"            'CalendarCode':self.faker.random_number(digits = self.unique_id_length),\r\n",
							"            \"SchoolReference\": {\r\n",
							"                \"SchoolId\": school['SchoolId'],\r\n",
							"                \"Link\": {\r\n",
							"                    \"rel\": \"School\",\r\n",
							"                    \"href\": \"/ed-fi/schools/{}\".format(school['Id'])\r\n",
							"                }\r\n",
							"            },\r\n",
							"            \"SchoolYearTypeReference\": {\r\n",
							"                \"SchoolYear\": self.school_year,\r\n",
							"                \"Link\": {\r\n",
							"                    \"rel\": \"SchoolYearType\",\r\n",
							"                    \"href\": \"/ed-fi/schoolYearTypes/{}\".format(school['_SchoolYears']['Id'])\r\n",
							"                }\r\n",
							"            },\r\n",
							"            'CalendarTypeDescriptor': self.get_descriptor_string('calendarTypeDescriptor','Student Specific'),\r\n",
							"            'GradeLevel': []\r\n",
							"        }\r\n",
							"\r\n",
							"    def create_address(self):\r\n",
							"        address = []\r\n",
							"        state = self.faker.state_abbr()\r\n",
							"        for n in ['Physical', 'Mailing']:\r\n",
							"            address.append({\r\n",
							"                'AddressType':n,\r\n",
							"                'City':self.faker.city(),\r\n",
							"                'PostalCode':self.faker.postcode(),\r\n",
							"                'StateAbbreviation':state,\r\n",
							"                'StreetNumberName':self.faker.street_name()\r\n",
							"            })\r\n",
							"        return address\r\n",
							"\r\n",
							"    def create_courses(self,school_id,id,school_name):\r\n",
							"        courses = []\r\n",
							"        for subject,course_name in SUBJECT_NAMES:\r\n",
							"            courseCode = '{}-{}'.format(course_name[0:3].upper(),random.choice(range(1,5)))\r\n",
							"            courses.append({\r\n",
							"                \"Id\": self.faker.uuid4().replace('-',''),\r\n",
							"                \"EducationOrganizationReference\": {\r\n",
							"                    \"EducationOrganizationId\": school_id,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"School\",\r\n",
							"                        \"href\": \"/ed-fi/schools/{}\".format(id)\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"CourseCode\": courseCode,\r\n",
							"                \"AcademicSubjectDescriptor\": self.get_descriptor_string('academicSubjectDescriptor', subject),\r\n",
							"                \"CourseDefinedByDescriptor\": self.get_descriptor_string('CourseDefinedByDescriptor','SEA'),\r\n",
							"                \"CourseDescription\": 'Description about {}'.format(course_name),\r\n",
							"                \"CourseGPAApplicabilityDescriptor\": self.get_descriptor_string('CourseGPAApplicabilityDescriptor',random.choice(['Applicable','Not Applicable'])),\r\n",
							"                \"CourseTitle\": course_name,\r\n",
							"                \"HighSchoolCourseRequirement\": random.choice(BOOLEAN),\r\n",
							"                \"NumberOfParts\": 1,\r\n",
							"                \"CompetencyLevels\": [],\r\n",
							"                \"IdentificationCodes\": [\r\n",
							"                    {\r\n",
							"                        \"CourseIdentificationSystemDescriptor\": self.get_descriptor_string('CourseIdentificationSystemDescriptor','LEA course code'),\r\n",
							"                        \"CourseCatalogURL\": \"http://www.{}.edu/coursecatalog\".format(school_name.lower().replace(' ','')),\r\n",
							"                        \"IdentificationCode\": courseCode\r\n",
							"                    },\r\n",
							"                    {\r\n",
							"                        \"CourseIdentificationSystemDescriptor\": self.get_descriptor_string('CourseIdentificationSystemDescriptor','State course code'),\r\n",
							"                        \"IdentificationCode\": self.faker.random_number(digits = self.unique_id_length)\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"LearningObjectives\": [],\r\n",
							"                \"LearningStandards\": [\r\n",
							"                    {\r\n",
							"                        \"LearningStandardReference\": {\r\n",
							"                            \"LearningStandardId\": self.faker.random_number(digits = self.unique_id_length),\r\n",
							"                            \"Link\": {\r\n",
							"                                \"rel\": \"LearningStandard\",\r\n",
							"                                \"href\": \"/ed-fi/learningStandards/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                            }\r\n",
							"                        }\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"LevelCharacteristics\": [\r\n",
							"                    {\r\n",
							"                        \"CourseLevelCharacteristicDescriptor\": self.get_descriptor_string('CourseLevelCharacteristicDescriptor','Core Subject')\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"OfferedGradeLevels\": [],\r\n",
							"                \"_etag\": self.faker.random_number(digits=10)\r\n",
							"            })\r\n",
							"        return courses\r\n",
							"\r\n",
							"\r\n",
							"    def create_graduation_plans(self, school):\r\n",
							"        graduation_plans = []\r\n",
							"        for _ in range(self.graduation_plans_per_school):\r\n",
							"            graduation_plans.append({\r\n",
							"                'Id': self.faker.uuid4().replace('-',''),\r\n",
							"                \"EducationOrganizationReference\": {\r\n",
							"                    \"EducationOrganizationId\": school['SchoolId'],\r\n",
							"                    \"link\": {\r\n",
							"                        \"rel\": \"School\",\r\n",
							"                        \"href\": \"/ed-fi/schools/{}\".format(school['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"GraduationSchoolYearTypeReference\": {\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"SchoolYearType\",\r\n",
							"                        \"href\": \"/ed-fi/schoolYearTypes/{}\".format(school['_SchoolYears']['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"GraduationPlanTypeDescriptor\": self.get_descriptor_string('GraduationPlanTypeDescriptor', random.choice(['Minimum','Recommended'])),\r\n",
							"                \"TotalRequiredCredits\": random.choice(range(20,30)),\r\n",
							"                \"CreditsByCourses\": [],\r\n",
							"                \"CreditsByCreditCategories\": [\r\n",
							"                    {\r\n",
							"                        \"CreditCategoryDescriptor\": self.get_descriptor_string('CreditCategoryDescriptor','Honors'),\r\n",
							"                        \"Credits\": random.choice(range(5,15))\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"CreditsBySubjects\": [],\r\n",
							"                \"RequiredAssessments\": [],\r\n",
							"                \"_etag\": self.faker.random_number(digits=10)\r\n",
							"            })\r\n",
							"        return graduation_plans\r\n",
							"\r\n",
							"    def create_school_years(self):\r\n",
							"        return {\r\n",
							"            'Id': self.faker.uuid4().replace('-',''),\r\n",
							"            'SchoolYear': self.school_year,\r\n",
							"            'CurrentSchoolYear': self.is_current_school_year,\r\n",
							"            'schoolYearDescription': 'Description about school year',\r\n",
							"            '_etag': self.faker.random_number(digits=10)\r\n",
							"        }\r\n",
							"\r\n",
							"    def create_telephones(self):\r\n",
							"        return [\r\n",
							"            {\r\n",
							"                'InstitutionTelephoneNumberTypeDescriptor': self.get_descriptor_string('InstitutionTelephoneNumberTypeDescriptor', _),\r\n",
							"                \"TelephoneNumber\": self.faker.phone_number()\r\n",
							"            }\r\n",
							"            for _ in ['Fax','Main']\r\n",
							"        ]\r\n",
							"\r\n",
							"    def create_staffs(self):\r\n",
							"        staffs = []\r\n",
							"        for _ in range(self.number_staffs_per_school):\r\n",
							"            gender = random.choice(GENDER)\r\n",
							"            fname = self.faker.first_name_male() if gender == 'Male' else self.faker.first_name_female()\r\n",
							"            lname = self.faker.last_name()\r\n",
							"            staffs.append({\r\n",
							"                \"Id\": self.faker.uuid4().replace('-',''),\r\n",
							"                \"StaffUniqueId\": self.faker.random_number(digits = self.unique_id_length),\r\n",
							"                \"BirthDate\": str(self.faker.date_between(start_date='-60y',end_date='-30y')),\r\n",
							"                \"FirstName\": fname,\r\n",
							"                \"HighestCompletedLevelOfEducationDescriptor\": self.get_descriptor_string('LevelOfEducationDescriptor', value = random.choice(LEVELS_OF_EDUCATION)),\r\n",
							"                \"HispanicLatinoEthnicity\": random.choice(BOOLEAN),\r\n",
							"                \"LastSurname\": lname,\r\n",
							"                \"LoginId\": '{}{}'.format(fname[0],lname.lower()),\r\n",
							"                \"PersonalTitlePrefix\": 'Mr' if gender == 'Male' else 'Ms',\r\n",
							"                \"SexDescriptor\": self.get_descriptor_string('SexDescriptor', value = gender),\r\n",
							"                \"YearsOfPriorProfessionalExperience\": random.choice(range(50)),\r\n",
							"                \"Addresses\": self.create_address(),\r\n",
							"                \"AncestryEthnicOrigins\": [],\r\n",
							"                \"Credentials\": [\r\n",
							"                    {\r\n",
							"                        \"CredentialReference\": {\r\n",
							"                            \"CredentialIdentifier\": self.faker.random_number(digits = 10),\r\n",
							"                            \"StateOfIssueStateAbbreviationDescriptor\": self.get_descriptor_string('StateAbbreviationDescriptor', 'TX'),\r\n",
							"                            \"Link\": {\r\n",
							"                                \"rel\": \"Credential\",\r\n",
							"                                \"href\": \"/ed-fi/credentials/\" + self.faker.uuid4().replace('-','')\r\n",
							"                            }\r\n",
							"                        }\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"ElectronicMails\": [\r\n",
							"                    {\r\n",
							"                        \"ElectronicMailAddress\": \"{}{}@edfi.org\".format(fname,lname),\r\n",
							"                        \"ElectronicMailTypeDescriptor\": self.get_descriptor_string('ElectronicMailTypeDescriptor','Work')\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"IdentificationCodes\": [\r\n",
							"                    {\r\n",
							"                        \"StaffIdentificationSystemDescriptor\": self.get_descriptor_string('StaffIdentificationSystemDescriptor','State'),\r\n",
							"                        \"IdentificationCode\": self.faker.random_number(digits = self.unique_id_length)\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"IdentificationDocuments\": [],\r\n",
							"                \"InternationalAddresses\": self.create_address(),\r\n",
							"                \"Languages\": [],\r\n",
							"                \"OtherNames\": [self.faker.first_name_male() if gender == 'Male' else self.faker.first_name_female()],\r\n",
							"                \"PersonalIdentificationDocuments\": [\r\n",
							"                    {\r\n",
							"                        \"IdentificationDocumentUseDescriptor\": \"uri://ed-fi.org/IdentificationDocumentUseDescriptor#Personal Information Verification\",\r\n",
							"                        \"PersonalInformationVerificationDescriptor\": self.get_descriptor_string('PersonalInformationVerificationDescriptor', value = random.choice(PERSONAL_INFORMATION_VERIFICATION_DESCRIPTIONS))\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"Races\": [\r\n",
							"                    {\r\n",
							"                        \"RaceDescriptor\": self.get_descriptor_string('RaceDescriptor', value = random.choice(RACES))\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"_etag\": self.faker.random_number(digits=10)\r\n",
							"            })\r\n",
							"        return staffs\r\n",
							"\r\n",
							"    def create_sessions(self, school):\r\n",
							"\r\n",
							"        return [{\r\n",
							"            \"Id\": self.faker.uuid4().replace('-',''),\r\n",
							"            \"SchoolReference\":{\r\n",
							"                \"SchoolId\":school['SchoolId'],\r\n",
							"                \"Link\":{\r\n",
							"                    \"rel\":\"School\",\r\n",
							"                    \"href\":\"/ed-fi/schools/{}\".format(school['Id'])\r\n",
							"                }\r\n",
							"            },\r\n",
							"            \"SchoolYearTypeReference\": {\r\n",
							"                \"SchoolYear\": self.school_year,\r\n",
							"                \"Link\": {\r\n",
							"                    \"rel\": \"SchoolYearType\",\r\n",
							"                    \"href\": \"/ed-fi/schoolYearTypes/{}\".format(school['_SchoolYears']['Id'])\r\n",
							"                }\r\n",
							"            },\r\n",
							"            \"SessionName\": \"{} - {} Fall Semester\".format(int(self.school_year) - 1, self.school_year ),\r\n",
							"            \"BeginDate\": \"{}-08-{}\".format(int(self.school_year) - 1, random.randint(1,30)),\r\n",
							"            \"EndDate\": \"{}-12-{}\".format(int(self.school_year) - 1, random.randint(1,30)),\r\n",
							"            \"TermDescriptor\": self.get_descriptor_string('TermDescriptor', 'Fall Semester'),\r\n",
							"            \"TotalInstructionalDays\": random.randint(60,130),\r\n",
							"            \"GradingPeriods\": [\r\n",
							"                {\r\n",
							"                    \"GradingPeriodReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks\",\r\n",
							"                    \"PeriodSequence\": 1,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"GradingPeriod\",\r\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                {\r\n",
							"                    \"GradingPeriodReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#Second Six Weeks\",\r\n",
							"                    \"PeriodSequence\": 2,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"GradingPeriod\",\r\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                {\r\n",
							"                    \"GradingPeriodReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#Third Six Weeks\",\r\n",
							"                    \"PeriodSequence\": 3,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"GradingPeriod\",\r\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                    }\r\n",
							"                }\r\n",
							"            ],\r\n",
							"            \"_etag\": self.faker.random_number(digits=10)\r\n",
							"        },\r\n",
							"        {\r\n",
							"            \"Id\": self.faker.uuid4().replace('-',''),\r\n",
							"            \"SchoolReference\":{\r\n",
							"                \"SchoolId\":school['SchoolId'],\r\n",
							"                \"Link\":{\r\n",
							"                    \"rel\":\"School\",\r\n",
							"                    \"href\":\"/ed-fi/schools/{}\".format(school['Id'])\r\n",
							"                }\r\n",
							"            },\r\n",
							"            \"SchoolYearTypeReference\": {\r\n",
							"                \"SchoolYear\": self.school_year,\r\n",
							"                \"Link\": {\r\n",
							"                    \"rel\": \"SchoolYearType\",\r\n",
							"                    \"href\": \"/ed-fi/schoolYearTypes/{}\".format(school['_SchoolYears']['Id'])\r\n",
							"                }\r\n",
							"            },\r\n",
							"            \"SessionName\": \"{} - {} Spring Semester\".format(int(self.school_year) - 1, self.school_year),\r\n",
							"            \"BeginDate\": \"{}-01-{}\".format(self.school_year, random.randint(1,30)),\r\n",
							"            \"EndDate\": \"{}-05-{}\".format(self.school_year, random.randint(1,30)),\r\n",
							"            \"TermDescriptor\": self.get_descriptor_string('TermDescriptor', 'Spring Semester'),\r\n",
							"            \"TotalInstructionalDays\": random.randint(60,130),\r\n",
							"            \"GradingPeriods\": [\r\n",
							"                {\r\n",
							"                    \"GradingPeriodReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#Fourth Six Weeks\",\r\n",
							"                    \"PeriodSequence\": 4,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"GradingPeriod\",\r\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                {\r\n",
							"                    \"GradingPeriodReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#Fifth Six Weeks\",\r\n",
							"                    \"PeriodSequence\": 5,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"GradingPeriod\",\r\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                {\r\n",
							"                    \"GradingPeriodReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#Sixth Six Weeks\",\r\n",
							"                    \"PeriodSequence\": 6,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"GradingPeriod\",\r\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                    }\r\n",
							"                }\r\n",
							"            ],\r\n",
							"            \"_etag\": self.faker.random_number(digits=10)\r\n",
							"        }]\r\n",
							"\r\n",
							"    def create_sections(self, school):\r\n",
							"        sections = []\r\n",
							"        for _ in range(self.number_sections_per_school):\r\n",
							"            semesterType = random.choice(['Spring', 'Fall'])\r\n",
							"            subjectName = random.choice(SUBJECT_NAMES)[1]\r\n",
							"            subjectNumber = random.randint(1,5)\r\n",
							"            sections.append({\r\n",
							"                \"Id\": self.faker.uuid4().replace('-',''),\r\n",
							"                \"CourseOfferingReference\": {\r\n",
							"                    \"LocalCourseCode\": \"{}-{}\".format(subjectName[0:3].upper(), subjectNumber),\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"SessionName\": \"{} - {} {} Semester\".format(int(self.school_year) - 1, semesterType, self.school_year),\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"CourseOffering\",\r\n",
							"                        \"href\": \"/ed-fi/courseOfferings/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"LocationReference\": {\r\n",
							"                    \"ClassroomIdentificationCode\": self.faker.random_number(digits = 3),\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"Location\",\r\n",
							"                        \"href\": \"/ed-fi/locations/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"LocationSchoolReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"School\",\r\n",
							"                        \"href\": \"/ed-fi/schools/{}\".format(school['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"SectionIdentifier\": self.faker.uuid4().replace('-',''),\r\n",
							"                \"AvailableCredits\": random.randint(1,4),\r\n",
							"                \"EducationalEnvironmentDescriptor\": self.get_descriptor_string('EducationalEnvironmentDescriptor','Classroom'),\r\n",
							"                \"SectionName\": \"{} {}\".format(subjectName, subjectNumber),\r\n",
							"                \"SequenceOfCourse\": random.randint(1,5),\r\n",
							"                \"Characteristics\": [],\r\n",
							"                \"ClassPeriods\": [\r\n",
							"                {\r\n",
							"                    \"ClassPeriodReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"ClassPeriodName\": \"{} - Traditional\".format(random.randint(1,5)),\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"ClassPeriod\",\r\n",
							"                        \"href\": \"/ed-fi/classPeriods/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                    }\r\n",
							"                }\r\n",
							"                ],\r\n",
							"                \"CourseLevelCharacteristics\": [],\r\n",
							"                \"OfferedGradeLevels\": [],\r\n",
							"                \"Programs\": [],\r\n",
							"                \"_etag\": self.faker.random_number(digits=10)\r\n",
							"            })\r\n",
							"        return sections\r\n",
							"\r\n",
							"    def create_student_section_associations(self, school):\r\n",
							"        student_section_associations = []\r\n",
							"        session = random.choice(school['_Sessions'])\r\n",
							"        for student in school['_Students']:\r\n",
							"            course = random.choice(school['_Courses'])\r\n",
							"            section = random.choice(school['_Sections'])\r\n",
							"            student_section_associations.append({\r\n",
							"                    \"Id\": self.faker.uuid4().replace('-',''),\r\n",
							"                    \"SectionReference\": {\r\n",
							"                        \"LocalCourseCode\": course['CourseCode'],\r\n",
							"                        \"SchoolId\": school['SchoolId'],\r\n",
							"                        \"SchoolYear\": self.school_year,\r\n",
							"                        \"SectionIdentifier\": section['SectionIdentifier'],\r\n",
							"                        \"SessionName\": session['SessionName'],\r\n",
							"                        \"Link\": {\r\n",
							"                            \"rel\": \"Section\",\r\n",
							"                            \"href\": \"/ed-fi/sections/{}\".format(section['Id'])\r\n",
							"                        }\r\n",
							"                    },\r\n",
							"                    \"StudentReference\": {\r\n",
							"                        \"StudentUniqueId\": student['StudentUniqueId'],\r\n",
							"                        \"Link\": {\r\n",
							"                            \"rel\": \"Student\",\r\n",
							"                            \"href\": \"/ed-fi/students/{}\".format(student['Id'])\r\n",
							"                        }\r\n",
							"                    },\r\n",
							"                    \"BeginDate\": session['BeginDate'],\r\n",
							"                    \"EndDate\": session['EndDate'],\r\n",
							"                    \"HomeroomIndicator\": random.choice(BOOLEAN),\r\n",
							"                    \"_etag\": self.faker.random_number(digits = 10)\r\n",
							"                })\r\n",
							"        return student_section_associations\r\n",
							"\r\n",
							"    def create_staff_section_associations(self,school):\r\n",
							"        staff_section_associations = []\r\n",
							"        for staff in school['_Staffs']:\r\n",
							"            session = random.choice(school['_Sessions'])\r\n",
							"            section = random.choice(school['_Sections'])\r\n",
							"            staff_section_associations.append({\r\n",
							"                \"Id\": self.faker.uuid4().replace('-',''),\r\n",
							"                \"SectionReference\": {\r\n",
							"                    \"LocalCourseCode\": section['CourseOfferingReference']['LocalCourseCode'],\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"SectionIdentifier\": section['SectionIdentifier'],\r\n",
							"                    \"SessionName\": session['SessionName'],\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"Section\",\r\n",
							"                        \"href\": \"/ed-fi/sections/{}\".format(section['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"StaffReference\": {\r\n",
							"                    \"StaffUniqueId\": staff['StaffUniqueId'],\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"Staff\",\r\n",
							"                        \"href\": \"/ed-fi/staffs/{}\".format(staff['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"BeginDate\": session['BeginDate'],\r\n",
							"                \"ClassroomPositionDescriptor\": \"uri://ed-fi.org/ClassroomPositionDescriptor#Teacher of Record\",\r\n",
							"                \"EndDate\": session['EndDate'],\r\n",
							"                \"_etag\": self.faker.uuid4().replace('-','')\r\n",
							"            })\r\n",
							"        return staff_section_associations\r\n",
							"\r\n",
							"\r\n",
							"    def create_staff_school_associations(self, school):\r\n",
							"        staff_school_associations = []\r\n",
							"        for staff in school['_Staffs']:\r\n",
							"            staff_school_associations.append({\r\n",
							"                \"Id\": self.faker.uuid4().replace('-',''),\r\n",
							"                \"SchoolReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"School\",\r\n",
							"                        \"href\": \"/ed-fi/schools/{}\".format(school['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"StaffReference\": {\r\n",
							"                    \"StaffUniqueId\": staff['StaffUniqueId'],\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"Staff\",\r\n",
							"                        \"href\": \"/ed-fi/staffs/{}\".format(staff['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"ProgramAssignmentDescriptor\": self.get_descriptor_string('ProgramAssignmentDescriptor','Regular Education'),\r\n",
							"                \"AcademicSubjects\": [\r\n",
							"                    {\r\n",
							"                        \"AcademicSubjectDescriptor\": self.get_descriptor_string('AcademicSubjectDescriptor',random.choice(SUBJECT_NAMES)[0])\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"GradeLevels\": [\r\n",
							"                    {'GradeLevelDescriptor': self.get_descriptor_string('GradeLevelDescriptor',random.choice(GRADE_LEVEL))} for _ in range(4)\r\n",
							"            ],\r\n",
							"                \"_etag\": self.faker.random_number(digits=10)\r\n",
							"            })\r\n",
							"        return staff_school_associations\r\n",
							"\r\n",
							"    def format_edfi_data(self,data):\r\n",
							"        result = {\r\n",
							"            'Schools':[],\r\n",
							"            'Students':[],\r\n",
							"            'Calendars':[],\r\n",
							"            'Courses':[],\r\n",
							"            'StudentSchoolAssociations':[],\r\n",
							"            'Staffs':[],\r\n",
							"            'Sections': [],\r\n",
							"            'StaffSchoolAssociations':[],\r\n",
							"            'Sessions':[],\r\n",
							"            'StudentSectionAssociations':[],\r\n",
							"            'StaffSectionAssociations':[]\r\n",
							"\r\n",
							"        }\r\n",
							"        for school in data:\r\n",
							"            result['Schools'].append({key: school[key] for key in school if not (key.startswith('_')) })\r\n",
							"            result['Students'] += school['_Students']\r\n",
							"            result['Courses'] += school['_Courses']\r\n",
							"            result['StudentSchoolAssociations'] += school['_StudentAssociations']\r\n",
							"            result['Calendars'].append(school['_Calendars'])\r\n",
							"            result['Staffs'] += school['_Staffs']\r\n",
							"            result['Sections'] += school['_Sections']\r\n",
							"            result['StaffSchoolAssociations'] += school['_StaffSchoolAssociations']\r\n",
							"            result['Sessions'] += school['_Sessions']\r\n",
							"            result['StudentSectionAssociations'] += school['_StudentSectionAssociations']\r\n",
							"            result['StaffSectionAssociations'] += school['_StaffSectionAssociations']\r\n",
							"            \r\n",
							"\r\n",
							"        return result\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EdFiDataGenerator')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5ac33550-3ea4-4dc0-9a3a-7dae1b04d76a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import random\n",
							"from DataGenUtil import *\n",
							"import json\n",
							"from faker import Faker\n",
							"\n",
							"GENDER = ['Male','Female']\n",
							"BOOLEAN = [True, False]\n",
							"OPERATIONAL_STATUS = ['Active','Inactive']\n",
							"CHARTER_STATUS = ['School Charter', 'Open Enrollment Charter', 'Not a Charter School']\n",
							"GRADE_LEVEL = ['First Grade','Second Grade','Third Grade','Fourth Grade','Fifth Grade','Sixth Grade','Seventh Grade','Eighth Grade','Ninth Grade','Tenth Grade','Eleventh Grade','Twelfth Grade']\n",
							"SCHOOL_TYPES = ['High School', 'Middle School', 'Elementary School']\n",
							"SUBJECT_NAMES = [('Math','Algebra'), ('Math','Geometry'), ('Language','English'), ('History','World History'),('Science','Biology'), ('Science','Health'), ('Technology',' Programming'), ('Physical Education','Sports'), ('Arts','Music')]\n",
							"LEVELS_OF_EDUCATION = ['Some College No Degree', 'Doctorate', 'Bachelor\\'s','Master\\'s']\n",
							"PERSONAL_INFORMATION_VERIFICATION_DESCRIPTIONS = ['Entry in family Bible', 'Other official document', 'State-issued ID', 'Hospital certificate', 'Passport', 'Parents affidavit', 'Immigration document/visa', 'Drivers license']\n",
							"RACES = ['Asian' , 'Native Hawaiian - Pacific Islander', 'American Indian - Alaska Native', 'White']\n",
							"\n",
							"class EdFiDataGenerator:\n",
							"    def __init__(self,number_students_per_school=100, include_optional_fields=True, school_year='2021', credit_conversion_factor = 2.0, number_of_grades_per_school = 5, is_current_school_year = True, graduation_plans_per_school = 10, unique_id_length = 5, number_staffs_per_school = 50, number_sections_per_school = 10):\n",
							"        # Set a seed value in Faker so it generates same values every run.\n",
							"        self.faker = Faker('en_US')\n",
							"        Faker.seed(1)\n",
							"\n",
							"        self.include_optional_fields = include_optional_fields\n",
							"        self.graduation_plans_per_school = graduation_plans_per_school\n",
							"        self.school_year = school_year\n",
							"        self.country = 'United States of America'\n",
							"        self.number_students_per_school = number_students_per_school\n",
							"        self.credit_conversion_factor = credit_conversion_factor\n",
							"        self.number_of_grades_per_school = number_of_grades_per_school\n",
							"        self.is_current_school_year = is_current_school_year\n",
							"        self.unique_id_length = unique_id_length\n",
							"        self.number_staffs_per_school = number_staffs_per_school\n",
							"        self.number_sections_per_school = number_sections_per_school\n",
							"\n",
							"    def get_descriptor_string(self, key, value):\n",
							"        return \"uri://ed-fi.org/{}#{}\".format(key,value)\n",
							"\n",
							"    def generate_data(self, num_of_schools, writer):\n",
							"        edfi_data = [self.create_school() for _ in range(num_of_schools)]\n",
							"        edfi_data_formatted = self.format_edfi_data(edfi_data)\n",
							"\n",
							"\n",
							"        writer.write(f'EdFi/School.json',list_of_dict_to_json(edfi_data_formatted['Schools']))\n",
							"        writer.write(f'EdFi/Student.json',list_of_dict_to_json(edfi_data_formatted['Students']))\n",
							"        writer.write(f'EdFi/StudentSchoolAssociation.json',list_of_dict_to_json(edfi_data_formatted['StudentSchoolAssociations']))\n",
							"        writer.write(f'EdFi/Course.json',list_of_dict_to_json(edfi_data_formatted['Courses']))\n",
							"        writer.write(f'EdFi/Calendar.json',list_of_dict_to_json(edfi_data_formatted['Calendars']))\n",
							"        writer.write(f'EdFi/Sessions.json',list_of_dict_to_json(edfi_data_formatted['Sessions']))\n",
							"        writer.write(f'EdFi/StaffSchoolAssociations.json',list_of_dict_to_json(edfi_data_formatted['StaffSchoolAssociations']))\n",
							"        writer.write(f'EdFi/Sections.json',list_of_dict_to_json(edfi_data_formatted['Sections']))\n",
							"        writer.write(f'EdFi/Staffs.json',list_of_dict_to_json(edfi_data_formatted['Staffs']))\n",
							"        writer.write(f'EdFi/StudentSectionAssociations.json',list_of_dict_to_json(edfi_data_formatted['StudentSectionAssociations']))\n",
							"        writer.write(f'EdFi/StaffSectionAssociations.json',list_of_dict_to_json(edfi_data_formatted['StaffSectionAssociations']))\n",
							"\n",
							"\n",
							"    def create_school(self):\n",
							"        school_type = random.choice(SCHOOL_TYPES)\n",
							"        school_name = self.faker.city() + ' ' + school_type\n",
							"        school = {\n",
							"            'Id': self.faker.uuid4().replace('-',''),\n",
							"            'SchoolId': self.faker.random_number(digits = self.unique_id_length),\n",
							"            'NameOfInstitution': school_name,\n",
							"            'OperationalStatusDescriptor': self.get_descriptor_string('OperationalStatusDescriptor',random.choice(OPERATIONAL_STATUS)),\n",
							"            'ShortNameOfInstitution': ''.join([word[0] for word in school_name.split()]),\n",
							"            'Website':''.join(['www.',school_name.lower().replace(' ',''),'.com']),\n",
							"            'AdministrativeFundingControlDescriptor': self.get_descriptor_string('AdministrativeFundingControlDescriptor',random.choice(['public', 'private']) + ' School'),\n",
							"            'CharterStatusDescriptor': self.get_descriptor_string('CharterStatusDescriptor',random.choice(CHARTER_STATUS)),\n",
							"            'SchoolTypeDescriptor': self.get_descriptor_string('SchoolTypeDescriptor','Regular'),\n",
							"            'TitleIPartASchoolDesignationDescriptor': self.get_descriptor_string('TitleIPartASchoolDesignationDescriptor','Not A Title I School'),\n",
							"            'Addresses': self.create_address() if self.include_optional_fields else '',\n",
							"            'EducationOrganizationCategories':[{'EducationOrganizationCategoryDescriptor': self.get_descriptor_string('educationOrganizationCategoryDescriptor','School')}],\n",
							"            'IdentificationCodes': [\n",
							"                {\n",
							"                    'educationOrganizationIdentificationSystemDescriptor': self.get_descriptor_string('educationOrganizationIdentificationSystemDescriptor','SEA'),\n",
							"                    'identificationCode': self.faker.random_number(digits=10)\n",
							"                }\n",
							"            ],\n",
							"            'InstitutionTelephones': self.create_telephones(),\n",
							"            'InternationalAddresses': [],\n",
							"            'SchoolCategories': [\n",
							"                {\n",
							"                    'SchoolCategoryDescriptor': self.get_descriptor_string('SchoolCategoryDescriptor',school_type)\n",
							"                }\n",
							"            ],\n",
							"            'gradeLevels': [\n",
							"                {'gradeLevelDescriptor': self.get_descriptor_string('GradeLevelDescriptor',random.choice(GRADE_LEVEL))} for _ in range(4)\n",
							"            ]\n",
							"        }\n",
							"\n",
							"        school['_SchoolYears'] = self.create_school_years()\n",
							"        school['_Calendars'] = self.create_calendars(school)\n",
							"        school['_Students'] = self.create_students()\n",
							"        school['_Courses'] = self.create_courses(school['SchoolId'],school['Id'],school_name)\n",
							"        school['_GraduationPlans'] = self.create_graduation_plans(school)\n",
							"        school['_StudentAssociations'] = self.create_student_school_associations(school)\n",
							"        school['_Staffs'] = self.create_staffs()\n",
							"        school['_StaffSchoolAssociations'] = self.create_staff_school_associations(school)\n",
							"        school['_Sessions'] = self.create_sessions(school)\n",
							"        school['_Sections'] = self.create_sections(school)\n",
							"        school['_StaffSectionAssociations'] = self.create_staff_section_associations(school)\n",
							"        school['_StudentSectionAssociations'] = self.create_student_section_associations(school)\n",
							"        return school\n",
							"\n",
							"    def create_students(self):\n",
							"        students = []\n",
							"        for _ in range(self.number_students_per_school):\n",
							"            gender = random.choice(GENDER)\n",
							"            fname = self.faker.first_name_male() if gender == 'Male' else self.faker.first_name_female()\n",
							"            students.append({\n",
							"                'Id': self.faker.uuid4().replace('-',''),\n",
							"                'StudentUniqueId': self.faker.random_number(digits = self.unique_id_length),\n",
							"                \"BirthCity\": self.faker.city(),\n",
							"                \"BirthDate\": str(self.faker.date_between(start_date='-18y',end_date='-5y')),\n",
							"                \"BirthSexDescriptor\": self.get_descriptor_string('birthStateAbbreviationDescriptor', gender),\n",
							"                \"FirstName\": fname,\n",
							"                \"IdentificationDocuments\": [],\n",
							"                \"LastSurname\": self.faker.last_name(),\n",
							"                \"OtherNames\": [\n",
							"                    {\n",
							"                        \"OtherNameTypeDescriptor\": self.get_descriptor_string('otherNameTypeDescriptor','Nickname'),\n",
							"                        \"FirstName\": self.faker.first_name_male() if gender == 'Male' else self.faker.first_name_female(),\n",
							"                        \"PersonalTitlePrefix\": 'Mr' if gender == 'Male' else 'Ms'\n",
							"                    }\n",
							"                ],\n",
							"                \"PersonalIdentificationDocuments\": [],\n",
							"                \"PersonalTitlePrefix\": 'Mr' if gender == 'Male' else 'Ms',\n",
							"                \"Visas\": [],\n",
							"                \"_etag\": self.faker.random_number(digits=10)\n",
							"        })\n",
							"        return students\n",
							"\n",
							"\n",
							"    def create_student_school_associations(self,school):\n",
							"        result = []\n",
							"        graduation_plan_ids = [gp['Id'] for gp in school['_GraduationPlans']]\n",
							"        for student in school['_Students']:\n",
							"            result.append({\n",
							"                'Id': self.faker.uuid4().replace('-',''),\n",
							"                \"GraduationPlanReference\": {\n",
							"                    \"EducationOrganizationId\": school['SchoolId'],\n",
							"                    \"GraduationPlanTypeDescriptor\": \"uri://ed-fi.org/GraduationPlanTypeDescriptor#Minimum\",\n",
							"                    \"GraduationSchoolYear\": self.school_year,\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"GraduationPlan\",\n",
							"                        \"href\": '/ed-fi/graduationPlans/{}'.format(random.choice(graduation_plan_ids))\n",
							"                    }\n",
							"                },\n",
							"                \"SchoolReference\": {\n",
							"                    \"SchoolId\": school['SchoolId'],\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"School\",\n",
							"                        \"href\": '/ed-fi/schools/{}'.format(school['Id'])\n",
							"                    }\n",
							"                },\n",
							"                \"StudentReference\": {\n",
							"                    \"StudentUniqueId\": student['StudentUniqueId'],\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"Student\",\n",
							"                        \"href\": \"/ed-fi/students/{}\".format(student['Id'])\n",
							"                    }\n",
							"                },\n",
							"                \"EntryDate\": str(self.faker.date_between(start_date='-5y',end_date='today')),\n",
							"                \"EntryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#{}\".format(random.choice(GRADE_LEVEL)),\n",
							"                \"AlternativeGraduationPlans\": [],\n",
							"                \"EducationPlans\": [],\n",
							"                \"_etag\": self.faker.random_number(digits=10)\n",
							"            })\n",
							"        return result\n",
							"\n",
							"    def create_calendars(self,school):\n",
							"        return {\n",
							"            'Id': self.faker.uuid4().replace('-',''),\n",
							"            'CalendarCode':self.faker.random_number(digits = self.unique_id_length),\n",
							"            \"SchoolReference\": {\n",
							"                \"SchoolId\": school['SchoolId'],\n",
							"                \"Link\": {\n",
							"                    \"rel\": \"School\",\n",
							"                    \"href\": \"/ed-fi/schools/{}\".format(school['Id'])\n",
							"                }\n",
							"            },\n",
							"            \"SchoolYearTypeReference\": {\n",
							"                \"SchoolYear\": self.school_year,\n",
							"                \"Link\": {\n",
							"                    \"rel\": \"SchoolYearType\",\n",
							"                    \"href\": \"/ed-fi/schoolYearTypes/{}\".format(school['_SchoolYears']['Id'])\n",
							"                }\n",
							"            },\n",
							"            'CalendarTypeDescriptor': self.get_descriptor_string('calendarTypeDescriptor','Student Specific'),\n",
							"            'GradeLevel': []\n",
							"        }\n",
							"\n",
							"    def create_address(self):\n",
							"        address = []\n",
							"        state = self.faker.state_abbr()\n",
							"        for n in ['Physical', 'Mailing']:\n",
							"            address.append({\n",
							"                'AddressType':n,\n",
							"                'City':self.faker.city(),\n",
							"                'PostalCode':self.faker.postcode(),\n",
							"                'StateAbbreviation':state,\n",
							"                'StreetNumberName':self.faker.street_name()\n",
							"            })\n",
							"        return address\n",
							"\n",
							"    def create_courses(self,school_id,id,school_name):\n",
							"        courses = []\n",
							"        for subject,course_name in SUBJECT_NAMES:\n",
							"            courseCode = '{}-{}'.format(course_name[0:3].upper(),random.choice(range(1,5)))\n",
							"            courses.append({\n",
							"                \"Id\": self.faker.uuid4().replace('-',''),\n",
							"                \"EducationOrganizationReference\": {\n",
							"                    \"EducationOrganizationId\": school_id,\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"School\",\n",
							"                        \"href\": \"/ed-fi/schools/{}\".format(id)\n",
							"                    }\n",
							"                },\n",
							"                \"CourseCode\": courseCode,\n",
							"                \"AcademicSubjectDescriptor\": self.get_descriptor_string('academicSubjectDescriptor', subject),\n",
							"                \"CourseDefinedByDescriptor\": self.get_descriptor_string('CourseDefinedByDescriptor','SEA'),\n",
							"                \"CourseDescription\": 'Description about {}'.format(course_name),\n",
							"                \"CourseGPAApplicabilityDescriptor\": self.get_descriptor_string('CourseGPAApplicabilityDescriptor',random.choice(['Applicable','Not Applicable'])),\n",
							"                \"CourseTitle\": course_name,\n",
							"                \"HighSchoolCourseRequirement\": random.choice(BOOLEAN),\n",
							"                \"NumberOfParts\": 1,\n",
							"                \"CompetencyLevels\": [],\n",
							"                \"IdentificationCodes\": [\n",
							"                    {\n",
							"                        \"CourseIdentificationSystemDescriptor\": self.get_descriptor_string('CourseIdentificationSystemDescriptor','LEA course code'),\n",
							"                        \"CourseCatalogURL\": \"http://www.{}.edu/coursecatalog\".format(school_name.lower().replace(' ','')),\n",
							"                        \"IdentificationCode\": courseCode\n",
							"                    },\n",
							"                    {\n",
							"                        \"CourseIdentificationSystemDescriptor\": self.get_descriptor_string('CourseIdentificationSystemDescriptor','State course code'),\n",
							"                        \"IdentificationCode\": self.faker.random_number(digits = self.unique_id_length)\n",
							"                    }\n",
							"                ],\n",
							"                \"LearningObjectives\": [],\n",
							"                \"LearningStandards\": [\n",
							"                    {\n",
							"                        \"LearningStandardReference\": {\n",
							"                            \"LearningStandardId\": self.faker.random_number(digits = self.unique_id_length),\n",
							"                            \"Link\": {\n",
							"                                \"rel\": \"LearningStandard\",\n",
							"                                \"href\": \"/ed-fi/learningStandards/{}\".format(self.faker.uuid4().replace('-',''))\n",
							"                            }\n",
							"                        }\n",
							"                    }\n",
							"                ],\n",
							"                \"LevelCharacteristics\": [\n",
							"                    {\n",
							"                        \"CourseLevelCharacteristicDescriptor\": self.get_descriptor_string('CourseLevelCharacteristicDescriptor','Core Subject')\n",
							"                    }\n",
							"                ],\n",
							"                \"OfferedGradeLevels\": [],\n",
							"                \"_etag\": self.faker.random_number(digits=10)\n",
							"            })\n",
							"        return courses\n",
							"\n",
							"\n",
							"    def create_graduation_plans(self, school):\n",
							"        graduation_plans = []\n",
							"        for _ in range(self.graduation_plans_per_school):\n",
							"            graduation_plans.append({\n",
							"                'Id': self.faker.uuid4().replace('-',''),\n",
							"                \"EducationOrganizationReference\": {\n",
							"                    \"EducationOrganizationId\": school['SchoolId'],\n",
							"                    \"link\": {\n",
							"                        \"rel\": \"School\",\n",
							"                        \"href\": \"/ed-fi/schools/{}\".format(school['Id'])\n",
							"                    }\n",
							"                },\n",
							"                \"GraduationSchoolYearTypeReference\": {\n",
							"                    \"SchoolYear\": self.school_year,\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"SchoolYearType\",\n",
							"                        \"href\": \"/ed-fi/schoolYearTypes/{}\".format(school['_SchoolYears']['Id'])\n",
							"                    }\n",
							"                },\n",
							"                \"GraduationPlanTypeDescriptor\": self.get_descriptor_string('GraduationPlanTypeDescriptor', random.choice(['Minimum','Recommended'])),\n",
							"                \"TotalRequiredCredits\": random.choice(range(20,30)),\n",
							"                \"CreditsByCourses\": [],\n",
							"                \"CreditsByCreditCategories\": [\n",
							"                    {\n",
							"                        \"CreditCategoryDescriptor\": self.get_descriptor_string('CreditCategoryDescriptor','Honors'),\n",
							"                        \"Credits\": random.choice(range(5,15))\n",
							"                    }\n",
							"                ],\n",
							"                \"CreditsBySubjects\": [],\n",
							"                \"RequiredAssessments\": [],\n",
							"                \"_etag\": self.faker.random_number(digits=10)\n",
							"            })\n",
							"        return graduation_plans\n",
							"\n",
							"    def create_school_years(self):\n",
							"        return {\n",
							"            'Id': self.faker.uuid4().replace('-',''),\n",
							"            'SchoolYear': self.school_year,\n",
							"            'CurrentSchoolYear': self.is_current_school_year,\n",
							"            'schoolYearDescription': 'Description about school year',\n",
							"            '_etag': self.faker.random_number(digits=10)\n",
							"        }\n",
							"\n",
							"    def create_telephones(self):\n",
							"        return [\n",
							"            {\n",
							"                'InstitutionTelephoneNumberTypeDescriptor': self.get_descriptor_string('InstitutionTelephoneNumberTypeDescriptor', _),\n",
							"                \"TelephoneNumber\": self.faker.phone_number()\n",
							"            }\n",
							"            for _ in ['Fax','Main']\n",
							"        ]\n",
							"\n",
							"    def create_staffs(self):\n",
							"        staffs = []\n",
							"        for _ in range(self.number_staffs_per_school):\n",
							"            gender = random.choice(GENDER)\n",
							"            fname = self.faker.first_name_male() if gender == 'Male' else self.faker.first_name_female()\n",
							"            lname = self.faker.last_name()\n",
							"            staffs.append({\n",
							"                \"Id\": self.faker.uuid4().replace('-',''),\n",
							"                \"StaffUniqueId\": self.faker.random_number(digits = self.unique_id_length),\n",
							"                \"BirthDate\": str(self.faker.date_between(start_date='-60y',end_date='-30y')),\n",
							"                \"FirstName\": fname,\n",
							"                \"HighestCompletedLevelOfEducationDescriptor\": self.get_descriptor_string('LevelOfEducationDescriptor', value = random.choice(LEVELS_OF_EDUCATION)),\n",
							"                \"HispanicLatinoEthnicity\": random.choice(BOOLEAN),\n",
							"                \"LastSurname\": lname,\n",
							"                \"LoginId\": '{}{}'.format(fname[0],lname.lower()),\n",
							"                \"PersonalTitlePrefix\": 'Mr' if gender == 'Male' else 'Ms',\n",
							"                \"SexDescriptor\": self.get_descriptor_string('SexDescriptor', value = gender),\n",
							"                \"YearsOfPriorProfessionalExperience\": random.choice(range(50)),\n",
							"                \"Addresses\": self.create_address(),\n",
							"                \"AncestryEthnicOrigins\": [],\n",
							"                \"Credentials\": [\n",
							"                    {\n",
							"                        \"CredentialReference\": {\n",
							"                            \"CredentialIdentifier\": self.faker.random_number(digits = 10),\n",
							"                            \"StateOfIssueStateAbbreviationDescriptor\": self.get_descriptor_string('StateAbbreviationDescriptor', 'TX'),\n",
							"                            \"Link\": {\n",
							"                                \"rel\": \"Credential\",\n",
							"                                \"href\": \"/ed-fi/credentials/\" + self.faker.uuid4().replace('-','')\n",
							"                            }\n",
							"                        }\n",
							"                    }\n",
							"                ],\n",
							"                \"ElectronicMails\": [\n",
							"                    {\n",
							"                        \"ElectronicMailAddress\": \"{}{}@edfi.org\".format(fname,lname),\n",
							"                        \"ElectronicMailTypeDescriptor\": self.get_descriptor_string('ElectronicMailTypeDescriptor','Work')\n",
							"                    }\n",
							"                ],\n",
							"                \"IdentificationCodes\": [\n",
							"                    {\n",
							"                        \"StaffIdentificationSystemDescriptor\": self.get_descriptor_string('StaffIdentificationSystemDescriptor','State'),\n",
							"                        \"IdentificationCode\": self.faker.random_number(digits = self.unique_id_length)\n",
							"                    }\n",
							"                ],\n",
							"                \"IdentificationDocuments\": [],\n",
							"                \"InternationalAddresses\": self.create_address(),\n",
							"                \"Languages\": [],\n",
							"                \"OtherNames\": [self.faker.first_name_male() if gender == 'Male' else self.faker.first_name_female()],\n",
							"                \"PersonalIdentificationDocuments\": [\n",
							"                    {\n",
							"                        \"IdentificationDocumentUseDescriptor\": \"uri://ed-fi.org/IdentificationDocumentUseDescriptor#Personal Information Verification\",\n",
							"                        \"PersonalInformationVerificationDescriptor\": self.get_descriptor_string('PersonalInformationVerificationDescriptor', value = random.choice(PERSONAL_INFORMATION_VERIFICATION_DESCRIPTIONS))\n",
							"                    }\n",
							"                ],\n",
							"                \"Races\": [\n",
							"                    {\n",
							"                        \"RaceDescriptor\": self.get_descriptor_string('RaceDescriptor', value = random.choice(RACES))\n",
							"                    }\n",
							"                ],\n",
							"                \"_etag\": self.faker.random_number(digits=10)\n",
							"            })\n",
							"        return staffs\n",
							"\n",
							"    def create_sessions(self, school):\n",
							"\n",
							"        return [{\n",
							"            \"Id\": self.faker.uuid4().replace('-',''),\n",
							"            \"SchoolReference\":{\n",
							"                \"SchoolId\":school['SchoolId'],\n",
							"                \"Link\":{\n",
							"                    \"rel\":\"School\",\n",
							"                    \"href\":\"/ed-fi/schools/{}\".format(school['Id'])\n",
							"                }\n",
							"            },\n",
							"            \"SchoolYearTypeReference\": {\n",
							"                \"SchoolYear\": self.school_year,\n",
							"                \"Link\": {\n",
							"                    \"rel\": \"SchoolYearType\",\n",
							"                    \"href\": \"/ed-fi/schoolYearTypes/{}\".format(school['_SchoolYears']['Id'])\n",
							"                }\n",
							"            },\n",
							"            \"SessionName\": \"{} - {} Fall Semester\".format(int(self.school_year) - 1, self.school_year ),\n",
							"            \"BeginDate\": \"{}-08-{}\".format(int(self.school_year) - 1, random.randint(1,30)),\n",
							"            \"EndDate\": \"{}-12-{}\".format(int(self.school_year) - 1, random.randint(1,30)),\n",
							"            \"TermDescriptor\": self.get_descriptor_string('TermDescriptor', 'Fall Semester'),\n",
							"            \"TotalInstructionalDays\": random.randint(60,130),\n",
							"            \"GradingPeriods\": [\n",
							"                {\n",
							"                    \"GradingPeriodReference\": {\n",
							"                    \"SchoolId\": school['SchoolId'],\n",
							"                    \"SchoolYear\": self.school_year,\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks\",\n",
							"                    \"PeriodSequence\": 1,\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"GradingPeriod\",\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\n",
							"                    }\n",
							"                    }\n",
							"                },\n",
							"                {\n",
							"                    \"GradingPeriodReference\": {\n",
							"                    \"SchoolId\": school['SchoolId'],\n",
							"                    \"SchoolYear\": self.school_year,\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#Second Six Weeks\",\n",
							"                    \"PeriodSequence\": 2,\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"GradingPeriod\",\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\n",
							"                    }\n",
							"                    }\n",
							"                },\n",
							"                {\n",
							"                    \"GradingPeriodReference\": {\n",
							"                    \"SchoolId\": school['SchoolId'],\n",
							"                    \"SchoolYear\": self.school_year,\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#Third Six Weeks\",\n",
							"                    \"PeriodSequence\": 3,\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"GradingPeriod\",\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\n",
							"                    }\n",
							"                    }\n",
							"                }\n",
							"            ],\n",
							"            \"_etag\": self.faker.random_number(digits=10)\n",
							"        },\n",
							"        {\n",
							"            \"Id\": self.faker.uuid4().replace('-',''),\n",
							"            \"SchoolReference\":{\n",
							"                \"SchoolId\":school['SchoolId'],\n",
							"                \"Link\":{\n",
							"                    \"rel\":\"School\",\n",
							"                    \"href\":\"/ed-fi/schools/{}\".format(school['Id'])\n",
							"                }\n",
							"            },\n",
							"            \"SchoolYearTypeReference\": {\n",
							"                \"SchoolYear\": self.school_year,\n",
							"                \"Link\": {\n",
							"                    \"rel\": \"SchoolYearType\",\n",
							"                    \"href\": \"/ed-fi/schoolYearTypes/{}\".format(school['_SchoolYears']['Id'])\n",
							"                }\n",
							"            },\n",
							"            \"SessionName\": \"{} - {} Spring Semester\".format(int(self.school_year) - 1, self.school_year),\n",
							"            \"BeginDate\": \"{}-01-{}\".format(self.school_year, random.randint(1,30)),\n",
							"            \"EndDate\": \"{}-05-{}\".format(self.school_year, random.randint(1,30)),\n",
							"            \"TermDescriptor\": self.get_descriptor_string('TermDescriptor', 'Spring Semester'),\n",
							"            \"TotalInstructionalDays\": random.randint(60,130),\n",
							"            \"GradingPeriods\": [\n",
							"                {\n",
							"                    \"GradingPeriodReference\": {\n",
							"                    \"SchoolId\": school['SchoolId'],\n",
							"                    \"SchoolYear\": self.school_year,\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#Fourth Six Weeks\",\n",
							"                    \"PeriodSequence\": 4,\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"GradingPeriod\",\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\n",
							"                    }\n",
							"                    }\n",
							"                },\n",
							"                {\n",
							"                    \"GradingPeriodReference\": {\n",
							"                    \"SchoolId\": school['SchoolId'],\n",
							"                    \"SchoolYear\": self.school_year,\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#Fifth Six Weeks\",\n",
							"                    \"PeriodSequence\": 5,\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"GradingPeriod\",\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\n",
							"                    }\n",
							"                    }\n",
							"                },\n",
							"                {\n",
							"                    \"GradingPeriodReference\": {\n",
							"                    \"SchoolId\": school['SchoolId'],\n",
							"                    \"SchoolYear\": self.school_year,\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#Sixth Six Weeks\",\n",
							"                    \"PeriodSequence\": 6,\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"GradingPeriod\",\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\n",
							"                    }\n",
							"                    }\n",
							"                }\n",
							"            ],\n",
							"            \"_etag\": self.faker.random_number(digits=10)\n",
							"        }]\n",
							"\n",
							"    def create_sections(self, school):\n",
							"        sections = []\n",
							"        for _ in range(self.number_sections_per_school):\n",
							"            semesterType = random.choice(['Spring', 'Fall'])\n",
							"            subjectName = random.choice(SUBJECT_NAMES)[1]\n",
							"            subjectNumber = random.randint(1,5)\n",
							"            sections.append({\n",
							"                \"Id\": self.faker.uuid4().replace('-',''),\n",
							"                \"CourseOfferingReference\": {\n",
							"                    \"LocalCourseCode\": \"{}-{}\".format(subjectName[0:3].upper(), subjectNumber),\n",
							"                    \"SchoolId\": school['SchoolId'],\n",
							"                    \"SchoolYear\": self.school_year,\n",
							"                    \"SessionName\": \"{} - {} {} Semester\".format(int(self.school_year) - 1, semesterType, self.school_year),\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"CourseOffering\",\n",
							"                        \"href\": \"/ed-fi/courseOfferings/{}\".format(self.faker.uuid4().replace('-',''))\n",
							"                    }\n",
							"                },\n",
							"                \"LocationReference\": {\n",
							"                    \"ClassroomIdentificationCode\": self.faker.random_number(digits = 3),\n",
							"                    \"SchoolId\": school['SchoolId'],\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"Location\",\n",
							"                        \"href\": \"/ed-fi/locations/{}\".format(self.faker.uuid4().replace('-',''))\n",
							"                    }\n",
							"                },\n",
							"                \"LocationSchoolReference\": {\n",
							"                    \"SchoolId\": school['SchoolId'],\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"School\",\n",
							"                        \"href\": \"/ed-fi/schools/{}\".format(school['Id'])\n",
							"                    }\n",
							"                },\n",
							"                \"SectionIdentifier\": self.faker.uuid4().replace('-',''),\n",
							"                \"AvailableCredits\": random.randint(1,4),\n",
							"                \"EducationalEnvironmentDescriptor\": self.get_descriptor_string('EducationalEnvironmentDescriptor','Classroom'),\n",
							"                \"SectionName\": \"{} {}\".format(subjectName, subjectNumber),\n",
							"                \"SequenceOfCourse\": random.randint(1,5),\n",
							"                \"Characteristics\": [],\n",
							"                \"ClassPeriods\": [\n",
							"                {\n",
							"                    \"ClassPeriodReference\": {\n",
							"                    \"SchoolId\": school['SchoolId'],\n",
							"                    \"ClassPeriodName\": \"{} - Traditional\".format(random.randint(1,5)),\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"ClassPeriod\",\n",
							"                        \"href\": \"/ed-fi/classPeriods/{}\".format(self.faker.uuid4().replace('-',''))\n",
							"                    }\n",
							"                    }\n",
							"                }\n",
							"                ],\n",
							"                \"CourseLevelCharacteristics\": [],\n",
							"                \"OfferedGradeLevels\": [],\n",
							"                \"Programs\": [],\n",
							"                \"_etag\": self.faker.random_number(digits=10)\n",
							"            })\n",
							"        return sections\n",
							"\n",
							"    def create_student_section_associations(self, school):\n",
							"        student_section_associations = []\n",
							"        session = random.choice(school['_Sessions'])\n",
							"        for student in school['_Students']:\n",
							"            course = random.choice(school['_Courses'])\n",
							"            section = random.choice(school['_Sections'])\n",
							"            student_section_associations.append({\n",
							"                    \"Id\": self.faker.uuid4().replace('-',''),\n",
							"                    \"SectionReference\": {\n",
							"                        \"LocalCourseCode\": course['CourseCode'],\n",
							"                        \"SchoolId\": school['SchoolId'],\n",
							"                        \"SchoolYear\": self.school_year,\n",
							"                        \"SectionIdentifier\": section['SectionIdentifier'],\n",
							"                        \"SessionName\": session['SessionName'],\n",
							"                        \"Link\": {\n",
							"                            \"rel\": \"Section\",\n",
							"                            \"href\": \"/ed-fi/sections/{}\".format(section['Id'])\n",
							"                        }\n",
							"                    },\n",
							"                    \"StudentReference\": {\n",
							"                        \"StudentUniqueId\": student['StudentUniqueId'],\n",
							"                        \"Link\": {\n",
							"                            \"rel\": \"Student\",\n",
							"                            \"href\": \"/ed-fi/students/{}\".format(student['Id'])\n",
							"                        }\n",
							"                    },\n",
							"                    \"BeginDate\": session['BeginDate'],\n",
							"                    \"EndDate\": session['EndDate'],\n",
							"                    \"HomeroomIndicator\": random.choice(BOOLEAN),\n",
							"                    \"_etag\": self.faker.random_number(digits = 10)\n",
							"                })\n",
							"        return student_section_associations\n",
							"\n",
							"    def create_staff_section_associations(self,school):\n",
							"        staff_section_associations = []\n",
							"        for staff in school['_Staffs']:\n",
							"            session = random.choice(school['_Sessions'])\n",
							"            section = random.choice(school['_Sections'])\n",
							"            staff_section_associations.append({\n",
							"                \"Id\": self.faker.uuid4().replace('-',''),\n",
							"                \"SectionReference\": {\n",
							"                    \"LocalCourseCode\": section['CourseOfferingReference']['LocalCourseCode'],\n",
							"                    \"SchoolId\": school['SchoolId'],\n",
							"                    \"SchoolYear\": self.school_year,\n",
							"                    \"SectionIdentifier\": section['SectionIdentifier'],\n",
							"                    \"SessionName\": session['SessionName'],\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"Section\",\n",
							"                        \"href\": \"/ed-fi/sections/{}\".format(section['Id'])\n",
							"                    }\n",
							"                },\n",
							"                \"StaffReference\": {\n",
							"                    \"StaffUniqueId\": staff['StaffUniqueId'],\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"Staff\",\n",
							"                        \"href\": \"/ed-fi/staffs/{}\".format(staff['Id'])\n",
							"                    }\n",
							"                },\n",
							"                \"BeginDate\": session['BeginDate'],\n",
							"                \"ClassroomPositionDescriptor\": \"uri://ed-fi.org/ClassroomPositionDescriptor#Teacher of Record\",\n",
							"                \"EndDate\": session['EndDate'],\n",
							"                \"_etag\": self.faker.uuid4().replace('-','')\n",
							"            })\n",
							"        return staff_section_associations\n",
							"\n",
							"\n",
							"    def create_staff_school_associations(self, school):\n",
							"        staff_school_associations = []\n",
							"        for staff in school['_Staffs']:\n",
							"            staff_school_associations.append({\n",
							"                \"Id\": self.faker.uuid4().replace('-',''),\n",
							"                \"SchoolReference\": {\n",
							"                    \"SchoolId\": school['SchoolId'],\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"School\",\n",
							"                        \"href\": \"/ed-fi/schools/{}\".format(school['Id'])\n",
							"                    }\n",
							"                },\n",
							"                \"StaffReference\": {\n",
							"                    \"StaffUniqueId\": staff['StaffUniqueId'],\n",
							"                    \"Link\": {\n",
							"                        \"rel\": \"Staff\",\n",
							"                        \"href\": \"/ed-fi/staffs/{}\".format(staff['Id'])\n",
							"                    }\n",
							"                },\n",
							"                \"ProgramAssignmentDescriptor\": self.get_descriptor_string('ProgramAssignmentDescriptor','Regular Education'),\n",
							"                \"AcademicSubjects\": [\n",
							"                    {\n",
							"                        \"AcademicSubjectDescriptor\": self.get_descriptor_string('AcademicSubjectDescriptor',random.choice(SUBJECT_NAMES)[0])\n",
							"                    }\n",
							"                ],\n",
							"                \"GradeLevels\": [\n",
							"                    {'GradeLevelDescriptor': self.get_descriptor_string('GradeLevelDescriptor',random.choice(GRADE_LEVEL))} for _ in range(4)\n",
							"            ],\n",
							"                \"_etag\": self.faker.random_number(digits=10)\n",
							"            })\n",
							"        return staff_school_associations\n",
							"\n",
							"    def format_edfi_data(self,data):\n",
							"        result = {\n",
							"            'Schools':[],\n",
							"            'Students':[],\n",
							"            'Calendars':[],\n",
							"            'Courses':[],\n",
							"            'StudentSchoolAssociations':[],\n",
							"            'Staffs':[],\n",
							"            'Sections': [],\n",
							"            'StaffSchoolAssociations':[],\n",
							"            'Sessions':[],\n",
							"            'StudentSectionAssociations':[],\n",
							"            'StaffSectionAssociations':[]\n",
							"\n",
							"        }\n",
							"        for school in data:\n",
							"            result['Schools'].append({key: school[key] for key in school if not (key.startswith('_')) })\n",
							"            result['Students'] += school['_Students']\n",
							"            result['Courses'] += school['_Courses']\n",
							"            result['StudentSchoolAssociations'] += school['_StudentAssociations']\n",
							"            result['Calendars'].append(school['_Calendars'])\n",
							"            result['Staffs'] += school['_Staffs']\n",
							"            result['Sections'] += school['_Sections']\n",
							"            result['StaffSchoolAssociations'] += school['_StaffSchoolAssociations']\n",
							"            result['Sessions'] += school['_Sessions']\n",
							"            result['StudentSectionAssociations'] += school['_StudentSectionAssociations']\n",
							"            result['StaffSectionAssociations'] += school['_StaffSectionAssociations']\n",
							"\n",
							"\n",
							"        return result\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/M365DataGenerator')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "fb35de1d-5e56-456e-9099-48435cccadb5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import csv\r\n",
							"import os\r\n",
							"import shutil\r\n",
							"import random\r\n",
							"import math\r\n",
							"import pandas as pd\r\n",
							"from datetime import datetime\r\n",
							"from faker import Faker\r\n",
							"\r\n",
							"SUBJECTS = ['Math - Algebra', 'Math - Geometry', 'English Language', 'History - World History',\r\n",
							"            'Science Biology', 'Health', 'Technology - Programming', 'Physical Education', 'Art', 'Music']\r\n",
							"SCHOOL_TYPES = ['High', 'High', 'High']\r\n",
							"\r\n",
							"\r\n",
							"class M365DataGenerator:\r\n",
							"    def __init__(self, activity_min_per_person=5, activity_max_per_person=20, students_per_school=100, classes_in_student_schedule=6, students_per_section=25, student_teacher_ratio=9, include_optional_fields=True,\r\n",
							"                 fall_semester_start_date='2021-08-15', fall_semester_end_date='2021-12-15', spring_semester_start_date='2022-01-10', spring_semester_end_date='2022-05-10'):\r\n",
							"        # Set a seed value in Faker so it generates the same values every time it's run\r\n",
							"        self.faker = Faker('en_US')\r\n",
							"        Faker.seed(1)\r\n",
							"\r\n",
							"        self.activity_min_per_person = activity_min_per_person\r\n",
							"        self.activity_max_per_person = activity_max_per_person\r\n",
							"        self.students_per_school = students_per_school\r\n",
							"        self.classes_in_student_schedule = classes_in_student_schedule\r\n",
							"        self.students_per_section = students_per_section\r\n",
							"        self.student_teacher_ratio = student_teacher_ratio\r\n",
							"        self.include_optional = include_optional_fields\r\n",
							"        self.fall_semester_start_date = fall_semester_start_date\r\n",
							"        self.fall_semester_end_date = fall_semester_end_date\r\n",
							"        self.spring_semester_start_date = spring_semester_start_date\r\n",
							"        self.spring_semester_end_date = spring_semester_end_date\r\n",
							"        self.school_year = '2021'\r\n",
							"\r\n",
							"        self.teachers_per_school = math.ceil(self.students_per_school/self.student_teacher_ratio)\r\n",
							"        self.section_id = 1\r\n",
							"        self.student_id = 1\r\n",
							"        self.teacher_id = 1\r\n",
							"        self.course_id = 1\r\n",
							"        self.school_id = 1\r\n",
							"        self.term_id = 1\r\n",
							"        self.domain = '@Classrmtest86.org'\r\n",
							"\r\n",
							"    def generate_data(self, num_of_schools, writer):\r\n",
							"        schools = ''\r\n",
							"        datetime_str = datetime.now().strftime('%Y-%m-%dT%H%M_%S')\r\n",
							"\r\n",
							"        for n in range(num_of_schools):\r\n",
							"            school_data = self.create_school(n)\r\n",
							"            m365_data = self.format_m365_data(school_data)\r\n",
							"            schools += m365_data.pop('Org')\r\n",
							"            for key in m365_data.keys(): \r\n",
							"                writer.write(f'm365/{datetime_str}/{key}/part1.csv', m365_data[key])\r\n",
							"\r\n",
							"            writer.write(f'studentattendance/{datetime_str}/part1.csv', school_data.pop('_attendance'))\r\n",
							"            writer.write(f'studentsectionmark/{datetime_str}/part1.csv', school_data.pop('_section_marks'))\r\n",
							"            writer.write(f'studentdemographics/{datetime_str}/part1.csv', self.list_of_dict_to_csv(school_data['_students']))\r\n",
							"\r\n",
							"            start_date = datetime.strptime(self.fall_semester_start_date, \"%Y-%m-%d\")\r\n",
							"            end_date = datetime.strptime(self.spring_semester_end_date, \"%Y-%m-%d\")\r\n",
							"            if end_date > datetime.now(): end_date = datetime.now()\r\n",
							"\r\n",
							"            self.create_and_write_activity_data(school_data['_students'], start_date, end_date, f'm365/{datetime_str}/Activity/part1.csv', writer)\r\n",
							"            self.create_and_write_activity_data(school_data['_teachers'], start_date, end_date, f'm365/{datetime_str}/Activity/part2.csv', writer)\r\n",
							"\r\n",
							"        writer.write(f'm365/{datetime_str}/Org/part1.csv', schools)\r\n",
							"\r\n",
							"    def create_school(self, school_id):\r\n",
							"        school_id = 'sch' + str(school_id)\r\n",
							"        fname = self.faker.first_name()\r\n",
							"        lname = self.faker.last_name()\r\n",
							"        school = {\r\n",
							"            'SIS ID': school_id,\r\n",
							"            'Name': self.get_fake_school_name(),\r\n",
							"            'School Number': school_id if self.include_optional else '',\r\n",
							"            'School NCES_ID': school_id if self.include_optional else '',\r\n",
							"            'Grade Low': '9' if self.include_optional else '',\r\n",
							"            'Grade High': '12' if self.include_optional else '',\r\n",
							"            'State ID': school_id if self.include_optional else '',\r\n",
							"            'Principal SIS ID': '02100' if self.include_optional else '',\r\n",
							"            'Principal Name': f\"{fname} {lname}\" if self.include_optional else '',\r\n",
							"            'Principal Secondary Email': f\"{fname.lower()}.{lname.lower()}{self.domain}\" if self.include_optional else '',\r\n",
							"            'Address': self.faker.building_number() if self.include_optional else '',\r\n",
							"            'City': self.faker.city() if self.include_optional else '',\r\n",
							"            'State': 'WA' if self.include_optional else '',\r\n",
							"            'Zip': '98074' if self.include_optional else '',\r\n",
							"            'Country': 'US' if self.include_optional else '',\r\n",
							"            'Phone': self.faker.phone_number() if self.include_optional else '',\r\n",
							"            'Zone': '1' if self.include_optional else '',\r\n",
							"        }\r\n",
							"\r\n",
							"        school['_calendar'] = {'Id': f'edp_cal{school_id}',\r\n",
							"                            'Name': f'{self.school_year} Calendar',\r\n",
							"                            'Description': f'calendar for {self.school_year}',\r\n",
							"                            'SchoolYear': self.school_year,\r\n",
							"                            'IsCurrent': 'True',\r\n",
							"                            'ExternalId': f'cal{school_id}',\r\n",
							"                            'CreateDate': '8/13/2020 10:36:44 AM',\r\n",
							"                            'LastModifiedDate': '8/15/2020 11:36:00 PM',\r\n",
							"                            'IsActive': 'True',\r\n",
							"                            'OrgId': f'edp_{school_id}'\r\n",
							"                            }\r\n",
							"        school['_students'] = self.create_students(school['SIS ID'])\r\n",
							"        school['_teachers'] = self.create_teachers(school['SIS ID'])\r\n",
							"        school['_courses'] = self.create_courses(school['_calendar']['Id'])\r\n",
							"        school['_terms'] = self.create_terms(school['_calendar']['Id'])\r\n",
							"        for term in school['_terms']:\r\n",
							"            self.create_sections(term, school['SIS ID'], school['_courses'])\r\n",
							"\r\n",
							"        self.add_student_data(school) # adds student_section_membership, attendance, section_marks\r\n",
							"        self.add_teacher_data(school) # staff_section_membership\r\n",
							"\r\n",
							"        return school\r\n",
							"\r\n",
							"    def format_m365_data(self, school):\r\n",
							"        ref_aad_id = '7DAF8820-6691-4D61-A210-CE94EA7D3667'\r\n",
							"        ref_upn_id = '450E6525-61A6-4BF6-A3D5-F95EB5CB1183'\r\n",
							"        parent_org_id = 'sch0'\r\n",
							"        ref_org_type_district = '1198ADF7-3DA7-4DA6-A8CB-6FC3313C063C'\r\n",
							"        ref_org_type_school = '0AA7E195-1576-440B-817C-BCCA6949E2ED'\r\n",
							"        ref_student_org_role = '0D16FCED-6DC7-4235-90BF-724D40ABC7BD'\r\n",
							"        ref_staff_org_role = '03FFC8C5-9C64-4321-8041-334F07A252F0'\r\n",
							"        ref_enrollment_status = 'F36F047A-F410-4761-B41F-17B952A8EAD4'\r\n",
							"        ref_section_type = '96669810-AB33-4B0F-92BE-6E2CC6F30EE9'\r\n",
							"        ref_session_type = '1C69DBD1-5CDA-44B2-AEAA-510F9D5DA98D'\r\n",
							"        source_system_id = 'edp_SIS1'\r\n",
							"        datetime_str = \"8/13/2020 10:09:43 AM\"        \r\n",
							"\r\n",
							"        m365_data = {}\r\n",
							"        m365_data['RefDefinition'] = REF_DEFINITION_CSV\r\n",
							"        m365_data['Calendar'] = self.obj_to_csv(school['_calendar']) + \"\\n\"\r\n",
							"        m365_data['Org'] = f\"edp_{school['SIS ID']},{school['Name']},{school['School Number']},{school['SIS ID']},{datetime_str},{datetime_str},True,edp_{parent_org_id},{ref_org_type_school},{source_system_id}\\n\"\r\n",
							"        m365_data['StudentSectionMembership'] = school['_student_section_membership']\r\n",
							"        m365_data['StaffSectionMembership'] = school['_staff_section_membership']\r\n",
							"\r\n",
							"        m365_data['Person'] = ''\r\n",
							"        m365_data['StudentOrgAffiliation'] = ''\r\n",
							"        m365_data['StaffOrgAffiliation'] = ''\r\n",
							"        m365_data['PersonIdentifier'] = ''\r\n",
							"        m365_data['Section'] = ''\r\n",
							"        m365_data['Session'] = ''\r\n",
							"        m365_data['Course'] = ''\r\n",
							"\r\n",
							"        for student in school['_students']:\r\n",
							"            m365_data['StudentOrgAffiliation'] += f\"edp_oa_{student['SIS ID']},True,,,oa_{student['SIS ID']},{datetime_str},{datetime_str},True,edp_{school['SIS ID']},edp_{student['SIS ID']},{self.get_grade_ref(student['Grade'])},{ref_student_org_role},{ref_enrollment_status}\\n\"\r\n",
							"            m365_data['Person'] += f\"edp_{student['SIS ID']},{student['First Name']},{student['Middle Name']},{student['Last Name']},,,True,{student['SIS ID']},{datetime_str},{datetime_str},True,{source_system_id}\\n\"\r\n",
							"            m365_data['PersonIdentifier'] += f\"edp_pi1_{student['SIS ID']},{student['_upn']},,{ref_upn_id},pi1_{student['SIS ID']},{datetime_str},{datetime_str},True,edp_{student['SIS ID']},{source_system_id}\\n\"\r\n",
							"            m365_data['PersonIdentifier'] += f\"edp_pi2_{student['SIS ID']},{student['_aad']},,{ref_aad_id},pi2_{student['SIS ID']},{datetime_str},{datetime_str},True,edp_{student['SIS ID']},{source_system_id}\\n\"\r\n",
							"        for teacher in school['_teachers']:\r\n",
							"            m365_data['StaffOrgAffiliation'] += f\"edp_oa_{teacher['SIS ID']},True,,,oa_{teacher['SIS ID']},{datetime_str},{datetime_str},True,edp_{school['SIS ID']},edp_{teacher['SIS ID']},,{ref_staff_org_role}\\n\"\r\n",
							"            m365_data['Person'] += f\"edp_{teacher['SIS ID']},{teacher['First Name']},{teacher['Middle Name']},{teacher['Last Name']},,,True,{teacher['SIS ID']},{datetime_str},{datetime_str},True,{source_system_id}\\n\"\r\n",
							"            m365_data['PersonIdentifier'] += f\"edp_pi1_{teacher['SIS ID']},{teacher['_upn']},,{ref_upn_id},pi1_{teacher['SIS ID']},{datetime_str},{datetime_str},True,edp_{teacher['SIS ID']},{source_system_id}\\n\"\r\n",
							"            m365_data['PersonIdentifier'] += f\"edp_pi2_{teacher['SIS ID']},{teacher['_aad']},,{ref_aad_id},pi2_{teacher['SIS ID']},{datetime_str},{datetime_str},True,edp_{teacher['SIS ID']},{source_system_id}\\n\"\r\n",
							"        for term in school['_terms']:\r\n",
							"        # todo: need to convert the term startdate and enddate to be the format that is expected to be coming from EDP (rather than the format used for sds)\r\n",
							"            m365_data['Session'] += f\"edp_{term['Term SIS ID']},{term['Term Name']},{term['Term StartDate']},{term['Term EndDate']},{term['Term SIS ID']},8/13/2020 10:36:44 AM,8/15/2020 11:36:00 PM,True,{term['_calendar_id']},,{ref_session_type}\\n\"\r\n",
							"        for section in term['_sections']:\r\n",
							"            m365_data['Section'] += f\"edp_{section['SIS ID']},{section['Section Name']},{section['Section Number']},,{section['SIS ID']},{datetime_str},{datetime_str},True,edp_{section['Course SIS ID']},{ref_section_type},edp_{section['Term SIS ID']},edp_{section['School SIS ID']}\\n\"\r\n",
							"        for course in school['_courses']:\r\n",
							"        # columns for DIP csv are: Id,Name,Code,Description,ExternalId,CreateDate,LastModifiedDate,IsActive,CalendarId\r\n",
							"            m365_data['Course'] += f\"edp_{course['Course SIS ID']},{course['Course Name']},{course['Course Number']},{course['Course Description']},{course['Course SIS ID']},8/13/2020 10:36:44 AM,8/15/2020 11:36:00 PM,True,{course['_calendar_id']}\\n\"\r\n",
							"\r\n",
							"        return m365_data\r\n",
							"\r\n",
							"    def create_terms(self, calendar_id):\r\n",
							"        terms = []\r\n",
							"        terms.append({\r\n",
							"            'Term SIS ID': 'term' + str(self.term_id),\r\n",
							"            'Term Name': 'Fall Semester',\r\n",
							"            'Term StartDate': '9/1/2019',\r\n",
							"            'Term EndDate': '12/22/2019',\r\n",
							"            '_sections': [],\r\n",
							"            # this is an array of arrays representing the sections and the spots (available seats) within each section\r\n",
							"            '_section_spots': [],\r\n",
							"            '_calendar_id': calendar_id\r\n",
							"        })\r\n",
							"        self.term_id += 1\r\n",
							"        terms.append({\r\n",
							"            'Term SIS ID': 'term' + str(self.term_id),\r\n",
							"            'Term Name': 'Spring Semester',\r\n",
							"            'Term StartDate': '1/21/2020',\r\n",
							"            'Term EndDate': '5/30/2020',\r\n",
							"            '_sections': [],\r\n",
							"            '_section_spots': [],\r\n",
							"            '_calendar_id': calendar_id\r\n",
							"        })\r\n",
							"        self.term_id += 1\r\n",
							"        return terms\r\n",
							"\r\n",
							"    def create_courses(self, calendar_id):\r\n",
							"        courses = []\r\n",
							"        for subject in SUBJECTS:\r\n",
							"            courses.append({\r\n",
							"                'Course SIS ID': 'course' + str(self.course_id),\r\n",
							"                'Course Name': subject,\r\n",
							"                'Course Number': str(self.course_id),\r\n",
							"                'Course Description': \"Instruction covering \" + subject,\r\n",
							"                'Course Subject': subject,\r\n",
							"                '_calendar_id': calendar_id\r\n",
							"            })\r\n",
							"            self.course_id += 1\r\n",
							"        return courses\r\n",
							"\r\n",
							"    def create_students(self, school_id):\r\n",
							"        students = []\r\n",
							"        for n in range(self.students_per_school):\r\n",
							"            gender = random.choice(['Male', 'Female'])\r\n",
							"            if gender == 'Male': fname = self.faker.first_name_male()\r\n",
							"            else: fname = self.faker.first_name_female()\r\n",
							"\r\n",
							"            fname = self.faker.first_name()\r\n",
							"            lname = self.faker.last_name()\r\n",
							"            email = f\"{fname.lower()}{lname.lower()}{self.student_id}{self.domain}\"\r\n",
							"            students.append({\r\n",
							"                'SIS ID': 'st' + str(self.student_id),\r\n",
							"                'School SIS ID': school_id,\r\n",
							"                'Username': f\"{fname.lower()}{lname.lower()}{self.student_id}\",\r\n",
							"                'Password': self.faker.password() if self.include_optional else '',\r\n",
							"                'First Name': fname,\r\n",
							"                'Last Name': lname,\r\n",
							"                'Middle Name': self.faker.first_name() if self.include_optional else '',\r\n",
							"                'Secondary Email': email if self.include_optional else '',\r\n",
							"                'Student Number': str(self.student_id) if self.include_optional else '',\r\n",
							"                'Grade': random.choice(['9', '10', '11', '12']) if self.include_optional else '',\r\n",
							"                'State ID': '123' if self.include_optional else '',\r\n",
							"                'Status': 'Active' if self.include_optional else '',\r\n",
							"                'Birthdate': '4/2/2004' if self.include_optional else '',\r\n",
							"                'Graduation Year': '2020' if self.include_optional else '',\r\n",
							"                'Gender': gender,\r\n",
							"                'FederalRaceCategory': random.choice(['Asian', 'Black', 'White', 'Hispanic', 'American Indian']),\r\n",
							"                'PrimaryLanguage': random.choices(['English', 'Spanish', 'German', 'French', 'Japanese'], weights=(85, 10, 2, 2, 1))[0],\r\n",
							"                'ELLStatus': random.choices(['', 'English Learner', 'Initially Fluent English Proficient', 'Redesignated Fluent English Proficient'], weights=(80, 10, 5, 5))[0],\r\n",
							"                'SpecialEducation': random.choices(['', 'Designated Instruction Service', 'Resource Specialty Program', 'Special Day Class'], weights=(80, 10, 5, 5))[0],\r\n",
							"                'LowIncome': random.choices([0, 1], weights=(60, 40))[0],\r\n",
							"                'CumulativeGPA': random.choice([0.523, 0.423, 1.13, 2.63, 2.33, 3.33, 4.0]),                \r\n",
							"                '_role': 'Student',\r\n",
							"                '_section_ids': [],\r\n",
							"                '_upn': email,\r\n",
							"                '_aad': self.faker.uuid4()\r\n",
							"            })\r\n",
							"            self.student_id += 1\r\n",
							"        return students\r\n",
							"\r\n",
							"    def create_teachers(self, school_id):\r\n",
							"        teachers = []\r\n",
							"        for n in range(self.teachers_per_school):\r\n",
							"            fname = self.faker.first_name()\r\n",
							"            lname = self.faker.last_name()\r\n",
							"            email = f\"{fname.lower()}{lname.lower()}{self.teacher_id}{self.domain}\"\r\n",
							"            teachers.append({\r\n",
							"                'SIS ID': 't' + str(self.teacher_id),\r\n",
							"                'School SIS ID': school_id,\r\n",
							"                'Username': f\"{fname.lower()}{lname.lower()}{self.teacher_id}\",\r\n",
							"                'Password': self.faker.password() if self.include_optional else '',\r\n",
							"                'First Name': fname,\r\n",
							"                'Last Name': lname,\r\n",
							"                'Middle Name': self.faker.first_name() if self.include_optional else '',\r\n",
							"                'Secondary Email': email if self.include_optional else '',\r\n",
							"                'Teacher Number': str(self.teacher_id) if self.include_optional else '',\r\n",
							"                'State ID': '123' if self.include_optional else '',\r\n",
							"                'Status': 'Active' if self.include_optional else '',\r\n",
							"                'Title': 'Teacher' if self.include_optional else '',\r\n",
							"                'Qualification': 'EdLD' if self.include_optional else '',\r\n",
							"                '_role': 'Teacher',\r\n",
							"                '_section_ids': [],\r\n",
							"                '_upn': email,\r\n",
							"                '_aad': self.faker.uuid4()\r\n",
							"            })\r\n",
							"            self.teacher_id += 1\r\n",
							"        return teachers\r\n",
							"\r\n",
							"    def create_sections(self, term, school_id, courses):\r\n",
							"        spots_needed = self.students_per_school * self.classes_in_student_schedule\r\n",
							"        # determine the number of sections needed\r\n",
							"        sections_needed = math.ceil(spots_needed / self.students_per_section) + 1\r\n",
							"        for n in range(sections_needed):\r\n",
							"            course = random.choice(courses)\r\n",
							"            term['_sections'].append({\r\n",
							"                'SIS ID': 'sec' + str(self.section_id),\r\n",
							"                'School SIS ID': school_id,\r\n",
							"                'Section Name': course['Course Subject'] + \" \" + str(self.section_id),\r\n",
							"                'Section Number': str(self.section_id) if self.include_optional else '',\r\n",
							"                'Term SIS ID': term['Term SIS ID'] if self.include_optional else '',\r\n",
							"                'Term Name': term['Term Name'] if self.include_optional else '',\r\n",
							"                'Term StartDate': term['Term StartDate'] if self.include_optional else '',\r\n",
							"                'Term EndDate': term['Term EndDate'] if self.include_optional else '',\r\n",
							"                'Course SIS ID': course['Course SIS ID'] if self.include_optional else '',\r\n",
							"                'Course Name': course['Course Name'] if self.include_optional else '',\r\n",
							"                'Course Number': course['Course Number'] if self.include_optional else '',\r\n",
							"                'Course Description': course['Course Description'] if self.include_optional else '',\r\n",
							"                'Course Subject': course['Course Subject'] if self.include_optional else '',\r\n",
							"                'Periods': '2' if self.include_optional else '',\r\n",
							"                'Status': 'Active' if self.include_optional else ''\r\n",
							"            })\r\n",
							"            # add section spots\r\n",
							"            spots = []\r\n",
							"            for i in range(self.students_per_section):\r\n",
							"                spots.append('sec' + str(self.section_id))\r\n",
							"            term['_section_spots'].append(spots)\r\n",
							"            self.section_id += 1\r\n",
							"\r\n",
							"    def get_grade_ref(self, grade_str):\r\n",
							"        if grade_str == '9': return '4429F333-536A-458F-AE87-FDF5471B5E8D'\r\n",
							"        elif grade_str == '10': return 'B6747F48-667B-4F0D-8438-9D1B180A3791'\r\n",
							"        elif grade_str == '11': return '490702EA-9AC0-435E-AB8F-C1999BB0B393'\r\n",
							"        else: return '37DB651A-E2CC-4C16-8F52-27D4FA17B680'\r\n",
							"\r\n",
							"    def add_student_data(self, school):\r\n",
							"        ref_student_section_role = 'D1CA502E-DB62-41D2-B438-AC669E6A9663'\r\n",
							"        datetime_str = \"8/13/2020 10:09:43 AM\"\r\n",
							"        mark_id = 1\r\n",
							"        school['_student_section_membership'] = ''\r\n",
							"        school['_attendance'] = 'id,student_id,school_year,school_id,attendance_date,all_day,Period,section_id,AttendanceCode,PresenceFlag,attendance_status,attendance_type,attendance_sequence\\n'\r\n",
							"        school['_section_marks'] = 'id,student_id,section_id,school_year,term_id,numeric_grade_earned,alpha_grade_earned,is_final_grade,credits_attempted,credits_earned,grad_credit_type\\n'\r\n",
							"\r\n",
							"        for student in school['_students']:\r\n",
							"            for term in school['_terms']:\r\n",
							"                num_enrollments = 0\r\n",
							"                for section_spots in term['_section_spots']:\r\n",
							"                    if(len(section_spots) == 0): \r\n",
							"                        continue\r\n",
							"                    else:\r\n",
							"                        spot_taken = section_spots.pop()\r\n",
							"                        student['_section_ids'].append(spot_taken)\r\n",
							"                        school['_student_section_membership'] += f\"edp_ssm_{student['SIS ID']},,,ssm_{student['SIS ID']},{datetime_str},{datetime_str},True,edp_{student['SIS ID']},,{ref_student_section_role},edp_{spot_taken}\\n\"\r\n",
							"                        num_enrollments += 1\r\n",
							"                        school['_attendance'] += self.create_section_attendance(school['SIS ID'], student['SIS ID'], self.school_year, spot_taken,term['Term StartDate'], term['Term EndDate'])\r\n",
							"                        grade = self.get_random_grade()\r\n",
							"                        credits_earned = 5\r\n",
							"                        if grade[1] == 'F': credits_earned = 0\r\n",
							"                        school['_section_marks'] += f\"m{mark_id},{student['SIS ID']},{spot_taken},,{term['Term SIS ID']},{grade[0]},{grade[1]},No,5,{credits_earned},\\n\"\r\n",
							"                        mark_id += 1\r\n",
							"                    if (num_enrollments >= self.classes_in_student_schedule): break        \r\n",
							"\r\n",
							"    def create_section_attendance(self, school_id, student_id, school_year, section_id, start_date, end_date):\r\n",
							"        attendance = ''\r\n",
							"        date_range = pd.date_range(datetime.strptime(start_date, \"%m/%d/%Y\"), datetime.strptime(end_date, \"%m/%d/%Y\"))\r\n",
							"        for single_date in date_range:\r\n",
							"            attendance_code = random.choices(['P', 'A'], weights=(80,20))[0]\r\n",
							"            if attendance_code == 'P':\r\n",
							"                presence_flag = 1\r\n",
							"                attendance_status = 'Present'\r\n",
							"            else: \r\n",
							"                presence_flag = 0\r\n",
							"                attendance_status = 'Absent'\r\n",
							"            attendance += f\"att_{student_id},{student_id},{school_year},{school_id},{single_date.strftime('%d/%m/%Y')},No,1,{section_id},{attendance_code},{presence_flag},{attendance_status},ClassSectionAttendance,0\\n\"\r\n",
							"        return attendance\r\n",
							"\r\n",
							"\r\n",
							"    def add_teacher_data(self, school):\r\n",
							"        ref_staff_section_role = 'C943E793-2DB7-47C0-B187-A9ED65EEBD5B'\r\n",
							"        datetime_str = \"8/13/2020 10:09:43 AM\"\r\n",
							"        school['_staff_section_membership'] = ''\r\n",
							"        for term in school['_terms']:\r\n",
							"            teacher_index = 0\r\n",
							"            for section in term['_sections']:\r\n",
							"                teacher = school['_teachers'][teacher_index]\r\n",
							"                teacher['_section_ids'].append(section['SIS ID'])\r\n",
							"                school['_staff_section_membership'] += f\"edp_ssm_{teacher['SIS ID']},True,,,ssm_{teacher['SIS ID']},{datetime_str},{datetime_str},True,edp_{teacher['SIS ID']},{ref_staff_section_role},edp_{section['SIS ID']}\\n\"\r\n",
							"                teacher_index += 1\r\n",
							"                if (teacher_index == len(school['_teachers'])):\r\n",
							"                    teacher_index = 0  # start over from the beginning of the list of teachers\r\n",
							"\r\n",
							"    def create_and_write_activity_data(self, people, start_date, end_date, path_and_filename, writer):\r\n",
							"        signal_id_counter = 100\r\n",
							"        signal_types = ['VisitTeamChannel', 'ReactedWithEmoji', 'PostChannelMessage', 'ReplyChannelMessage', 'ExpandChannelMessage', 'CallRecordSummarized', 'FileAccessed', 'FileDownloaded',\r\n",
							"                        'FileModified', 'FileUploaded', 'ShareNotificationRequested', 'CommentCreated', 'UserAtMentioned', 'AddedToSharedWithMe', 'CommentDeleted', 'Unlike']\r\n",
							"        agents = ['', '\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\"', '\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Teams/1.3.00.34662 Chrome/80.0.3987.165 Electron/8.5.1 Safari/537.36\"',\r\n",
							"                '\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36\"', '\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0\"']\r\n",
							"        applications = ['Other apps', 'Teams', 'PowerPoint', 'Excel', 'PDF viewers', 'Media apps', 'Image apps', 'Word']\r\n",
							"        learning_activities = ['Communications', 'Assignments', 'Meetings']\r\n",
							"\r\n",
							"        # activity_csv.write('SignalType,StartTime,UserAgent,SignalId,SISClassId,OfficeClassId,ChannelId,AppName,ActorId,ActorRole,SchemaVersion,AssignmentId,SubmissionId,Action,AssginmentDueDate,ClassCreationDate,Grade,SourceFileExtension,MeetingDuration')\r\n",
							"        num_of_entries_for_person = self.faker.pyint(min_value=self.activity_min_per_person, max_value=self.activity_max_per_person)\r\n",
							"        for i in range(num_of_entries_for_person):\r\n",
							"            for person in people:\r\n",
							"                signal_type = random.choice(signal_types)\r\n",
							"                start_time = f\"{self.faker.date_time_between_dates(start_date, end_date)}.0000000\"\r\n",
							"                agent = random.choice(agents)\r\n",
							"                signal_id = self.faker.uuid4()\r\n",
							"                sis_class_id = random.choice(person['_section_ids'])\r\n",
							"                office_class_id = f\"office_id_{sis_class_id}\"\r\n",
							"                if signal_type == 'CallRecordSummarized':\r\n",
							"                    channel_id = f\"channel_{office_class_id}\"\r\n",
							"                else:\r\n",
							"                    channel_id = ''\r\n",
							"                app_name = random.choice(applications)\r\n",
							"                actor_id = person['_aad']\r\n",
							"                actor_role = person['_role']\r\n",
							"                schema_version = '1.06'\r\n",
							"                assignmentId = ''\r\n",
							"                submissionId = ''\r\n",
							"                action = ''\r\n",
							"                assginment_due_date = ''\r\n",
							"                class_creation_date = ''\r\n",
							"                grade = ''\r\n",
							"                source_file_extension = ''\r\n",
							"\r\n",
							"                hours = self.faker.pyint(min_value=0, max_value=23)\r\n",
							"                minutes = self.faker.pyint(min_value=0, max_value=59)\r\n",
							"                meeting_duration = f'00:{hours:02}:{minutes:02}'\r\n",
							"\r\n",
							"                # SignalType,StartTime,UserAgent,SignalId,SISClassId,OfficeClassId,ChannelId,AppName,ActorId,ActorRole,SchemaVersion,AssignmentId,SubmissionId,Action,AssginmentDueDate,ClassCreationDate,Grade,SourceFileExtension,MeetingDuration\r\n",
							"                writer.write(path_and_filename, f\"{signal_type},{start_time},{agent},{signal_id},{sis_class_id},{office_class_id},{channel_id},{app_name},{actor_id},{actor_role},{schema_version},{assignmentId},{submissionId},{action},{assginment_due_date},{class_creation_date},{grade},{source_file_extension},{meeting_duration}\\n\")\r\n",
							"\r\n",
							"    def get_fake_school_name(self):\r\n",
							"        name = self.faker.last_name()\r\n",
							"        if name == 'Ho': return self.get_fake_school_name()\r\n",
							"        else: return f\"{name} {random.choice(SCHOOL_TYPES)}\"\r\n",
							"\r\n",
							"    def get_random_grade(self):\r\n",
							"        num = random.randint(55, 110)\r\n",
							"        grade = ''\r\n",
							"        if num < 60: grade = 'F'\r\n",
							"        elif num >= 60 and num < 70: grade = 'D'\r\n",
							"        elif num >= 70 and num < 80: grade = 'C'\r\n",
							"        elif num >= 80 and num < 90: grade = 'B'\r\n",
							"        elif num >= 90: grade = 'A'\r\n",
							"        return [str(num), grade]\r\n",
							"\r\n",
							"    def list_of_dict_to_csv(self, list_of_dict):\r\n",
							"        csv_str = ''\r\n",
							"        header = []\r\n",
							"        for column_name in list_of_dict[0].keys(): \r\n",
							"            if not column_name.startswith('_'): header.append(column_name)\r\n",
							"        csv_str += \",\".join(header) + \"\\n\"\r\n",
							"\r\n",
							"        for row in list_of_dict:\r\n",
							"            csv_str += self.obj_to_csv(row) + \"\\n\"\r\n",
							"\r\n",
							"        return csv_str[:-1] # chop the final newline char\r\n",
							"\r\n",
							"    def obj_to_csv(self, obj):\r\n",
							"        csv = ''\r\n",
							"        for key in obj:\r\n",
							"            if not (key.startswith('_')): csv += str(obj[key]) + ','\r\n",
							"        return csv[:-1]        \r\n",
							"\r\n",
							"REF_DEFINITION_CSV=\"\"\"\r\n",
							"    F27548AC-5978-4DC7-8897-1F51FBBD269F,RefPhoneNumberType,ceds.ed.gov,Home,10,Home,True\r\n",
							"    1C20AA37-0D47-428A-9886-275D9314683B,RefPhoneNumberType,ceds.ed.gov,Work,20,Work,True\r\n",
							"    27127BF9-D27F-4550-8DB5-F5C45B9F300A,RefPhoneNumberType,ceds.ed.gov,Mobile,30,Mobile,True\r\n",
							"    2058208C-D839-4050-811E-5C967ED3479A,RefPhoneNumberType,ceds.ed.gov,Fax,40,Fax,True\r\n",
							"    F72DB3A7-60D1-4205-BCCE-261A5C70392A,RefPhoneNumberType,ceds.ed.gov,SMS,50,SMS (text),True\r\n",
							"    BAB42A97-EF46-4D19-BD7C-A16042D69290,RefPhoneNumberType,ceds.ed.gov,Other,60,Other,True\r\n",
							"    296C8859-65B6-41AF-9AC3-A756F805AA7A,RefEmailAddressType,ceds.ed.gov,Home,10,Home/personal,True\r\n",
							"    2BD5CAF9-B2E2-4BB9-9634-D7F9D9C99942,RefEmailAddressType,ceds.ed.gov,Work,20,Work,True\r\n",
							"    B62C5FF6-9C7C-4282-99DA-D989E975FED9,RefEmailAddressType,ceds.ed.gov,Organizational,30,Organizational,True\r\n",
							"    BE4EDAD4-273B-4AC0-B0A9-4AEAAA4D72FC,RefEmailAddressType,ceds.ed.gov,Other,40,Other,True\r\n",
							"    C7BA7784-18EA-48F7-A8CE-8F85317DB1FC,RefSessionType,imsglobal.org,gradingPeriod,10,Grading Period,True\r\n",
							"    1C69DBD1-5CDA-44B2-AEAA-510F9D5DA98D,RefSessionType,imsglobal.org,semester,20,Semester,True\r\n",
							"    535E0286-C64B-4E96-8866-8F05F7FD4B7D,RefSessionType,imsglobal.org,schoolYear,30,School Year,True\r\n",
							"    D3244521-1657-44CC-878D-A731819A8C10,RefSessionType,imsglobal.org,term,40,Term,True\r\n",
							"    9FC6B036-76CB-49C1-9B54-52B6DEA89B13,RefSessionType,imsglobal.org,quarter,50,Quarter,True\r\n",
							"    9CFF5B20-9F10-40CD-BE70-337E1D45EC22,RefOrgType,imsglobal.org,department,10,Department,True\r\n",
							"    0AA7E195-1576-440B-817C-BCCA6949E2ED,RefOrgType,imsglobal.org,school,20,School,True\r\n",
							"    1198ADF7-3DA7-4DA6-A8CB-6FC3313C063C,RefOrgType,imsglobal.org,district,30,District,True\r\n",
							"    DD0FD78C-8E83-4561-BCA9-D622C17239B1,RefOrgType,imsglobal.org,local,40,Local,True\r\n",
							"    92FBF859-EAF5-44DB-A009-F078DC5D9624,RefOrgType,imsglobal.org,state,50,State,True\r\n",
							"    CB89C3EF-00C6-4887-86F6-025E85EE0CD5,RefOrgType,imsglobal.org,national,60,National,True\r\n",
							"    0D70E313-D121-4BEB-873E-32AB1BE585BB,RefOrgType,microsoft.com,departmentOfEducation,70,Department of Education,True\r\n",
							"    A876151F-8E7B-4E0D-AD5E-1644489C06E2,RefOrgType,microsoft.com,ministryOfEducation,80,Ministry of Education,True\r\n",
							"    4EF75D0A-C056-4708-BBA8-93974487E3FB,RefOrgType,microsoft.com,university,90,University,True\r\n",
							"    A330F267-036A-49FD-9E41-BD04E33F72B4,RefOrgType,microsoft.com,college,100,College,True\r\n",
							"    9E5B404E-F884-4213-BB5A-C13896B3C64F,RefOrgType,microsoft.com,campus,110,Campus,True\r\n",
							"    E4DC78EC-B83E-490E-B2AC-A4002F2A1011,RefOrgType,microsoft.com,adultEducation,120,Adult Education,True\r\n",
							"    3F7E3E4A-17D8-4528-8023-4C51E1135DAF,RefAcademicSubject,ceds.ed.gov,13371,10,Arts,False\r\n",
							"    A8B9FD82-A3FE-4B58-B965-6D2485CAF4FF,RefAcademicSubject,ceds.ed.gov,73065,20,Career and Technical Education,False\r\n",
							"    75C20E7F-4064-4E66-93D1-AD60D8AF03E3,RefAcademicSubject,ceds.ed.gov,13372,30,English,False\r\n",
							"    B28AA87C-9357-40F3-8F3F-468D76100470,RefAcademicSubject,ceds.ed.gov,256,40,English as a second language (ESL),False\r\n",
							"    11F6E7A0-188D-4F29-9A85-D6C64DEBF51A,RefAcademicSubject,ceds.ed.gov,546,50,Foreign Languages,False\r\n",
							"    785C7805-478C-437E-9D0F-A42085F19CA6,RefAcademicSubject,ceds.ed.gov,73088,60,History Government - US,False\r\n",
							"    67B144F0-B0B7-4B48-B948-A1C0C41C2316,RefAcademicSubject,ceds.ed.gov,73089,70,History Government - World,False\r\n",
							"    8C053948-3868-4172-8439-90F3C763C1FB,RefAcademicSubject,ceds.ed.gov,554,80,Language arts,False\r\n",
							"    406A9BDB-D00A-47B2-9B58-0D7C6BA4B5F3,RefAcademicSubject,ceds.ed.gov,1166,90,Mathematics,False\r\n",
							"    6542AAA2-4241-41FA-8003-FE0D55C8C9B5,RefAcademicSubject,ceds.ed.gov,560,100,Reading,False\r\n",
							"    EFE570C8-4863-41B1-8F7A-6FE6F17C3FF9,RefAcademicSubject,ceds.ed.gov,13373,110,Reading/Language Arts,False\r\n",
							"    C78DB896-4E57-4118-93B0-4FBC0CFB4892,RefAcademicSubject,ceds.ed.gov,562,120,Science,False\r\n",
							"    C105C6B3-3CF9-472F-B865-043979160403,RefAcademicSubject,ceds.ed.gov,73086,130,Science - Life,False\r\n",
							"    8270A5B4-961D-49BC-93FF-B11B9A355800,RefAcademicSubject,ceds.ed.gov,73087,140,Science - Physical,False\r\n",
							"    857C8075-F125-4316-9C7D-C6F06A59A3B4,RefAcademicSubject,ceds.ed.gov,13374,150,\"Social Sciences (History, Geography, Economics, Civics and Government)\",False\r\n",
							"    71C56B0D-AD9A-44A9-83BD-B1346BA735FD,RefAcademicSubject,ceds.ed.gov,2043,160,Special education,False\r\n",
							"    D998AFA4-15B2-454E-AD56-9BD67562DE09,RefAcademicSubject,ceds.ed.gov,1287,170,Writing,False\r\n",
							"    125AD8F4-CBC2-4780-8ECA-766F6BB3616F,RefAcademicSubject,ceds.ed.gov,9999,180,Other,False\r\n",
							"    AF074314-C807-431D-849E-5C56DCFD56FB,RefSex,ceds.ed.gov,Male,10,Male,True\r\n",
							"    7BA57431-93E6-4F3A-B74F-56C84749E9A7,RefSex,ceds.ed.gov,Female,20,Female,True\r\n",
							"    FEA3A014-218A-470A-AB59-12F3064DC397,RefSex,ceds.ed.gov,Not selected,30,Not selected,True\r\n",
							"    C855A445-E7CC-4093-B6E3-E4B887C6FD92,RefState,ceds.ed.gov,AK,10,Alaska,True\r\n",
							"    16B07D3F-571C-40E6-92AA-73178BEF1542,RefState,ceds.ed.gov,AL,20,Alabama,True\r\n",
							"    50F6DDCA-C75C-4AFE-A024-0D2A0BF9D6CC,RefState,ceds.ed.gov,AR,30,Arkansas,True\r\n",
							"    EA24B73C-B071-453B-9E8A-8BD6E1AE19B8,RefState,ceds.ed.gov,AS,40,American Samoa,True\r\n",
							"    F24214B4-5DED-44D0-B29B-321BE28BCB93,RefState,ceds.ed.gov,AZ,50,Arizona,True\r\n",
							"    FC8D5952-EF82-465A-9D0B-62A06C58C0EE,RefState,ceds.ed.gov,CA,60,California,True\r\n",
							"    4A08E734-6101-4C0D-A066-E65F9183ED8A,RefState,ceds.ed.gov,CO,70,Colorado,True\r\n",
							"    05950FFE-C9F6-4918-8362-E7B7A5202C3C,RefState,ceds.ed.gov,CT,80,Connecticut,True\r\n",
							"    526B4BFB-5A10-40F5-BF4B-9704567AEF4D,RefState,ceds.ed.gov,DC,90,District of Columbia,True\r\n",
							"    9D61F8B8-EF3D-40EF-81CE-B59F69632F53,RefState,ceds.ed.gov,DE,100,Delaware,True\r\n",
							"    4FCAF288-4928-4450-8793-9852C29C2315,RefState,ceds.ed.gov,FL,110,Florida,True\r\n",
							"    35B9C40A-617F-4633-AA76-A56D5147E89E,RefState,ceds.ed.gov,FM,120,Federated States of Micronesia,True\r\n",
							"    FF5BC2E2-1D44-4B7B-8467-7643A6ABA583,RefState,ceds.ed.gov,GA,130,Georgia,True\r\n",
							"    4A38E332-EA89-4625-86D8-016B0628CA9C,RefState,ceds.ed.gov,GU,140,Guam,True\r\n",
							"    51F07FB9-AE06-4F3C-A8F2-99BAA9F143C2,RefState,ceds.ed.gov,HI,150,Hawaii,True\r\n",
							"    744C35E4-8B9F-43F2-BB8A-DDFBF860E581,RefState,ceds.ed.gov,IA,160,Iowa,True\r\n",
							"    84ADEB70-7F0E-4EEC-AC69-61C3EB5186D6,RefState,ceds.ed.gov,ID,170,Idaho,True\r\n",
							"    2770B048-41B8-4ADC-AC7D-359BE9CA77D3,RefState,ceds.ed.gov,IL,180,Illinois,True\r\n",
							"    55D9B58E-7FAA-4D83-8DCC-5C2D9D905444,RefState,ceds.ed.gov,IN,190,Indiana,True\r\n",
							"    D3B16F02-6C56-4D72-8088-23A56C8C353A,RefState,ceds.ed.gov,KS,200,Kansas,True\r\n",
							"    85F3BB5F-533D-4104-813C-8A5BAC6BED76,RefState,ceds.ed.gov,KY,210,Kentucky,True\r\n",
							"    D3355BB2-71AE-43C8-93A4-8A94AD3D368A,RefState,ceds.ed.gov,LA,220,Louisiana,True\r\n",
							"    994F7CFE-D3CA-4B25-9331-630DF404BACC,RefState,ceds.ed.gov,MA,230,Massachusetts,True\r\n",
							"    3F854FB2-918B-495D-9B6C-7E68975A5FB3,RefState,ceds.ed.gov,MD,240,Maryland,True\r\n",
							"    E8E5C5DD-6C00-4D79-91F0-9667C191D53D,RefState,ceds.ed.gov,ME,250,Maine,True\r\n",
							"    91AEB1E0-02AD-43AC-BBDA-C6C6F2EB8229,RefState,ceds.ed.gov,MH,260,Marshall Islands,True\r\n",
							"    8D5F6125-EDC8-4617-8625-CDCA447F0210,RefState,ceds.ed.gov,MI,270,Michigan,True\r\n",
							"    92093A91-AD63-4C8E-A241-54791538B51C,RefState,ceds.ed.gov,MN,280,Minnesota,True\r\n",
							"    975C4751-E25F-4268-AB1B-8802640ACE08,RefState,ceds.ed.gov,MO,290,Missouri,True\r\n",
							"    975F8937-3322-4ED9-8C58-D0B3BF3C7791,RefState,ceds.ed.gov,MP,300,Northern Marianas,True\r\n",
							"    D3C60549-CF5A-4763-9144-7FC62036954A,RefState,ceds.ed.gov,MS,310,Mississippi,True\r\n",
							"    773E67E2-B0BB-4756-BD7B-9483B2F40FEE,RefState,ceds.ed.gov,MT,320,Montana,True\r\n",
							"    D58CA3A6-6C82-4661-95DF-01ACE1075C96,RefState,ceds.ed.gov,NC,330,North Carolina,True\r\n",
							"    64444C9E-FBD7-419A-B0A7-58746793AC6E,RefState,ceds.ed.gov,ND,340,North Dakota,True\r\n",
							"    98934449-5343-46B9-898C-43E1E7C19032,RefState,ceds.ed.gov,NE,350,Nebraska,True\r\n",
							"    05339530-6CD1-43D0-8674-F7873C567D1A,RefState,ceds.ed.gov,NH,360,New Hampshire,True\r\n",
							"    A3B84025-5BA8-4229-8A11-0C518C1F4286,RefState,ceds.ed.gov,NJ,370,New Jersey,True\r\n",
							"    FC843EF9-169A-4D5E-90BB-5F19CB919638,RefState,ceds.ed.gov,NM,380,New Mexico,True\r\n",
							"    80555E2E-3A9F-4602-A90B-BF440C1ACCD4,RefState,ceds.ed.gov,NV,390,Nevada,True\r\n",
							"    E2ACE706-5524-413E-8164-6D74C4FDB2EC,RefState,ceds.ed.gov,NY,400,New York,True\r\n",
							"    7ECFD541-1962-4D01-BB86-5DD85766DD1D,RefState,ceds.ed.gov,OH,410,Ohio,True\r\n",
							"    3B66E105-18F3-4067-ACD7-6A055FB162C7,RefState,ceds.ed.gov,OK,420,Oklahoma,True\r\n",
							"    687A5C51-5F34-40E6-B329-1ADAEC370CD7,RefState,ceds.ed.gov,OR,430,Oregon,True\r\n",
							"    DE4620E9-7C57-4065-8DBD-9F767DDD7B88,RefState,ceds.ed.gov,PA,440,Pennsylvania,True\r\n",
							"    91FBFF8C-B029-45C2-82FE-BFF8C87FDCA8,RefState,ceds.ed.gov,PR,450,Puerto Rico,True\r\n",
							"    67A9EB33-C9E3-413E-B3D0-B00F26007A8E,RefState,ceds.ed.gov,PW,460,Palau,True\r\n",
							"    27B5FF55-80B3-4048-BACC-CA9A3C9DD3C4,RefState,ceds.ed.gov,RI,470,Rhode Island,True\r\n",
							"    26A7361D-2B27-4DE9-BCF7-AD03DBDEAA52,RefState,ceds.ed.gov,SC,480,South Carolina,True\r\n",
							"    21F4366B-9C35-4923-A3F7-45A4559DED6D,RefState,ceds.ed.gov,SD,490,South Dakota,True\r\n",
							"    DDD79C61-65F2-44AF-97C0-ED6E3B2AB65A,RefState,ceds.ed.gov,TN,500,Tennessee,True\r\n",
							"    06A57A29-DA3B-4A07-A8EB-9FA551405AB0,RefState,ceds.ed.gov,TX,510,Texas,True\r\n",
							"    4054F216-1E39-4FB8-ACAA-A9C3CC7824FB,RefState,ceds.ed.gov,UT,520,Utah,True\r\n",
							"    9A64EDAD-4DDE-43D6-A7E3-3E5A457787C5,RefState,ceds.ed.gov,VA,530,Virginia,True\r\n",
							"    6EA96E1A-8F15-4B2B-A6E3-93981E62C889,RefState,ceds.ed.gov,VI,540,Virgin Islands,True\r\n",
							"    98935CC0-B2E6-4120-A4CE-7B3CA18EB32D,RefState,ceds.ed.gov,VT,550,Vermont,True\r\n",
							"    2C1F84CE-FF58-492A-87EC-12B37A360DAD,RefState,ceds.ed.gov,WA,560,Washington,True\r\n",
							"    D1C6EEF1-B2A6-46CF-89A6-47E8BA2F969F,RefState,ceds.ed.gov,WI,570,Wisconsin,True\r\n",
							"    FA5DC2DC-DF72-4052-BE05-BC540196A154,RefState,ceds.ed.gov,WV,580,West Virginia,True\r\n",
							"    426A37AD-A542-4C9D-91C0-26F3D2D4AF42,RefState,ceds.ed.gov,WY,590,Wyoming,True\r\n",
							"    36BCBFE1-7EFA-420E-8FDC-9FED29376B16,RefState,ceds.ed.gov,AA,600,Armed Forces America,True\r\n",
							"    0C9210A8-8728-45C9-BE0C-3E93996BAD3F,RefState,ceds.ed.gov,AE,610,\"Armed Forces Africa, Canada, Europe, and Mideast\",True\r\n",
							"    1B1D8C7A-7DA4-4DEB-B6FB-D75951B0C4B7,RefState,ceds.ed.gov,AP,620,Armed Forces Pacific,True\r\n",
							"    D27CC7C7-B509-4C5D-A19E-296DEB840B0D,RefCountry,ceds.ed.gov,AF,10,AFGHANISTAN,True\r\n",
							"    C4248C85-E6A3-4003-946F-4F8A1465823C,RefCountry,ceds.ed.gov,AX,20,ÅLAND ISLANDS,True\r\n",
							"    BAF71D44-906B-4725-9525-095861DB192C,RefCountry,ceds.ed.gov,AL,30,ALBANIA,True\r\n",
							"    6ED4915A-5F71-471A-B45B-09DB8C9BD6FA,RefCountry,ceds.ed.gov,DZ,40,ALGERIA,True\r\n",
							"    FBCB6596-3A6A-4AFB-AB7F-AFCB85C48674,RefCountry,ceds.ed.gov,AS,50,AMERICAN SAMOA,True\r\n",
							"    B875C46B-C971-4C34-B688-4D2CFB4D8901,RefCountry,ceds.ed.gov,AD,60,ANDORRA,True\r\n",
							"    D58E52A1-669A-4D3D-B3F2-BFB487083E99,RefCountry,ceds.ed.gov,AO,70,ANGOLA,True\r\n",
							"    6D5F15DA-1BCE-43F6-976E-AA4A9760CF26,RefCountry,ceds.ed.gov,AI,80,ANGUILLA,True\r\n",
							"    D8516776-672C-4806-BEA2-57C9C932D0B4,RefCountry,ceds.ed.gov,AQ,90,ANTARCTICA,True\r\n",
							"    1AF6BB03-DDBF-4A06-BB0B-7E2DD435EF00,RefCountry,ceds.ed.gov,AG,100,ANTIGUA AND BARBUDA,True\r\n",
							"    3E489A05-9414-4905-876A-48E6B087DD7C,RefCountry,ceds.ed.gov,AR,110,ARGENTINA,True\r\n",
							"    C95C52A4-06DD-481D-8067-E420C45AF05B,RefCountry,ceds.ed.gov,AM,120,ARMENIA,True\r\n",
							"    218A0515-0DF9-4A79-8A5C-7235CEA3D133,RefCountry,ceds.ed.gov,AW,130,ARUBA,True\r\n",
							"    4D36A8CE-7236-42A9-ADB3-2CAC9A6E0A8A,RefCountry,ceds.ed.gov,AU,140,AUSTRALIA,True\r\n",
							"    D5FBCC82-E6B9-4A7B-9C81-BE91C3BF3051,RefCountry,ceds.ed.gov,AT,150,AUSTRIA,True\r\n",
							"    86454B57-D0DC-4B5F-990B-35A073B725D7,RefCountry,ceds.ed.gov,AZ,160,AZERBAIJAN,True\r\n",
							"    C71E4CF0-43D1-4C5B-9B3B-5BAE9768B659,RefCountry,ceds.ed.gov,BS,170,BAHAMAS,True\r\n",
							"    431FD1D5-0C81-4519-871B-462125EB423F,RefCountry,ceds.ed.gov,BH,180,BAHRAIN,True\r\n",
							"    610B665A-62D2-4043-BD42-ABB357D215F1,RefCountry,ceds.ed.gov,BD,190,BANGLADESH,True\r\n",
							"    F7FD3C44-EF3A-4DCD-9FF8-BF1A6F511F15,RefCountry,ceds.ed.gov,BB,200,BARBADOS,True\r\n",
							"    35606A50-C1B3-467F-BEBA-F9090248EC13,RefCountry,ceds.ed.gov,BY,210,BELARUS,True\r\n",
							"    6B7A07BF-4F9C-4989-9EBD-113E314D94A9,RefCountry,ceds.ed.gov,BE,220,BELGIUM,True\r\n",
							"    053D2AEC-28D7-4657-B6F9-2618ECB66435,RefCountry,ceds.ed.gov,BZ,230,BELIZE,True\r\n",
							"    9DEC5368-A1CA-43A4-A811-79636D63C4CD,RefCountry,ceds.ed.gov,BJ,240,BENIN,True\r\n",
							"    0C40619F-73BE-482A-B0FC-94C65B65E5EE,RefCountry,ceds.ed.gov,BM,250,BERMUDA,True\r\n",
							"    AC73ED1A-8EBB-4FDC-9446-26313A9FCFDC,RefCountry,ceds.ed.gov,BT,260,BHUTAN,True\r\n",
							"    CFBE2FDB-0DB5-4C0E-8D3B-082E13FC0769,RefCountry,ceds.ed.gov,BO,270,BOLIVIA (PLURINATIONAL STATE OF),True\r\n",
							"    E9464C45-7AF9-4F70-B1C8-2799519C9AC4,RefCountry,ceds.ed.gov,BQ,280,\"BONAIRE, SINT EUSTATIUS AND SABA\",True\r\n",
							"    66AFEF2A-AAAC-403D-986A-D30131D0800B,RefCountry,ceds.ed.gov,BA,290,BOSNIA AND HERZEGOVINA,True\r\n",
							"    BF83057A-817C-46DD-9D96-B880D4A43632,RefCountry,ceds.ed.gov,BW,300,BOTSWANA,True\r\n",
							"    19BA7D54-5564-4089-900B-E4A876F501ED,RefCountry,ceds.ed.gov,BV,310,BOUVET ISLAND,True\r\n",
							"    E67825BB-F50A-4113-A0C9-E491254B761D,RefCountry,ceds.ed.gov,BR,320,BRAZIL,True\r\n",
							"    35D3248A-7192-439A-A124-A47EE8C5E22A,RefCountry,ceds.ed.gov,IO,330,BRITISH INDIAN OCEAN TERRITORY,True\r\n",
							"    5526EDE2-3618-4A09-9C85-6989FBDB0EB9,RefCountry,ceds.ed.gov,BN,340,BRUNEI DARUSSALAM,True\r\n",
							"    F835BE43-A886-4B6F-8FBB-FAE8037DA7FE,RefCountry,ceds.ed.gov,BG,350,BULGARIA,True\r\n",
							"    F4619148-DE08-431B-9F20-0AFCB4B0F381,RefCountry,ceds.ed.gov,BF,360,BURKINA FASO,True\r\n",
							"    41DAA537-F493-4613-A939-3854BBF6633C,RefCountry,ceds.ed.gov,BI,370,BURUNDI,True\r\n",
							"    FA8DA2A4-1B94-4768-A0CD-087FE2C3A57C,RefCountry,ceds.ed.gov,KH,380,CAMBODIA,True\r\n",
							"    D10579AF-BB48-4EFF-A28F-A08E67A8F38A,RefCountry,ceds.ed.gov,CM,390,CAMEROON,True\r\n",
							"    9FDB4302-095B-4CB8-BB21-38E92391CCE7,RefCountry,ceds.ed.gov,CA,400,CANADA,True\r\n",
							"    F00048DE-EAE4-4401-A346-3048E028F919,RefCountry,ceds.ed.gov,CV,410,CABO VERDE,True\r\n",
							"    C493E32C-145B-468F-BFBC-178D3617FE1F,RefCountry,ceds.ed.gov,KY,420,CAYMAN ISLANDS,True\r\n",
							"    943FF087-293A-48FC-B7E6-24A3CACA52AC,RefCountry,ceds.ed.gov,CF,430,CENTRAL AFRICAN REPUBLIC,True\r\n",
							"    FDEB4792-0633-41CA-AB8B-8B316DB92630,RefCountry,ceds.ed.gov,TD,440,CHAD,True\r\n",
							"    1C97B8BE-2418-4B72-925B-21486B9CAFEF,RefCountry,ceds.ed.gov,CL,450,CHILE,True\r\n",
							"    770CB099-B1FB-4E4B-B7EB-89DD0BAA15B6,RefCountry,ceds.ed.gov,CN,460,CHINA,True\r\n",
							"    22C29EDF-B3F5-4E84-98BF-68B0B73806C6,RefCountry,ceds.ed.gov,CX,470,CHRISTMAS ISLAND,True\r\n",
							"    7B7BC7C3-3B56-4F4A-B5DD-49583FBD798A,RefCountry,ceds.ed.gov,CC,480,COCOS (KEELING) ISLANDS,True\r\n",
							"    30EA0E0A-06C2-456E-9062-B1527AF18514,RefCountry,ceds.ed.gov,CO,490,COLOMBIA,True\r\n",
							"    8120B8A8-A113-44FD-8AE7-C0BFC05E3EAB,RefCountry,ceds.ed.gov,KM,500,COMOROS,True\r\n",
							"    1F4F8956-5A23-4185-A244-5DDAF2C4A8D5,RefCountry,ceds.ed.gov,CG,510,CONGO,True\r\n",
							"    D81156CD-C2DF-4BF4-B5E0-91A7D495D1F2,RefCountry,ceds.ed.gov,CD,520,\"CONGO, DEMOCRATIC REPUBLIC OF THE\",True\r\n",
							"    EA6D2CD0-4457-4752-AC10-2AD8C2192DFD,RefCountry,ceds.ed.gov,CK,530,COOK ISLANDS,True\r\n",
							"    1EE80E7F-CE07-4192-BC71-92CCE5DF5B87,RefCountry,ceds.ed.gov,CR,540,COSTA RICA,True\r\n",
							"    7D626101-21A0-48FB-A209-374636012EFA,RefCountry,ceds.ed.gov,CI,550,CÔTE D'IVOIRE,True\r\n",
							"    2976CDB1-2EBE-4FED-A988-5EA8166DA16D,RefCountry,ceds.ed.gov,HR,560,CROATIA,True\r\n",
							"    31B0ED95-2375-4E9D-8BA6-09F36FE4B303,RefCountry,ceds.ed.gov,CU,570,CUBA,True\r\n",
							"    3444FFC6-75DC-4BFD-A65F-C981B09A4E5D,RefCountry,ceds.ed.gov,CW,580,CURAÇAO,True\r\n",
							"    7303FDD1-C6C0-4328-8487-DB1E31922014,RefCountry,ceds.ed.gov,CY,590,CYPRUS,True\r\n",
							"    58D2376A-3B7E-4325-B238-080724BF7371,RefCountry,ceds.ed.gov,CZ,600,CZECH REPUBLIC,True\r\n",
							"    0279764E-EB81-4FC2-A027-AA18205E624E,RefCountry,ceds.ed.gov,DK,610,DENMARK,True\r\n",
							"    0D2664E5-F193-448F-8379-71A4B7B35751,RefCountry,ceds.ed.gov,DJ,620,DJIBOUTI,True\r\n",
							"    122C7D71-0875-45E6-BF67-592327F0EA3E,RefCountry,ceds.ed.gov,DM,630,DOMINICA,True\r\n",
							"    275978E1-6AEC-40D1-B9EF-5FD7109F249F,RefCountry,ceds.ed.gov,DO,640,DOMINICAN REPUBLIC,True\r\n",
							"    679BBA36-AE9E-4790-B6FA-8C4BF1DE1691,RefCountry,ceds.ed.gov,EC,650,ECUADOR,True\r\n",
							"    55B12FE3-A9DD-4487-8BD9-F1F5AA8BE5BD,RefCountry,ceds.ed.gov,EG,660,EGYPT,True\r\n",
							"    76B0ECDC-2393-41D8-83D2-5543017B43EA,RefCountry,ceds.ed.gov,SV,670,EL SALVADOR,True\r\n",
							"    1F5F7272-EE24-4BFB-9021-65DCDD641B47,RefCountry,ceds.ed.gov,GQ,680,EQUATORIAL GUINEA,True\r\n",
							"    39963E26-F3A7-4197-B258-8B5E031DBC91,RefCountry,ceds.ed.gov,ER,690,ERITREA,True\r\n",
							"    A42681D9-4185-4D8E-8F47-165D9D60DF2D,RefCountry,ceds.ed.gov,EE,700,ESTONIA,True\r\n",
							"    45963F45-7BAF-4D51-99F4-C71EAF3DD152,RefCountry,ceds.ed.gov,ET,710,ETHIOPIA,True\r\n",
							"    6CF21A67-DDD5-447F-9154-B4BDB8C886E9,RefCountry,ceds.ed.gov,FK,720,FALKLAND ISLANDS (MALVINAS),True\r\n",
							"    2E42F906-C8AA-432D-8EC6-AA4F07B3A98F,RefCountry,ceds.ed.gov,FO,730,FAROE ISLANDS,True\r\n",
							"    6F9646D1-CAE1-47BC-8E41-C82743997ACF,RefCountry,ceds.ed.gov,FJ,740,FIJI,True\r\n",
							"    428DE3F9-D201-4BD4-98CA-F0F92B127C0D,RefCountry,ceds.ed.gov,FI,750,FINLAND,True\r\n",
							"    281C8F83-1AB0-4678-B3AC-1E6DA98A1B8D,RefCountry,ceds.ed.gov,FR,760,FRANCE,True\r\n",
							"    6F8A17F4-006C-4DF0-95BE-2344577B4C87,RefCountry,ceds.ed.gov,GF,770,FRENCH GUIANA,True\r\n",
							"    0CAC2EF1-59E6-4390-9371-9EC5F400D3CA,RefCountry,ceds.ed.gov,PF,780,FRENCH POLYNESIA,True\r\n",
							"    2CD7DC70-F061-4845-B626-24E8C4076FE5,RefCountry,ceds.ed.gov,TF,790,FRENCH SOUTHERN TERRITORIES,True\r\n",
							"    105F3434-B6ED-457B-B395-B0BA7ED2EBD0,RefCountry,ceds.ed.gov,GA,800,GABON,True\r\n",
							"    3E0BA96F-0121-4C51-ADC4-5B0B840C720F,RefCountry,ceds.ed.gov,GM,810,GAMBIA,True\r\n",
							"    9E8290AE-90C6-4D4A-8F6A-B7C5B2BED017,RefCountry,ceds.ed.gov,GE,820,GEORGIA,True\r\n",
							"    8E28378A-05A3-4EEB-A9ED-C3B1695BBC00,RefCountry,ceds.ed.gov,DE,830,GERMANY,True\r\n",
							"    73C7F8FB-CC15-4ED7-9D4C-0B9B5054DABC,RefCountry,ceds.ed.gov,GH,840,GHANA,True\r\n",
							"    4A91F599-1CEB-47DA-9655-239F7414BF49,RefCountry,ceds.ed.gov,GI,850,GIBRALTAR,True\r\n",
							"    549ED6FA-054D-4E88-94A8-9A8CCD6A3A93,RefCountry,ceds.ed.gov,GR,860,GREECE,True\r\n",
							"    4AD8D4C1-2AA5-4F4B-85BF-0FBB2E0463BB,RefCountry,ceds.ed.gov,GL,870,GREENLAND,True\r\n",
							"    3AF9FCF6-15D7-451B-9355-702CB458AD29,RefCountry,ceds.ed.gov,GD,880,GRENADA,True\r\n",
							"    FD1FE91D-640F-4029-A2A7-1C85E939E37C,RefCountry,ceds.ed.gov,GP,890,GUADELOUPE,True\r\n",
							"    1FE1E74B-E294-4ADD-BF3A-5B4598C7C2CC,RefCountry,ceds.ed.gov,GU,900,GUAM,True\r\n",
							"    37F47BB7-4866-4052-8531-F70C6CC05509,RefCountry,ceds.ed.gov,GT,910,GUATEMALA,True\r\n",
							"    31737278-DDE3-4D14-B5BB-71ED800FD70D,RefCountry,ceds.ed.gov,GG,920,GUERNSEY,True\r\n",
							"    596BE35E-82B8-4350-B18A-76BAF253518D,RefCountry,ceds.ed.gov,GN,930,GUINEA,True\r\n",
							"    0A18754D-613A-4B3A-AB0E-CE0147035400,RefCountry,ceds.ed.gov,GW,940,GUINEA-BISSAU,True\r\n",
							"    894E840B-6BF1-4714-B1C1-5F86F1465E09,RefCountry,ceds.ed.gov,GY,950,GUYANA,True\r\n",
							"    C3AB650B-E895-4B45-956F-D4A21DE16762,RefCountry,ceds.ed.gov,HT,960,HAITI,True\r\n",
							"    A9063AF1-0FA1-40C5-BF1B-3C5025C1E226,RefCountry,ceds.ed.gov,HM,970,HEARD ISLAND AND MCDONALD ISLANDS,True\r\n",
							"    5382AB70-5BC5-4EE5-AC89-74222EB063E9,RefCountry,ceds.ed.gov,VA,980,HOLY SEE,True\r\n",
							"    501E2372-EAAC-4DAA-B5F8-498BB79B5D06,RefCountry,ceds.ed.gov,HN,990,HONDURAS,True\r\n",
							"    4566DA89-2577-421F-A7D4-BE159101CA25,RefCountry,ceds.ed.gov,HK,1000,HONG KONG,True\r\n",
							"    17F05B32-C93E-4B65-B97B-47739D7BE2B6,RefCountry,ceds.ed.gov,HU,1010,HUNGARY,True\r\n",
							"    0B407879-7D92-47F0-AD86-655E40283F93,RefCountry,ceds.ed.gov,IS,1020,ICELAND,True\r\n",
							"    922A1996-C5E6-4A8E-A2B4-CA61DD3F12BC,RefCountry,ceds.ed.gov,IN,1030,INDIA,True\r\n",
							"    509756FB-94BF-431D-B96E-9EC18A27298C,RefCountry,ceds.ed.gov,ID,1040,INDONESIA,True\r\n",
							"    85056B48-EB0B-4CA9-8015-116311F92A53,RefCountry,ceds.ed.gov,IR,1050,IRAN (ISLAMIC REPUBLIC OF),True\r\n",
							"    E47C2972-2934-48B8-A26E-A078AF162E45,RefCountry,ceds.ed.gov,IQ,1060,IRAQ,True\r\n",
							"    F7F3EC17-D221-4AD4-AEE4-1155F0487A69,RefCountry,ceds.ed.gov,IE,1070,IRELAND,True\r\n",
							"    73DF0854-8482-4AC8-81AA-AD5B6C4CF02D,RefCountry,ceds.ed.gov,IM,1080,ISLE OF MAN,True\r\n",
							"    F9F71EBE-27D8-4CF1-945E-65A1CD978236,RefCountry,ceds.ed.gov,IL,1090,ISRAEL,True\r\n",
							"    B653EDC2-B645-4BA6-889E-6F20DE6B6001,RefCountry,ceds.ed.gov,IT,1100,ITALY,True\r\n",
							"    751AC8A6-FF95-403B-9CC2-2894B726B76A,RefCountry,ceds.ed.gov,JM,1110,JAMAICA,True\r\n",
							"    A0A473A1-E41E-4C2B-A600-16607A1FB7FE,RefCountry,ceds.ed.gov,JP,1120,JAPAN,True\r\n",
							"    04788D74-1C8D-40DD-B2CD-CDE1D73FED54,RefCountry,ceds.ed.gov,JE,1130,JERSEY,True\r\n",
							"    5BA9655E-CC02-4E69-B586-1072DF66757B,RefCountry,ceds.ed.gov,JO,1140,JORDAN,True\r\n",
							"    3F5F2153-0E28-48C9-8D6D-805867AC67AB,RefCountry,ceds.ed.gov,KZ,1150,KAZAKHSTAN,True\r\n",
							"    479CE3D3-5DD5-4480-A1EB-A830439D329F,RefCountry,ceds.ed.gov,KE,1160,KENYA,True\r\n",
							"    327A46E4-9608-43D5-99A4-6841865FB4DB,RefCountry,ceds.ed.gov,KI,1170,KIRIBATI,True\r\n",
							"    75E9610E-0B9E-4340-B66F-8E405ED76662,RefCountry,ceds.ed.gov,KP,1180,KOREA (DEMOCRATIC PEOPLE'S REPUBLIC OF),True\r\n",
							"    AD688E73-BC4A-4417-9B7F-387BB0B665AA,RefCountry,ceds.ed.gov,KR,1190,\"KOREA, REPUBLIC OF\",True\r\n",
							"    F3B92EB3-4413-4E40-8748-742814C488FB,RefCountry,ceds.ed.gov,KW,1200,KUWAIT,True\r\n",
							"    167F86C4-8C7B-4299-A1A6-C8AF9AB67DBE,RefCountry,ceds.ed.gov,KG,1210,KYRGYZSTAN,True\r\n",
							"    D4844D61-AC72-4D42-B977-AC91738BBD4B,RefCountry,ceds.ed.gov,LA,1220,LAO PEOPLE'S DEMOCRATIC REPUBLIC,True\r\n",
							"    D399E902-AF94-4531-A52C-D956D0B7C55C,RefCountry,ceds.ed.gov,LV,1230,LATVIA,True\r\n",
							"    0724E62D-DF7D-43DE-B88D-C6D7790603A0,RefCountry,ceds.ed.gov,LB,1240,LEBANON,True\r\n",
							"    30C1236C-2A1B-40E5-8E47-9C5CB1BEB8D3,RefCountry,ceds.ed.gov,LS,1250,LESOTHO,True\r\n",
							"    22E384DE-DCE8-43A9-9373-7EA91F1D729A,RefCountry,ceds.ed.gov,LR,1260,LIBERIA,True\r\n",
							"    7C70F8B1-1D8A-48CA-BA4E-888276B155D5,RefCountry,ceds.ed.gov,LY,1270,LIBYA,True\r\n",
							"    30521C6A-BA6B-4B8B-A0D3-C1D1F0F38EDF,RefCountry,ceds.ed.gov,LI,1280,LIECHTENSTEIN,True\r\n",
							"    0B9965B2-6D41-4AA4-A860-96B4D6AE2BC5,RefCountry,ceds.ed.gov,LT,1290,LITHUANIA,True\r\n",
							"    795B7E23-49FA-4851-9228-5816BDC3C3A0,RefCountry,ceds.ed.gov,LU,1300,LUXEMBOURG,True\r\n",
							"    1F000974-CD71-4789-B5C8-7DEDE2BF4354,RefCountry,ceds.ed.gov,MO,1310,MACAO,True\r\n",
							"    7E2F4872-EC4A-4922-BE59-7E8E510319C3,RefCountry,ceds.ed.gov,MK,1320,\"MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF\",True\r\n",
							"    CB6825D4-A079-41DC-9511-D30AB3D9D8A0,RefCountry,ceds.ed.gov,MG,1330,MADAGASCAR,True\r\n",
							"    DAB841AE-A8D0-4B53-81C7-71CAA144BB79,RefCountry,ceds.ed.gov,MW,1340,MALAWI,True\r\n",
							"    55CD15C5-0B88-4B3F-88EA-2378A055B0E6,RefCountry,ceds.ed.gov,MY,1350,MALAYSIA,True\r\n",
							"    5DF7FD05-9BAB-4271-8AB4-A101656B99B7,RefCountry,ceds.ed.gov,MV,1360,MALDIVES,True\r\n",
							"    F38D0885-53A7-42C6-8923-1945E6BB924A,RefCountry,ceds.ed.gov,ML,1370,MALI,True\r\n",
							"    C96DFCAD-A2E6-4CCE-AC7D-BAAAEE4E2A5E,RefCountry,ceds.ed.gov,MT,1380,MALTA,True\r\n",
							"    47BBD0B0-FF49-4E7B-8022-5497DF5BA5C2,RefCountry,ceds.ed.gov,MH,1390,MARSHALL ISLANDS,True\r\n",
							"    B906FFA3-4C09-44D8-90B5-227D3B90CFD0,RefCountry,ceds.ed.gov,MQ,1400,MARTINIQUE,True\r\n",
							"    59EDC14B-E7F5-46C2-9F5C-F9569B5348A2,RefCountry,ceds.ed.gov,MR,1410,MAURITANIA,True\r\n",
							"    7E628BC1-2BB6-48C6-A210-4FD9677FAB9B,RefCountry,ceds.ed.gov,MU,1420,MAURITIUS,True\r\n",
							"    1AF13DD5-50E8-45AF-AAE4-4E45AA7CDA0E,RefCountry,ceds.ed.gov,YT,1430,MAYOTTE,True\r\n",
							"    86111F48-2681-44B5-BEC7-1B46F834C567,RefCountry,ceds.ed.gov,MX,1440,MEXICO,True\r\n",
							"    453FA007-D61C-4D1B-B6DC-CFD74313698C,RefCountry,ceds.ed.gov,FM,1450,MICRONESIA (FEDERATED STATES OF),True\r\n",
							"    01FDAC40-AF6F-477D-890D-8500DCC4432E,RefCountry,ceds.ed.gov,MD,1460,\"MOLDOVA, REPUBLIC OF\",True\r\n",
							"    0061C812-8A47-49DA-AE14-074386532A8F,RefCountry,ceds.ed.gov,MC,1470,MONACO,True\r\n",
							"    466CD301-592F-4480-9153-ECA53DC2DA2B,RefCountry,ceds.ed.gov,MN,1480,MONGOLIA,True\r\n",
							"    410F008B-CDA4-4609-A8AC-91DBF38EAE34,RefCountry,ceds.ed.gov,ME,1490,MONTENEGRO,True\r\n",
							"    B2411F7B-7BD3-4A93-9321-80661F7732E1,RefCountry,ceds.ed.gov,MS,1500,MONTSERRAT,True\r\n",
							"    E65079E9-6064-43F5-A9F3-797CB5DE8A0E,RefCountry,ceds.ed.gov,MA,1510,MOROCCO,True\r\n",
							"    89C048D5-9BD1-47A5-BDAA-9B4E58B22C48,RefCountry,ceds.ed.gov,MZ,1520,MOZAMBIQUE,True\r\n",
							"    5A666073-4114-4C83-9614-A28161BE68FC,RefCountry,ceds.ed.gov,MM,1530,MYANMAR,True\r\n",
							"    C262EBC2-14AC-4C7E-8333-4908FDA99F7A,RefCountry,ceds.ed.gov,NA,1540,NAMIBIA,True\r\n",
							"    1C352B2F-F6F0-401A-82A6-837187B393BB,RefCountry,ceds.ed.gov,NR,1550,NAURU,True\r\n",
							"    FD689F22-09BB-4A3C-AD17-055BF3B3B16C,RefCountry,ceds.ed.gov,NP,1560,NEPAL,True\r\n",
							"    8F9679A5-1B7A-4C35-9297-FCD4AF94CB12,RefCountry,ceds.ed.gov,NL,1570,NETHERLANDS,True\r\n",
							"    EE4E2F96-15AC-44FA-AA43-7ED8903A467D,RefCountry,ceds.ed.gov,NC,1580,NEW CALEDONIA,True\r\n",
							"    A016256C-E7F3-4B9F-9897-0AC80CED7A8D,RefCountry,ceds.ed.gov,NZ,1590,NEW ZEALAND,True\r\n",
							"    14C3C6C1-65E7-46AA-AA0D-A46428C6A7A4,RefCountry,ceds.ed.gov,NI,1600,NICARAGUA,True\r\n",
							"    0706A939-1EF8-45C9-AE0F-6C4E16442B3A,RefCountry,ceds.ed.gov,NE,1610,NIGER,True\r\n",
							"    AA8D132E-F753-4699-AC6B-5975AB620C81,RefCountry,ceds.ed.gov,NG,1620,NIGERIA,True\r\n",
							"    400A1956-D7C2-4207-BD4B-24DDAA4BEF74,RefCountry,ceds.ed.gov,NU,1630,NIUE,True\r\n",
							"    E388E2DB-9EAF-4B9E-AB8E-64CD118BB19F,RefCountry,ceds.ed.gov,NF,1640,NORFOLK ISLAND,True\r\n",
							"    529DCFA0-3191-49D7-9C5A-430BBC7C72F1,RefCountry,ceds.ed.gov,MP,1650,NORTHERN MARIANA ISLANDS,True\r\n",
							"    F6BB8EBD-13FC-492E-8C2F-12DEB51F4BC7,RefCountry,ceds.ed.gov,NO,1660,NORWAY,True\r\n",
							"    4C19193D-BC67-4FCB-94D0-1D7E05C6D5BC,RefCountry,ceds.ed.gov,OM,1670,OMAN,True\r\n",
							"    51E5415D-8663-40A0-92C7-85A4C90D726F,RefCountry,ceds.ed.gov,PK,1680,PAKISTAN,True\r\n",
							"    7C9C9603-04D3-4076-969D-B0FF10DE00CA,RefCountry,ceds.ed.gov,PW,1690,PALAU,True\r\n",
							"    4C5D8A77-B85E-4920-AB76-8F60D113BF81,RefCountry,ceds.ed.gov,PS,1700,\"PALESTINE, STATE OF\",True\r\n",
							"    EF403E92-BF0A-499C-8BFC-F2AF26EEE0C8,RefCountry,ceds.ed.gov,PA,1710,PANAMA,True\r\n",
							"    80BD56AF-3441-4A36-9E0A-275DE4CDFA43,RefCountry,ceds.ed.gov,PG,1720,PAPUA NEW GUINEA,True\r\n",
							"    41E21101-03D8-4549-A6AC-499136490091,RefCountry,ceds.ed.gov,PY,1730,PARAGUAY,True\r\n",
							"    51F14894-83C8-421B-B248-98567587BC9F,RefCountry,ceds.ed.gov,PE,1740,PERU,True\r\n",
							"    B59CD07B-E6C0-4A64-8965-27DDF675E8B9,RefCountry,ceds.ed.gov,PH,1750,PHILIPPINES,True\r\n",
							"    5C3F2B8C-D4D5-4CD7-84D6-E4596E1DD3B8,RefCountry,ceds.ed.gov,PN,1760,PITCAIRN,True\r\n",
							"    F52D0D10-06DD-4937-80B1-0331A1C211CB,RefCountry,ceds.ed.gov,PL,1770,POLAND,True\r\n",
							"    D7B2F40F-74F6-40C1-A02C-C9920B198526,RefCountry,ceds.ed.gov,PT,1780,PORTUGAL,True\r\n",
							"    1EC79991-D73C-4B3F-9CC4-537DC68FC48F,RefCountry,ceds.ed.gov,PR,1790,PUERTO RICO,True\r\n",
							"    46D0B925-44FB-46BD-9488-717888777756,RefCountry,ceds.ed.gov,QA,1800,QATAR,True\r\n",
							"    6827FD44-246C-4F53-9320-17946A6B4017,RefCountry,ceds.ed.gov,RE,1810,RÉUNION,True\r\n",
							"    C5101A5B-B94E-4E45-9291-AC5BF329CCB2,RefCountry,ceds.ed.gov,RO,1820,ROMANIA,True\r\n",
							"    4F9A48C8-A04D-4F5D-9100-E7FD403BBE46,RefCountry,ceds.ed.gov,RU,1830,RUSSIAN FEDERATION,True\r\n",
							"    5DB1879F-AE04-40FE-B3F2-13285D78216D,RefCountry,ceds.ed.gov,RW,1840,RWANDA,True\r\n",
							"    F8124018-FD02-4763-A8B0-57D04084E94D,RefCountry,ceds.ed.gov,BL,1850,SAINT BARTHÉLEMY,True\r\n",
							"    AA552BEE-7833-4A9C-AFE9-8DF0D4996950,RefCountry,ceds.ed.gov,SH,1860,\"SAINT HELENA, ASCENSION AND TRISTAN DA CUNHA\",True\r\n",
							"    7E325754-D43B-4431-A17B-1F39BCBC6FCB,RefCountry,ceds.ed.gov,KN,1870,SAINT KITTS AND NEVIS,True\r\n",
							"    993ED9DD-8902-413E-87F7-0A7F89AEB681,RefCountry,ceds.ed.gov,LC,1880,SAINT LUCIA,True\r\n",
							"    4B927548-A011-4EA4-A807-E9C7CA9B8182,RefCountry,ceds.ed.gov,MF,1890,SAINT MARTIN (FRENCH PART),True\r\n",
							"    9213514F-EF2F-41F1-819F-B5B9AA389DD8,RefCountry,ceds.ed.gov,PM,1900,SAINT PIERRE AND MIQUELON,True\r\n",
							"    A76FAAD0-97CC-4C01-A33B-17A84963DF17,RefCountry,ceds.ed.gov,VC,1910,SAINT VINCENT AND THE GRENADINES,True\r\n",
							"    02BF9BB8-2B0B-48DF-A44A-3F55C5E660CA,RefCountry,ceds.ed.gov,WS,1920,SAMOA,True\r\n",
							"    B777595B-0E66-4597-81D0-2FA3524B3DAF,RefCountry,ceds.ed.gov,SM,1930,SAN MARINO,True\r\n",
							"    AEEEBA86-00EB-4C50-91DC-0FD8BF63296C,RefCountry,ceds.ed.gov,ST,1940,SAO TOME AND PRINCIPE,True\r\n",
							"    ABEEF49C-2E93-458A-84F1-2D5C77424539,RefCountry,ceds.ed.gov,SA,1950,SAUDI ARABIA,True\r\n",
							"    94AD69A4-B71F-4FA9-91AE-F12BE09C81DE,RefCountry,ceds.ed.gov,SN,1960,SENEGAL,True\r\n",
							"    BCA16B75-BF2E-497D-824C-9EA569BD08DA,RefCountry,ceds.ed.gov,RS,1970,SERBIA,True\r\n",
							"    5FA3CF72-FFA4-40CE-8C4D-52793DBCBE64,RefCountry,ceds.ed.gov,SC,1980,SEYCHELLES,True\r\n",
							"    0E5B7268-6612-4092-B075-7CE554F6AA8B,RefCountry,ceds.ed.gov,SL,1990,SIERRA LEONE,True\r\n",
							"    0A490B99-2619-4F6A-AE5B-7F55869E569B,RefCountry,ceds.ed.gov,SG,2000,SINGAPORE,True\r\n",
							"    9585295D-9F85-4A5D-804F-8A78212EFA7E,RefCountry,ceds.ed.gov,SX,2010,SINT MAARTEN (DUTCH PART),True\r\n",
							"    C02772F6-4C93-4ADA-B30A-758A90AE7A2C,RefCountry,ceds.ed.gov,SK,2020,SLOVAKIA,True\r\n",
							"    1D56E8EE-74CC-49D6-8174-9670E6356024,RefCountry,ceds.ed.gov,SI,2030,SLOVENIA,True\r\n",
							"    A6425AC0-72D3-4008-8BBB-BEDC03F20AAA,RefCountry,ceds.ed.gov,SB,2040,SOLOMON ISLANDS,True\r\n",
							"    AC26F682-2AC1-4907-B165-CAE046FC2BCA,RefCountry,ceds.ed.gov,SO,2050,SOMALIA,True\r\n",
							"    A3D38931-C557-4530-902D-C27529532E7C,RefCountry,ceds.ed.gov,ZA,2060,SOUTH AFRICA,True\r\n",
							"    F0B07ACA-C168-4152-B6AB-2B7EE0162D0E,RefCountry,ceds.ed.gov,GS,2070,SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS,True\r\n",
							"    930FB257-80FD-4410-91BE-0B047A0E9483,RefCountry,ceds.ed.gov,SS,2080,SOUTH SUDAN,True\r\n",
							"    7C9A8ABA-B6A4-4B31-8CBE-6609D283322D,RefCountry,ceds.ed.gov,ES,2090,SPAIN,True\r\n",
							"    ED6CE09B-5451-4215-922C-D5F1BD23D2C0,RefCountry,ceds.ed.gov,LK,2100,SRI LANKA,True\r\n",
							"    E9A6F2AE-7BF4-4DA7-92AA-E8685030B1B5,RefCountry,ceds.ed.gov,SD,2110,SUDAN,True\r\n",
							"    83D8D9EB-36E3-4081-9D3F-EFCB894B1EF0,RefCountry,ceds.ed.gov,SR,2120,SURINAME,True\r\n",
							"    0C728176-8046-4390-A579-84E67D67B1E1,RefCountry,ceds.ed.gov,SJ,2130,SVALBARD AND JAN MAYEN,True\r\n",
							"    FE5D4E7F-7E05-4018-89D1-4A2C3BA268A5,RefCountry,ceds.ed.gov,SZ,2140,SWAZILAND,True\r\n",
							"    F63636C1-3123-4700-82CE-C4FD7EA9C289,RefCountry,ceds.ed.gov,SE,2150,SWEDEN,True\r\n",
							"    0B958C09-33BF-47EF-B70E-C42E33FBDDC3,RefCountry,ceds.ed.gov,CH,2160,SWITZERLAND,True\r\n",
							"    D0E968A9-B41A-4301-B7E2-41FAE7B597A2,RefCountry,ceds.ed.gov,SY,2170,SYRIAN ARAB REPUBLIC,True\r\n",
							"    2F4865F0-C6E6-4C24-8D63-8095AE34B472,RefCountry,ceds.ed.gov,TW,2180,TAIWAN,True\r\n",
							"    77867C67-1973-41AD-8824-C08AB2EF346E,RefCountry,ceds.ed.gov,TJ,2190,TAJIKISTAN,True\r\n",
							"    3E8FFA2A-9A41-4ECF-AFFF-9BD16A555078,RefCountry,ceds.ed.gov,TZ,2200,\"TANZANIA, UNITED REPUBLIC OF\",True\r\n",
							"    41767821-A02C-4218-9066-D026FFA3213C,RefCountry,ceds.ed.gov,TH,2210,THAILAND,True\r\n",
							"    240F8689-9BE9-4883-82E5-4212B53DAB5B,RefCountry,ceds.ed.gov,TL,2220,TIMOR-LESTE,True\r\n",
							"    B67AF7FD-9496-46CD-907A-5040F7A4D56C,RefCountry,ceds.ed.gov,TG,2230,TOGO,True\r\n",
							"    03A40FA1-D42C-41D4-AC1C-A58A9309DC25,RefCountry,ceds.ed.gov,TK,2240,TOKELAU,True\r\n",
							"    77C473E4-BC68-4341-8F32-C312DCA7BFE2,RefCountry,ceds.ed.gov,TO,2250,TONGA,True\r\n",
							"    D07FBFC8-DE57-4D65-B0A3-2AC8CD6F12CA,RefCountry,ceds.ed.gov,TT,2260,TRINIDAD AND TOBAGO,True\r\n",
							"    6E2BF916-718B-4FBC-AB54-DD4DEE4D91E0,RefCountry,ceds.ed.gov,TN,2270,TUNISIA,True\r\n",
							"    50D8BE7D-2F24-4E3B-9E29-D75CF7177F19,RefCountry,ceds.ed.gov,TR,2280,TURKEY,True\r\n",
							"    61AFB333-7B93-471E-A4B0-EE4FEC8588B7,RefCountry,ceds.ed.gov,TM,2290,TURKMENISTAN,True\r\n",
							"    2BEB099D-61D0-4E8F-AF1F-96C1C781292C,RefCountry,ceds.ed.gov,TC,2300,TURKS AND CAICOS ISLANDS,True\r\n",
							"    D8DA0877-CCB5-4963-9E26-308BF067320C,RefCountry,ceds.ed.gov,TV,2310,TUVALU,True\r\n",
							"    BA5C6CDE-7D11-45AF-B30B-76500FA91425,RefCountry,ceds.ed.gov,UG,2320,UGANDA,True\r\n",
							"    52ECB0E0-22B9-4267-BDDD-998BAB471EC6,RefCountry,ceds.ed.gov,UA,2330,UKRAINE,True\r\n",
							"    EBF9A8F9-C0CC-4386-B221-25609FB31328,RefCountry,ceds.ed.gov,AE,2340,UNITED ARAB EMIRATES,True\r\n",
							"    3B3D1E6C-28D7-4189-8C7F-607F0211969B,RefCountry,ceds.ed.gov,GB,2350,UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND,True\r\n",
							"    B27E984F-0441-4833-8724-60E2496A47D7,RefCountry,ceds.ed.gov,US,2360,UNITED STATES OF AMERICA,True\r\n",
							"    24D20FA9-94ED-43EB-AC99-0A2E3E0E3A73,RefCountry,ceds.ed.gov,UM,2370,UNITED STATES MINOR OUTLYING ISLANDS,True\r\n",
							"    7EBF4E35-914B-4DB3-9827-08B9A4D3F45B,RefCountry,ceds.ed.gov,UY,2380,URUGUAY,True\r\n",
							"    9F932DC2-F603-4B5E-8F12-0BDD1E6AB1B8,RefCountry,ceds.ed.gov,UZ,2390,UZBEKISTAN,True\r\n",
							"    E8FDD235-C19F-4F0F-9300-78E5C22C70F2,RefCountry,ceds.ed.gov,VU,2400,VANUATU,True\r\n",
							"    F4FCCBA2-DCD9-403A-AF1E-9450EDAA0BDD,RefCountry,ceds.ed.gov,VE,2410,VENEZUELA (BOLIVARIAN REPUBLIC OF),True\r\n",
							"    F3CE298A-889D-4E33-B23B-0436D79AE5CA,RefCountry,ceds.ed.gov,VN,2420,VIET NAM,True\r\n",
							"    8F01500D-B796-48A3-B18D-26FB561A0A63,RefCountry,ceds.ed.gov,VG,2430,VIRGIN ISLANDS (BRITISH),True\r\n",
							"    4783FC4D-9665-4346-8C9D-4DA16D655DFF,RefCountry,ceds.ed.gov,VI,2440,VIRGIN ISLANDS (U.S.),True\r\n",
							"    C98465F0-6A37-4D23-97FE-845E92F82823,RefCountry,ceds.ed.gov,WF,2450,WALLIS AND FUTUNA,True\r\n",
							"    5CA05C14-7A46-4CF2-8E66-2A901E95ADE0,RefCountry,ceds.ed.gov,EH,2460,WESTERN SAHARA,True\r\n",
							"    81539402-144E-46BC-9ED0-FF0C666FDE08,RefCountry,ceds.ed.gov,YE,2470,YEMEN,True\r\n",
							"    2EB51FA4-1241-4614-87FE-190896B35849,RefCountry,ceds.ed.gov,ZM,2480,ZAMBIA,True\r\n",
							"    F0F142DC-C1C0-425E-9961-E438DEDBEB57,RefCountry,ceds.ed.gov,ZW,2490,ZIMBABWE,True\r\n",
							"    F772D02B-3B1E-41A4-941B-77BEBB2AF8B2,RefPersonRelationship,imsglobal.com,parent,10,Parent,True\r\n",
							"    C9D0304D-A529-409A-9C4E-C008E76EFA6E,RefPersonRelationship,imsglobal.com,relative,20,Relative,True\r\n",
							"    FE54C353-BFE9-4229-BDF7-F421423739A3,RefPersonRelationship,imsglobal.com,guardian,30,Guardian,True\r\n",
							"    0D16FCED-6DC7-4235-90BF-724D40ABC7BD,RefStudentOrgRole,imsglobal.org,student,10,Student,True\r\n",
							"    2BE22270-5236-41BF-B359-167E725F45DA,RefStaffOrgRole,imsglobal.org,aide,10,Aide,True\r\n",
							"    96DB6F6A-B3C7-4A8C-8885-42AFC7598528,RefStaffOrgRole,imsglobal.org,proctor,20,Proctor,True\r\n",
							"    03FFC8C5-9C64-4321-8041-334F07A252F0,RefStaffOrgRole,imsglobal.org,teacher,30,Teacher,True\r\n",
							"    6A43802A-4372-44D3-B3F0-7B9BC24EF9D8,RefStaffOrgRole,imsglobal.org,administrator,40,Administrator,True\r\n",
							"    DA004FFF-9B71-4926-9D7C-79B83B19F31B,RefStaffOrgRole,microsoft.com,itAdmin,50,IT Admin,True\r\n",
							"    05DE1E52-6991-4F77-BBC6-620A7171E1A6,RefStaffOrgRole,microsoft.com,officeStaff,60,Office Staff,True\r\n",
							"    57AA30CB-DAD3-4D73-B568-DFD0B431BD83,RefStaffOrgRole,microsoft.com,nurse,70,Nurse,True\r\n",
							"    8F5976E5-3EFB-45E7-8751-89C83BB10D86,RefStaffOrgRole,microsoft.com,occupationalTherapist,80,Occupational Therapist,True\r\n",
							"    DA01A84E-3E08-4047-996E-1240243825E6,RefStaffOrgRole,microsoft.com,physicalTherapist,90,Physical Therapist,True\r\n",
							"    CAA12695-48A2-4EAF-9798-EDB972CF89F2,RefStaffOrgRole,microsoft.com,speechTherapist,100,Speech Therapist,True\r\n",
							"    A5E30209-2416-47FF-BB2B-B30892A4544D,RefStaffOrgRole,microsoft.com,visionTherapist,110,Vision,True\r\n",
							"    4F0164B4-3827-4993-AEF5-29B5CCEAFA48,RefStaffOrgRole,microsoft.com,paraprofessional,120,Paraprofessional,True\r\n",
							"    329EF3DE-913A-45C2-B235-9B5BB9D1B576,RefStaffOrgRole,microsoft.com,teacherAssistant,130,Teacher Assistant,True\r\n",
							"    BC319764-C1EB-4DFA-8C43-65C8C96B5BBF,RefStaffOrgRole,microsoft.com,staff,140,Staff,True\r\n",
							"    D1CA502E-DB62-41D2-B438-AC669E6A9663,RefStudentSectionRole,imsglobal.org,student,10,Student,True\r\n",
							"    38846D3C-397F-40BB-B43E-89092FFB7FAD,RefStaffSectionRole,imsglobal.org,aide,10,Aide,True\r\n",
							"    453DD32F-1088-4BD4-9B0E-FD4AC325D676,RefStaffSectionRole,imsglobal.org,proctor,20,Proctor,True\r\n",
							"    C943E793-2DB7-47C0-B187-A9ED65EEBD5B,RefStaffSectionRole,imsglobal.org,teacher,30,Teacher,True\r\n",
							"    00574D97-8A98-454E-A879-9465A798CFE2,RefStaffSectionRole,microsoft.com,nurse,40,Nurse,True\r\n",
							"    6960C6A5-E850-4547-BF15-762A7260F7D9,RefStaffSectionRole,microsoft.com,occupationalTherapist,50,Occupational Therapist,True\r\n",
							"    F62E6FE1-DAC6-43D1-A6C9-EFB8429BA9C9,RefStaffSectionRole,microsoft.com,physicalTherapist,60,Physical Therapist,True\r\n",
							"    BD3A443E-778B-4B6F-85F7-D6B6E30D1795,RefStaffSectionRole,microsoft.com,speechTherapist,70,Speech Therapist,True\r\n",
							"    54970CC5-EE96-4A29-8A95-441109DEEBD0,RefStaffSectionRole,microsoft.com,visionTherapist,80,Vision,True\r\n",
							"    7690289D-A685-4886-B5A4-122544100B20,RefStaffSectionRole,microsoft.com,paraprofessional,90,Paraprofessional,True\r\n",
							"    C16353AD-902F-4CDC-86A5-30491A0612EA,RefStaffSectionRole,microsoft.com,teacherAssistant,100,Teacher Assistant,True\r\n",
							"    BBE8A650-B452-4B05-9CB6-D800F08A5E3C,RefStaffSectionRole,microsoft.com,staff,110,Staff,True\r\n",
							"    08DF30A4-DFF6-4EC9-8BDA-118F1B40FC4A,RefPersonGroupRole,microsoft.com,participant,10,Participant,True\r\n",
							"    632D8FC9-DEC5-420E-B8F4-D6CCFC3349F6,RefPersonGroupRole,microsoft.com,coach,20,Coach,True\r\n",
							"    E53285DE-8216-45C9-B0D0-3962883E425C,RefPersonGroupRole,microsoft.com,assistant,30,Assistant,True\r\n",
							"    353ABDDA-19D6-4008-8C56-506C65900782,RefGradeLevel,ceds.ed.gov,IT,10,Infant/Toddler,True\r\n",
							"    49EA747D-0A19-4EDF-BCFB-BB5F0166381F,RefGradeLevel,ceds.ed.gov,PR,20,Preschool,True\r\n",
							"    72B89395-E9E3-4564-8DAF-88AEA58AFED3,RefGradeLevel,ceds.ed.gov,PK,30,Prekindergarten,True\r\n",
							"    0CDED2E6-57B6-4A21-ABCC-1E3496DFB73E,RefGradeLevel,ceds.ed.gov,TK,40,Transitional Kindergarten,True\r\n",
							"    B1DA4920-25D6-4561-9221-ED4352F6B1B5,RefGradeLevel,ceds.ed.gov,KG,50,Kindergarten,True\r\n",
							"    6C0804DB-FF53-4CBB-88DC-BD00724A549E,RefGradeLevel,ceds.ed.gov,01,60,First grade,True\r\n",
							"    F81116C9-B37C-405F-A463-9E6279442376,RefGradeLevel,ceds.ed.gov,02,70,Second grade,True\r\n",
							"    E75F1B3A-3FFA-4E4D-8B55-6288F34FA491,RefGradeLevel,ceds.ed.gov,03,80,Third grade,True\r\n",
							"    5C9C9038-3E99-4EFD-9AF7-4B2C465D9ACA,RefGradeLevel,ceds.ed.gov,04,90,Fourth grade,True\r\n",
							"    490E900A-7629-47CD-B677-381718F9E2C4,RefGradeLevel,ceds.ed.gov,05,100,Fifth grade,True\r\n",
							"    DF413EB6-47E5-46DD-88AF-6478B2854D4A,RefGradeLevel,ceds.ed.gov,06,110,Sixth grade,True\r\n",
							"    6C2F76EA-5B22-4293-BA16-5216361AD233,RefGradeLevel,ceds.ed.gov,07,120,Seventh grade,True\r\n",
							"    B106D95C-CA5E-457E-B848-3A231917C34C,RefGradeLevel,ceds.ed.gov,08,130,Eighth grade,True\r\n",
							"    4429F333-536A-458F-AE87-FDF5471B5E8D,RefGradeLevel,ceds.ed.gov,09,140,Ninth grade,True\r\n",
							"    B6747F48-667B-4F0D-8438-9D1B180A3791,RefGradeLevel,ceds.ed.gov,10,150,Tenth grade,True\r\n",
							"    490702EA-9AC0-435E-AB8F-C1999BB0B393,RefGradeLevel,ceds.ed.gov,11,160,Eleventh grade,True\r\n",
							"    37DB651A-E2CC-4C16-8F52-27D4FA17B680,RefGradeLevel,ceds.ed.gov,12,170,Twelfth grade,True\r\n",
							"    8EDEF0A7-FE7A-48DD-A268-CA187E3986A5,RefGradeLevel,ceds.ed.gov,13,180,Grade 13,True\r\n",
							"    9C833058-4DA4-46D8-BB96-9A389105205E,RefGradeLevel,ceds.ed.gov,PS,190,Postsecondary,True\r\n",
							"    87DFDF97-B458-4F24-AD53-A1FEE4850309,RefGradeLevel,ceds.ed.gov,UG,200,Ungraded,True\r\n",
							"    7C0F1F97-101A-4E77-BC41-BAB1CC336733,RefGradeLevel,ceds.ed.gov,Other,210,Other,True\r\n",
							"    171E5E6E-4A6C-45B6-A185-1C8A63886B1C,RefRace,imsglobal.org,americanIndianOrAlaskaNative,10,American Indian or Alaska Native,True\r\n",
							"    49870DDA-FAD1-468E-B81A-103EB6ACC807,RefRace,imsglobal.org,asian,20,Asian,True\r\n",
							"    C417FFAF-9B5D-4809-9AD0-0CC88B334C1E,RefRace,imsglobal.org,blackOrAfricanAmerican,30,Black or African American,True\r\n",
							"    1DE06A27-C07B-4BA4-9228-B76CD70A6148,RefRace,imsglobal.org,nativeHawaiianOrOtherPacificIslander,40,Native Hawaiian or Other Pacific Islander,True\r\n",
							"    B953AE14-E0D1-47D3-B250-C72A8B0290DB,RefRace,imsglobal.org,white,50,White,True\r\n",
							"    547E761B-45D4-4A24-B1D7-814E4ABA35C2,RefEthnicity,imsglobal.org,hispanicOrLatinoEthnicity,10,Hispanic or Latino Ethnicity,True\r\n",
							"    08EAFC29-8F6D-4FF5-83A4-71B131D0E7DB,RefEnrollmentStatus,microsoft.com,ConcurrentlyEnrolled,10,Concurrently enrolled,True\r\n",
							"    F36F047A-F410-4761-B41F-17B952A8EAD4,RefEnrollmentStatus,microsoft.com,CurrentlyEnrolled,10,Currently enrolled,True\r\n",
							"    918F8FB7-D630-406F-BF04-62BF1255A148,RefEnrollmentStatus,microsoft.com,PreviouslyEnrolled,30,Previously enrolled,True\r\n",
							"    BEC33C7F-01C1-41EA-818F-FBFDAE867EB7,RefEnrollmentStatus,microsoft.com,Transferring,40,Transferring (will enroll),True\r\n",
							"    7DAF8820-6691-4D61-A210-CE94EA7D3667,RefIdentifierType,microsoft.com,ActiveDirectoryId,10,Active Directory Id,True\r\n",
							"    DB231C72-7C41-4A65-9A3D-49B9F6CD78C4,RefIdentifierType,microsoft.com,Fed,20,Federal Id,True\r\n",
							"    5D464768-0162-4B69-91CA-49F53AA0A474,RefIdentifierType,imsglobal.org,LTIId,30,LTI Id,True\r\n",
							"    450E6525-61A6-4BF6-A3D5-F95EB5CB1183,RefIdentifierType,imsglobal.org,username,40,Username (OneRoster),True\r\n",
							"    D787E8F6-4DD3-4C89-8293-CB3CDD0CC0A4,RefIdentifierType,imsglobal.org,identifier,50,Identifier (OneRoster),True\r\n",
							"    CEEF7E8E-E083-4048-B3C0-E7D1EE37A4E6,RefSectionType,imsglobal.org,homeroom,10,Homeroom,True\r\n",
							"    96669810-AB33-4B0F-92BE-6E2CC6F30EE9,RefSectionType,imsglobal.org,scheduled,20,Scheduled,True\r\n",
							"    E5F838D4-21C3-4932-850C-0BE7B169A85C,RefPublicSchoolResidenceStatus,ceds.ed.gov,01652,10,Resident of administrative unit and usual school attendance area.,True\r\n",
							"    901B2D88-967B-499B-91E8-9938CD03985F,RefPublicSchoolResidenceStatus,ceds.ed.gov,01653,20,\"Resident of administrative unit, but of other school attendance area.\",True\r\n",
							"    EFB677F4-D913-4A7E-A59D-8DD426CA7256,RefPublicSchoolResidenceStatus,ceds.ed.gov,01654,30,\"Resident of this state, but not of this administrative unit.\",True\r\n",
							"    3B5CBE72-809B-47C5-97BC-84EDF473CCFF,RefPublicSchoolResidenceStatus,ceds.ed.gov,01655,40,Resident of an administrative unit that crosses state boundaries.,True\r\n",
							"    C5BA9B59-F4A3-4506-BA0E-7F5967292D7A,RefPublicSchoolResidenceStatus,ceds.ed.gov,01656,50,Resident of another state.,True\r\n",
							"    BF84752E-4E3F-4B80-BED0-2DE4ABB355D5,RefRace,imsglobal.org,demographicRaceTwoOrMoreRaces,60,Designates multiple races,True\r\n",
							"    4B969AD4-3DF0-4C81-B586-E08DB2F89974,RefAcademicSubject,nces.ed.gov,01,10,English Language and Literature,True\r\n",
							"    DC5AE6F7-F7F7-4B0A-B838-C6A53947FC39,RefAcademicSubject,nces.ed.gov,02,20,Mathematics,True\r\n",
							"    3621BA8C-DA33-4230-AE29-7A69A674CAA1,RefAcademicSubject,nces.ed.gov,03,30,Life and Physical Sciences,True\r\n",
							"    3BCAA0B5-E890-4D44-9630-C2618FD8E872,RefAcademicSubject,nces.ed.gov,04,40,Social Sciences and History,True\r\n",
							"    DD70C99E-4863-4E76-BDC1-998CEE2E6075,RefAcademicSubject,nces.ed.gov,05,50,Visual and Performing Arts,True\r\n",
							"    0EFD2AC5-AA04-406D-BD9A-6C12602B4F44,RefAcademicSubject,nces.ed.gov,07,60,Religious Education and Theology,True\r\n",
							"    6ACD32DE-CF55-4D57-8058-BEADA9FA6745,RefAcademicSubject,nces.ed.gov,08,70,\"Physical, Health, and Safety Education\",True\r\n",
							"    FC6955CD-7355-41DC-A968-EE9BFBA51E19,RefAcademicSubject,nces.ed.gov,09,80,Military Science,True\r\n",
							"    5956FCAC-86B1-4110-B041-37569BD48E52,RefAcademicSubject,nces.ed.gov,10,90,Information Technology,True\r\n",
							"    B6EB7682-6A40-42E4-9963-AF9BB9890ECE,RefAcademicSubject,nces.ed.gov,11,100,Communication and Audio/Visual Technology,True\r\n",
							"    956A937F-A4EA-433D-9736-750E969745E5,RefAcademicSubject,nces.ed.gov,12,110,Business and Marketing,True\r\n",
							"    9F434285-9292-40F5-859D-715F1020AFFD,RefAcademicSubject,nces.ed.gov,13,120,Manufacturing,True\r\n",
							"    480A0424-CBE9-43B3-AF7F-F8BC3D11FECE,RefAcademicSubject,nces.ed.gov,14,130,Health Care Sciences,True\r\n",
							"    38BCFB35-1B7C-4E00-9F15-A9BB9347F7DE,RefAcademicSubject,nces.ed.gov,15,140,\"Public, Protective, and Government Service\",True\r\n",
							"    22A4D31A-E5A2-4C92-84B1-1E924547E083,RefAcademicSubject,nces.ed.gov,16,150,Hospitality and Tourism,True\r\n",
							"    49D3D99D-4AEE-4B59-B286-01978A458348,RefAcademicSubject,nces.ed.gov,17,160,Architecture and Construction,True\r\n",
							"    3690A6BE-5A9E-4D50-A97C-0368EA998A77,RefAcademicSubject,nces.ed.gov,18,170,\"Agriculture, Food, and Natural Resources\",True\r\n",
							"    2A52F377-0668-432C-BAB3-47669DDBFAA8,RefAcademicSubject,nces.ed.gov,19,180,Human Services,True\r\n",
							"    F183FE55-3189-4DA0-8FCF-8B027DD3FFD9,RefAcademicSubject,nces.ed.gov,20,190,\"Transportation, Distribution and Logistics\",True\r\n",
							"    2A7AC5E0-638E-4C56-A9B1-0EA0C4C068E8,RefAcademicSubject,nces.ed.gov,21,200,Engineering and Technology,True\r\n",
							"    B0095617-E1D0-4ADC-B07D-E96D06FFEEFB,RefAcademicSubject,nces.ed.gov,22,210,Miscellaneous,True\r\n",
							"    FC893BDD-3B3F-40F8-BD0E-921B4B7555D6,RefAcademicSubject,nces.ed.gov,23,220,Non-Subject-Specific,True\r\n",
							"    E937C1C2-398F-4DC2-A76A-0B39F3441311,RefAcademicSubject,nces.ed.gov,24,230,World Languages,True\r\n",
							"    F4DF5BDD-6698-4BB9-BC06-AA91325DDB3B,RefOrgType,microsoft.com,municipality,130,Municipality,True\r\n",
							"    8180C51D-59D8-42F5-B283-5F73CCDFE71E,RefOrgType,microsoft.com,academicTrust,140,Academic Trust,True\r\n",
							"    AB328F3A-329D-46B2-89FE-04558D5F3C17,RefOrgType,microsoft.com,localAuthority,150,Local Authority,True\r\n",
							"    A8AAFD43-8EC5-4E23-B4E4-F5FEBCD4EB23,RefOrgType,microsoft.com,region,160,Region,True\r\n",
							"    2432F831-58B0-4418-89DA-3AFB83CAA406,RefOrgType,microsoft.com,division,170,Division,True\r\n",
							"    E5F64566-42B1-4170-91ED-9095A7AABDF8,RefOrgType,microsoft.com,province,180,Province,True\r\n",
							"    A7B552AB-5FEE-4106-A82A-B104AD802243,RefOrgType,microsoft.com,researchCenter,190,Research Center,True\r\n",
							"    4A7A8BDF-CE07-4CF2-A774-061EE8814FB9,RefOrgType,microsoft.com,program,200,Program,True\r\n",
							"    BBDFDE11-F33A-4552-B070-0FEF5786E08F,RefStaffOrgRole,microsoft.com,professor,150,professor,True\r\n",
							"    23CD21F1-9932-4EED-BD5C-EE99A6C57B31,RefStaffOrgRole,microsoft.com,researcher,160,researcher,True\r\n",
							"    2A92CC07-161E-497D-8807-249F6A20948F,RefStaffOrgRole,microsoft.com,lecturer,170,lecturer,True\r\n",
							"    11DE2FAC-CAB6-4726-9462-1C3D91091429,RefStaffOrgRole,microsoft.com,affiliate,180,affiliate,True\r\n",
							"    DB0D832C-AA17-4F43-AB2B-92562DF9EF11,RefStaffOrgRole,microsoft.com,adjunct,190,adjunct,True\r\n",
							"    865BC785-449E-4F0C-A72B-3F8553D83F8A,RefStaffOrgRole,microsoft.com,alumni,200,alumni,True\r\n",
							"    845C489B-2A41-4A8E-B118-3080AD568418,RefStaffOrgRole,microsoft.com,instructor,210,instructor,True\r\n",
							"    75A1395F-CD88-4362-BE34-0AB54235F24C,RefStaffOrgRole,microsoft.com,chair,220,chair,True\r\n",
							"    583A3E66-878F-44E7-BBA3-1146C1BC5B2B,RefStaffOrgRole,microsoft.com,advisor,230,advisor,True\r\n",
							"    4D023BD0-FB4B-40D4-9C66-5995B1A765A6,RefStaffOrgRole,microsoft.com,faculty,240,faculty,True\r\n",
							"    0639C0E4-D351-42EF-92B4-8BD1CF27CA41,RefStaffOrgRole,microsoft.com,substitute,250,substitute,True\r\n",
							"    68294947-AA84-4D64-A9A3-16CBB1187E21,RefStaffOrgRole,microsoft.com,principal,260,principal,True\r\n",
							"    9D95BE64-81F1-49FA-8CC8-A93DD49B218F,RefStaffOrgRole,microsoft.com,specialServices,270,Special services,True\r\n",
							"    75A382BB-904C-461D-BE61-EDC0516B39D6,RefStaffSectionRole,microsoft.com,professor,120,professor,True\r\n",
							"    5742E90C-3600-4026-B014-3E0FFA5AC64C,RefStaffSectionRole,microsoft.com,researcher,130,researcher,True\r\n",
							"    08913527-F988-46E5-861A-A9C64A598CB5,RefStaffSectionRole,microsoft.com,lecturer,140,lecturer,True\r\n",
							"    8D939A14-7077-4A4A-88B5-ADB3C251BF17,RefStaffSectionRole,microsoft.com,affiliate,150,affiliate,True\r\n",
							"    6482B3B0-5A5C-4A32-820A-1749B323F9A9,RefStaffSectionRole,microsoft.com,adjunct,160,adjunct,True\r\n",
							"    65FB1E06-4E0C-4D69-8281-B1DD664FDF02,RefStaffSectionRole,microsoft.com,instructor,170,instructor,True\r\n",
							"    FDA194DD-3EBA-48AE-8ACE-83CE0A59C647,RefStaffSectionRole,microsoft.com,advisor,180,advisor,True\r\n",
							"    9C15F8C6-4287-4AF2-97C4-9A8AD1BE331E,RefStaffSectionRole,microsoft.com,faculty,190,faculty,True\r\n",
							"    75F91BF4-9816-4F36-8EC3-07EED1EE246E,RefStaffSectionRole,microsoft.com,substitute,200,substitute,True\r\n",
							"    15B67274-8286-4874-818B-AA361785B72D,RefStaffSectionRole,microsoft.com,principal,210,principal,True\r\n",
							"    6818DAAB-EBC6-4E3D-8DDE-2872F056F4B4,RefStaffSectionRole,microsoft.com,specialServices,220,Special services,True\r\n",
							"    9D829C49-EF4F-482C-AC37-10974F500889,RefGradeLevel,microsoft.com,PS1,220,Postsecondary freshman,True\r\n",
							"    72C52CC1-09B0-4F83-822C-3E6B41373250,RefGradeLevel,microsoft.com,PS2,230,Postsecondary sophomore,True\r\n",
							"    82C10216-45D1-4754-9B65-91906F220D97,RefGradeLevel,microsoft.com,PS3,240,Postsecondary junior,True\r\n",
							"    941D916E-900F-4AAE-862A-A37203ABB1CB,RefGradeLevel,microsoft.com,PS4,250,Postsecondary senior,True\r\n",
							"    85149F2C-769C-40CE-9CC8-A8F999291899,RefGradeLevel,microsoft.com,undergraduate,260,undergraduate,True\r\n",
							"    85CF8FA2-B882-4B58-8886-6AE741C4F5C7,RefGradeLevel,microsoft.com,graduate,270,graduate,True\r\n",
							"    3C9654D0-496E-421B-AC5B-41AF7A35EE7A,RefGradeLevel,microsoft.com,postgraduate,280,Graduate with an emphasis on research,True\r\n",
							"    CFEAC234-B304-49C4-B814-5448AC3A8FFD,RefGradeLevel,microsoft.com,alumni,290,alumni,True\r\n",
							"    BC7BD092-C3C1-4FAC-B82B-3D074DF4C832,RefGradeLevel,microsoft.com,adultEducation,300,Adult Education,True\"\"\""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MSInsightsDataGenerator')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d21c6490-fbbb-4046-a33b-94e3383a530e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import csv\r\n",
							"import os\r\n",
							"import shutil\r\n",
							"import random\r\n",
							"import math\r\n",
							"from faker import Faker\r\n",
							"\r\n",
							"SUBJECTS = ['Math - Algebra', 'Math - Geometry', 'English Language', 'History - World History',\r\n",
							"            'Science Biology', 'Health', 'Technology - Programming', 'Physical Education', 'Art', 'Music']\r\n",
							"SCHOOL_TYPES = ['High', 'High', 'High']\r\n",
							"\r\n",
							"\r\n",
							"class MSInsightsDataGenerator:\r\n",
							"    \"\"\" This is a starting point for the data generator for the new MS Insights roster and activity format.\r\n",
							"        todo: Note that a fair amount of work is left for this to generate data that aligns with the new roster \r\n",
							"        format as defined in the roster.v0.3.2.cdm.json spec, and the activity format as defined in activity.v0.1.0.cdm.json\r\n",
							"    \"\"\"\r\n",
							"    def __init__(self, activity_min_per_person=5, activity_max_per_person=20, students_per_school=100, classes_in_student_schedule=6, students_per_section=25, student_teacher_ratio=9, include_optional_fields=True,\r\n",
							"                 fall_semester_start_date='2021-08-15', fall_semester_end_date='2021-12-15', spring_semester_start_date='2022-01-10', spring_semester_end_date='2022-05-10'):\r\n",
							"        # Set a seed value in Faker so it generates the same values every time it's run\r\n",
							"        self.faker = Faker('en_US')\r\n",
							"        Faker.seed(1)\r\n",
							"\r\n",
							"        self.activity_min_per_person = activity_min_per_person\r\n",
							"        self.activity_max_per_person = activity_max_per_person\r\n",
							"        self.students_per_school = students_per_school\r\n",
							"        self.classes_in_student_schedule = classes_in_student_schedule\r\n",
							"        self.students_per_section = students_per_section\r\n",
							"        self.student_teacher_ratio = student_teacher_ratio\r\n",
							"        self.include_optional = include_optional_fields\r\n",
							"        self.fall_semester_start_date = fall_semester_start_date\r\n",
							"        self.fall_semester_end_date = fall_semester_end_date\r\n",
							"        self.spring_semester_start_date = spring_semester_start_date\r\n",
							"        self.spring_semester_end_date = spring_semester_end_date\r\n",
							"        self.school_year = '2021'\r\n",
							"\r\n",
							"        self.teachers_per_school = math.ceil(self.students_per_school/self.student_teacher_ratio)\r\n",
							"        self.section_id = 1\r\n",
							"        self.student_id = 1\r\n",
							"        self.teacher_id = 1\r\n",
							"        self.course_id = 1\r\n",
							"        self.school_id = 1\r\n",
							"        self.term_id = 1\r\n",
							"        self.domain = '@Classrmtest86.org'\r\n",
							"\r\n",
							"    def generate_data(self, num_of_schools, writer):\r\n",
							"        schools = ''\r\n",
							"\r\n",
							"        for n in range(num_of_schools):\r\n",
							"            school_data = self.create_school(n)\r\n",
							"            m365_data = self.format_m365_data(school_data)\r\n",
							"            schools += m365_data.pop('Org')\r\n",
							"            for key in m365_data.keys(): \r\n",
							"                writer.write(f\"M365/roster/2021-07-12/{key}/part-00000-71379e08-1ce0-425f-9447-775b0dc134f1-example.csv\", m365_data[key])\r\n",
							"            # Create empty files to reflect the empty files we currently get from MS Insights\r\n",
							"            empty_files_to_create = ['AadGroup', 'AadGroupMembership', 'AadUserPersonMapping', 'CourseGradeLevel', 'CourseSubject', ]\r\n",
							"            for entity in empty_files_to_create:\r\n",
							"                path_and_filename = f\"M365/roster/2021-07-12/{entity}/part-00000-71379e08-1ce0-425f-9447-775b0dc134f1-example.csv\"\r\n",
							"                writer.write(path_and_filename, '')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"            writer.write('contoso_sis/attendance.csv', school_data.pop('_attendance'))\r\n",
							"            writer.write('contoso_sis/section_marks.csv', school_data.pop('_section_marks'))\r\n",
							"            writer.write('contoso_sis/students.csv', self.list_of_dict_to_csv(school_data['_students']))\r\n",
							"\r\n",
							"            self.create_and_write_activity_data(school_data['_students'], 'M365/activity/2021-07-12/ApplicationUsage.Part001.csv', writer)\r\n",
							"            self.create_and_write_activity_data(school_data['_teachers'], 'M365/activity/2021-07-12/ApplicationUsage.Part002.csv', writer)\r\n",
							"\r\n",
							"        writer.write('m365/Org.csv', schools)\r\n",
							"\r\n",
							"    def create_school(self, school_id):\r\n",
							"        school_id = 'sch' + str(school_id)\r\n",
							"        fname = self.faker.first_name()\r\n",
							"        lname = self.faker.last_name()\r\n",
							"        school = {\r\n",
							"            'SIS ID': school_id,\r\n",
							"            'Name': self.get_fake_school_name(),\r\n",
							"            'School Number': school_id if self.include_optional else '',\r\n",
							"            'School NCES_ID': school_id if self.include_optional else '',\r\n",
							"            'Grade Low': '9' if self.include_optional else '',\r\n",
							"            'Grade High': '12' if self.include_optional else '',\r\n",
							"            'State ID': school_id if self.include_optional else '',\r\n",
							"            'Principal SIS ID': '02100' if self.include_optional else '',\r\n",
							"            'Principal Name': f\"{fname} {lname}\" if self.include_optional else '',\r\n",
							"            'Principal Secondary Email': f\"{fname.lower()}.{lname.lower()}{self.domain}\" if self.include_optional else '',\r\n",
							"            'Address': self.faker.building_number() if self.include_optional else '',\r\n",
							"            'City': self.faker.city() if self.include_optional else '',\r\n",
							"            'State': 'WA' if self.include_optional else '',\r\n",
							"            'Zip': '98074' if self.include_optional else '',\r\n",
							"            'Country': 'US' if self.include_optional else '',\r\n",
							"            'Phone': self.faker.phone_number() if self.include_optional else '',\r\n",
							"            'Zone': '1' if self.include_optional else '',\r\n",
							"        }\r\n",
							"\r\n",
							"        school['_calendar'] = {'Id': f'edp_cal{school_id}',\r\n",
							"                            'Name': f'{self.school_year} Calendar',\r\n",
							"                            'Description': f'calendar for {self.school_year}',\r\n",
							"                            'SchoolYear': self.school_year,\r\n",
							"                            'IsCurrent': 'True',\r\n",
							"                            'ExternalId': f'cal{school_id}',\r\n",
							"                            'CreateDate': '8/13/2020 10:36:44 AM',\r\n",
							"                            'LastModifiedDate': '8/15/2020 11:36:00 PM',\r\n",
							"                            'IsActive': 'True',\r\n",
							"                            'OrgId': f'edp_{school_id}'\r\n",
							"                            }\r\n",
							"        school['_students'] = self.create_students(school['SIS ID'])\r\n",
							"        school['_teachers'] = self.create_teachers(school['SIS ID'])\r\n",
							"        school['_courses'] = self.create_courses(school['_calendar']['Id'])\r\n",
							"        school['_terms'] = self.create_terms(school['_calendar']['Id'])\r\n",
							"        for term in school['_terms']:\r\n",
							"            self.create_sections(term, school['SIS ID'], school['_courses'])\r\n",
							"\r\n",
							"        self.add_student_data(school) # adds student_section_membership, attendance, section_marks\r\n",
							"        self.add_teacher_data(school) # staff_section_membership\r\n",
							"\r\n",
							"        return school\r\n",
							"\r\n",
							"    def format_m365_data(self, school):\r\n",
							"        ref_aad_id = '7DAF8820-6691-4D61-A210-CE94EA7D3667'\r\n",
							"        ref_upn_id = '450E6525-61A6-4BF6-A3D5-F95EB5CB1183'\r\n",
							"        parent_org_id = 'sch0'\r\n",
							"        ref_org_type_district = '1198ADF7-3DA7-4DA6-A8CB-6FC3313C063C'\r\n",
							"        ref_org_type_school = '0AA7E195-1576-440B-817C-BCCA6949E2ED'\r\n",
							"        ref_student_org_role = '0D16FCED-6DC7-4235-90BF-724D40ABC7BD'\r\n",
							"        ref_staff_org_role = '03FFC8C5-9C64-4321-8041-334F07A252F0'\r\n",
							"        ref_enrollment_status = 'F36F047A-F410-4761-B41F-17B952A8EAD4'\r\n",
							"        ref_section_type = '96669810-AB33-4B0F-92BE-6E2CC6F30EE9'\r\n",
							"        ref_session_type = '1C69DBD1-5CDA-44B2-AEAA-510F9D5DA98D'\r\n",
							"        source_system_id = 'edp_SIS1'\r\n",
							"        datetime_str = \"8/13/2020 10:09:43 AM\"        \r\n",
							"\r\n",
							"        m365_data = {}\r\n",
							"        m365_data['RefDefinition'] = REF_DEFINITION_CSV\r\n",
							"        #m365_data['Calendar'] = self.obj_to_csv(school['_calendar']) + \"\\n\"\r\n",
							"        m365_data['Org'] = f\"edp_{school['SIS ID']},{school['Name']},{school['School Number']},{school['SIS ID']},{datetime_str},{datetime_str},True,edp_{parent_org_id},{ref_org_type_school},{source_system_id}\\n\"\r\n",
							"        m365_data['StudentSectionMembership'] = school['_student_section_membership']\r\n",
							"        m365_data['StaffSectionMembership'] = school['_staff_section_membership']\r\n",
							"\r\n",
							"        m365_data['Person'] = ''\r\n",
							"        m365_data['StudentOrgAffiliation'] = ''\r\n",
							"        m365_data['StaffOrgAffiliation'] = ''\r\n",
							"        m365_data['PersonIdentifier'] = ''\r\n",
							"        m365_data['Section'] = ''\r\n",
							"        m365_data['Session'] = ''\r\n",
							"        m365_data['Course'] = ''\r\n",
							"\r\n",
							"        for student in school['_students']:\r\n",
							"            m365_data['StudentOrgAffiliation'] += f\"edp_oa_{student['SIS ID']},True,,,oa_{student['SIS ID']},{datetime_str},{datetime_str},True,edp_{school['SIS ID']},edp_{student['SIS ID']},{self.get_grade_ref(student['Grade'])},{ref_student_org_role},{ref_enrollment_status}\\n\"\r\n",
							"            m365_data['Person'] += f\"edp_{student['SIS ID']},{student['First Name']},{student['Middle Name']},{student['Last Name']},,,True,{student['SIS ID']},{datetime_str},{datetime_str},True,{source_system_id}\\n\"\r\n",
							"            m365_data['PersonIdentifier'] += f\"edp_pi1_{student['SIS ID']},{student['_upn']},,{ref_upn_id},pi1_{student['SIS ID']},{datetime_str},{datetime_str},True,edp_{student['SIS ID']},{source_system_id}\\n\"\r\n",
							"            m365_data['PersonIdentifier'] += f\"edp_pi2_{student['SIS ID']},{student['_aad']},,{ref_aad_id},pi2_{student['SIS ID']},{datetime_str},{datetime_str},True,edp_{student['SIS ID']},{source_system_id}\\n\"\r\n",
							"        for teacher in school['_teachers']:\r\n",
							"            m365_data['StaffOrgAffiliation'] += f\"edp_oa_{teacher['SIS ID']},True,,,oa_{teacher['SIS ID']},{datetime_str},{datetime_str},True,edp_{school['SIS ID']},edp_{teacher['SIS ID']},,{ref_staff_org_role}\\n\"\r\n",
							"            m365_data['Person'] += f\"edp_{teacher['SIS ID']},{teacher['First Name']},{teacher['Middle Name']},{teacher['Last Name']},,,True,{teacher['SIS ID']},{datetime_str},{datetime_str},True,{source_system_id}\\n\"\r\n",
							"            m365_data['PersonIdentifier'] += f\"edp_pi1_{teacher['SIS ID']},{teacher['_upn']},,{ref_upn_id},pi1_{teacher['SIS ID']},{datetime_str},{datetime_str},True,edp_{teacher['SIS ID']},{source_system_id}\\n\"\r\n",
							"            m365_data['PersonIdentifier'] += f\"edp_pi2_{teacher['SIS ID']},{teacher['_aad']},,{ref_aad_id},pi2_{teacher['SIS ID']},{datetime_str},{datetime_str},True,edp_{teacher['SIS ID']},{source_system_id}\\n\"\r\n",
							"        for term in school['_terms']:\r\n",
							"        # todo: need to convert the term startdate and enddate to be the format that is expected to be coming from EDP (rather than the format used for sds)\r\n",
							"            m365_data['Session'] += f\"edp_{term['Term SIS ID']},{term['Term Name']},{term['Term StartDate']},{term['Term EndDate']},{term['Term SIS ID']},8/13/2020 10:36:44 AM,8/15/2020 11:36:00 PM,True,{term['_calendar_id']},,{ref_session_type}\\n\"\r\n",
							"        for section in term['_sections']:\r\n",
							"            m365_data['Section'] += f\"edp_{section['SIS ID']},{section['Section Name']},{section['Section Number']},,{section['SIS ID']},{datetime_str},{datetime_str},True,edp_{section['Course SIS ID']},{ref_section_type},edp_{section['Term SIS ID']},edp_{section['School SIS ID']}\\n\"\r\n",
							"        for course in school['_courses']:\r\n",
							"        # columns for DIP csv are: Id,Name,Code,Description,ExternalId,CreateDate,LastModifiedDate,IsActive,CalendarId\r\n",
							"            m365_data['Course'] += f\"edp_{course['Course SIS ID']},{course['Course Name']},{course['Course Number']},{course['Course Description']},{course['Course SIS ID']},8/13/2020 10:36:44 AM,8/15/2020 11:36:00 PM,True,{course['_calendar_id']}\\n\"\r\n",
							"\r\n",
							"        return m365_data\r\n",
							"\r\n",
							"    def create_terms(self, calendar_id):\r\n",
							"        terms = []\r\n",
							"        terms.append({\r\n",
							"            'Term SIS ID': 'term' + str(self.term_id),\r\n",
							"            'Term Name': 'Fall Semester',\r\n",
							"            'Term StartDate': '9/1/2019',\r\n",
							"            'Term EndDate': '12/22/2019',\r\n",
							"            '_sections': [],\r\n",
							"            # this is an array of arrays representing the sections and the spots (available seats) within each section\r\n",
							"            '_section_spots': [],\r\n",
							"            '_calendar_id': calendar_id\r\n",
							"        })\r\n",
							"        self.term_id += 1\r\n",
							"        terms.append({\r\n",
							"            'Term SIS ID': 'term' + str(self.term_id),\r\n",
							"            'Term Name': 'Spring Semester',\r\n",
							"            'Term StartDate': '1/21/2020',\r\n",
							"            'Term EndDate': '5/30/2020',\r\n",
							"            '_sections': [],\r\n",
							"            '_section_spots': [],\r\n",
							"            '_calendar_id': calendar_id\r\n",
							"        })\r\n",
							"        self.term_id += 1\r\n",
							"        return terms\r\n",
							"\r\n",
							"    def create_courses(self, calendar_id):\r\n",
							"        courses = []\r\n",
							"        for subject in SUBJECTS:\r\n",
							"            courses.append({\r\n",
							"                'Course SIS ID': 'course' + str(self.course_id),\r\n",
							"                'Course Name': subject,\r\n",
							"                'Course Number': str(self.course_id),\r\n",
							"                'Course Description': \"Instruction covering \" + subject,\r\n",
							"                'Course Subject': subject,\r\n",
							"                '_calendar_id': calendar_id\r\n",
							"            })\r\n",
							"            self.course_id += 1\r\n",
							"        return courses\r\n",
							"\r\n",
							"    def create_students(self, school_id):\r\n",
							"        students = []\r\n",
							"        gender = random.choice(['Male', 'Female'])\r\n",
							"        if gender == 'Male': fname = self.faker.first_name_male()\r\n",
							"        else: fname = self.faker.first_name_female()\r\n",
							"\r\n",
							"        for n in range(self.students_per_school):\r\n",
							"            fname = self.faker.first_name()\r\n",
							"            lname = self.faker.last_name()\r\n",
							"            email = f\"{fname.lower()}{lname.lower()}{self.student_id}{self.domain}\"\r\n",
							"            students.append({\r\n",
							"                'SIS ID': 'st' + str(self.student_id),\r\n",
							"                'School SIS ID': school_id,\r\n",
							"                'Username': f\"{fname.lower()}{lname.lower()}{self.student_id}\",\r\n",
							"                'Password': self.faker.password() if self.include_optional else '',\r\n",
							"                'First Name': fname,\r\n",
							"                'Last Name': lname,\r\n",
							"                'Middle Name': self.faker.first_name() if self.include_optional else '',\r\n",
							"                'Secondary Email': email if self.include_optional else '',\r\n",
							"                'Student Number': str(self.student_id) if self.include_optional else '',\r\n",
							"                'Grade': random.choice(['9', '10', '11', '12']) if self.include_optional else '',\r\n",
							"                'State ID': '123' if self.include_optional else '',\r\n",
							"                'Status': 'Active' if self.include_optional else '',\r\n",
							"                'Birthdate': '4/2/2004' if self.include_optional else '',\r\n",
							"                'Graduation Year': '2020' if self.include_optional else '',\r\n",
							"                'Gender': gender,\r\n",
							"                'FederalRaceCategory': random.choice(['Asian', 'Black', 'White', 'Hispanic', 'American Indian']),\r\n",
							"                'PrimaryLanguage': random.choices(['English', 'Spanish', 'German', 'French', 'Japanese'], weights=(85, 10, 2, 2, 1))[0],\r\n",
							"                'ELLStatus': random.choices(['', 'English Learner', 'Initially Fluent English Proficient', 'Redesignated Fluent English Proficient'], weights=(80, 10, 5, 5))[0],\r\n",
							"                'SpecialEducation': random.choices(['', 'Designated Instruction Service', 'Resource Specialty Program', 'Special Day Class'], weights=(80, 10, 5, 5))[0],\r\n",
							"                'LowIncome': random.choices([0, 1], weights=(60, 40))[0],\r\n",
							"                'CumulativeGPA': random.choice([0.523, 0.423, 1.13, 2.63, 2.33, 3.33, 4.0]),                \r\n",
							"                '_role': 'Student',\r\n",
							"                '_section_ids': [],\r\n",
							"                '_upn': email,\r\n",
							"                '_aad': self.faker.uuid4()\r\n",
							"            })\r\n",
							"            self.student_id += 1\r\n",
							"        return students\r\n",
							"\r\n",
							"    def create_teachers(self, school_id):\r\n",
							"        teachers = []\r\n",
							"        for n in range(self.teachers_per_school):\r\n",
							"            fname = self.faker.first_name()\r\n",
							"            lname = self.faker.last_name()\r\n",
							"            email = f\"{fname.lower()}{lname.lower()}{self.teacher_id}{self.domain}\"\r\n",
							"            teachers.append({\r\n",
							"                'SIS ID': 't' + str(self.teacher_id),\r\n",
							"                'School SIS ID': school_id,\r\n",
							"                'Username': f\"{fname.lower()}{lname.lower()}{self.teacher_id}\",\r\n",
							"                'Password': self.faker.password() if self.include_optional else '',\r\n",
							"                'First Name': fname,\r\n",
							"                'Last Name': lname,\r\n",
							"                'Middle Name': self.faker.first_name() if self.include_optional else '',\r\n",
							"                'Secondary Email': email if self.include_optional else '',\r\n",
							"                'Teacher Number': str(self.teacher_id) if self.include_optional else '',\r\n",
							"                'State ID': '123' if self.include_optional else '',\r\n",
							"                'Status': 'Active' if self.include_optional else '',\r\n",
							"                'Title': 'Teacher' if self.include_optional else '',\r\n",
							"                'Qualification': 'EdLD' if self.include_optional else '',\r\n",
							"                '_role': 'Teacher',\r\n",
							"                '_section_ids': [],\r\n",
							"                '_upn': email,\r\n",
							"                '_aad': self.faker.uuid4()\r\n",
							"            })\r\n",
							"            self.teacher_id += 1\r\n",
							"        return teachers\r\n",
							"\r\n",
							"    def create_sections(self, term, school_id, courses):\r\n",
							"        spots_needed = self.students_per_school * self.classes_in_student_schedule\r\n",
							"        # determine the number of sections needed\r\n",
							"        sections_needed = math.ceil(spots_needed / self.students_per_section) + 1\r\n",
							"        for n in range(sections_needed):\r\n",
							"            course = random.choice(courses)\r\n",
							"            term['_sections'].append({\r\n",
							"                'SIS ID': 'sec' + str(self.section_id),\r\n",
							"                'School SIS ID': school_id,\r\n",
							"                'Section Name': course['Course Subject'] + \" \" + str(self.section_id),\r\n",
							"                'Section Number': str(self.section_id) if self.include_optional else '',\r\n",
							"                'Term SIS ID': term['Term SIS ID'] if self.include_optional else '',\r\n",
							"                'Term Name': term['Term Name'] if self.include_optional else '',\r\n",
							"                'Term StartDate': term['Term StartDate'] if self.include_optional else '',\r\n",
							"                'Term EndDate': term['Term EndDate'] if self.include_optional else '',\r\n",
							"                'Course SIS ID': course['Course SIS ID'] if self.include_optional else '',\r\n",
							"                'Course Name': course['Course Name'] if self.include_optional else '',\r\n",
							"                'Course Number': course['Course Number'] if self.include_optional else '',\r\n",
							"                'Course Description': course['Course Description'] if self.include_optional else '',\r\n",
							"                'Course Subject': course['Course Subject'] if self.include_optional else '',\r\n",
							"                'Periods': '2' if self.include_optional else '',\r\n",
							"                'Status': 'Active' if self.include_optional else ''\r\n",
							"            })\r\n",
							"            # add section spots\r\n",
							"            spots = []\r\n",
							"            for i in range(self.students_per_section):\r\n",
							"                spots.append('sec' + str(self.section_id))\r\n",
							"            term['_section_spots'].append(spots)\r\n",
							"            self.section_id += 1\r\n",
							"\r\n",
							"    def get_grade_ref(self, grade_str):\r\n",
							"        if grade_str == '9': return '4429F333-536A-458F-AE87-FDF5471B5E8D'\r\n",
							"        elif grade_str == '10': return 'B6747F48-667B-4F0D-8438-9D1B180A3791'\r\n",
							"        elif grade_str == '11': return '490702EA-9AC0-435E-AB8F-C1999BB0B393'\r\n",
							"        else: return '37DB651A-E2CC-4C16-8F52-27D4FA17B680'\r\n",
							"\r\n",
							"    def add_student_data(self, school):\r\n",
							"        ref_student_section_role = 'D1CA502E-DB62-41D2-B438-AC669E6A9663'\r\n",
							"        datetime_str = \"8/13/2020 10:09:43 AM\"\r\n",
							"        mark_id = 1\r\n",
							"        school['_student_section_membership'] = ''\r\n",
							"        school['_attendance'] = ''\r\n",
							"        school['_section_marks'] = ''\r\n",
							"\r\n",
							"        for student in school['_students']:\r\n",
							"            for term in school['_terms']:\r\n",
							"                num_enrollments = 0\r\n",
							"                for section_spots in term['_section_spots']:\r\n",
							"                    if(len(section_spots) == 0): \r\n",
							"                        continue\r\n",
							"                    else:\r\n",
							"                        spot_taken = section_spots.pop()\r\n",
							"                        student['_section_ids'].append(spot_taken)\r\n",
							"                        school['_student_section_membership'] += f\"edp_ssm_{student['SIS ID']},,,ssm_{student['SIS ID']},{datetime_str},{datetime_str},True,edp_{student['SIS ID']},,{ref_student_section_role},edp_{spot_taken}\\n\"\r\n",
							"                        num_enrollments += 1\r\n",
							"                        school['_attendance'] += f\"att_{student['SIS ID']},{student['SIS ID']},{self.school_year},{school['SIS ID']},8/15/2020,No,1,{spot_taken},P,1,Present,ClassSectionAttendance,0\\n\"\r\n",
							"                        grade = self.get_random_grade()\r\n",
							"                        credits_earned = 5\r\n",
							"                        if grade[1] == 'F': credits_earned = 0\r\n",
							"                        school['_section_marks'] += f\"m{mark_id},{student['SIS ID']},{spot_taken},,{term['Term SIS ID']},{grade[0]},{grade[1]},No,5,{credits_earned},\\n\"\r\n",
							"                        mark_id += 1\r\n",
							"                    if (num_enrollments >= self.classes_in_student_schedule): break        \r\n",
							"\r\n",
							"    def add_teacher_data(self, school):\r\n",
							"        ref_staff_section_role = 'C943E793-2DB7-47C0-B187-A9ED65EEBD5B'\r\n",
							"        datetime_str = \"8/13/2020 10:09:43 AM\"\r\n",
							"        school['_staff_section_membership'] = ''\r\n",
							"        for term in school['_terms']:\r\n",
							"            teacher_index = 0\r\n",
							"            for section in term['_sections']:\r\n",
							"                teacher = school['_teachers'][teacher_index]\r\n",
							"                teacher['_section_ids'].append(section['SIS ID'])\r\n",
							"                school['_staff_section_membership'] += f\"edp_ssm_{teacher['SIS ID']},True,,,ssm_{teacher['SIS ID']},{datetime_str},{datetime_str},True,edp_{teacher['SIS ID']},{ref_staff_section_role},edp_{section['SIS ID']}\\n\"\r\n",
							"                teacher_index += 1\r\n",
							"                if (teacher_index == len(school['_teachers'])):\r\n",
							"                    teacher_index = 0  # start over from the beginning of the list of teachers\r\n",
							"\r\n",
							"    def create_and_write_activity_data(self, people, path_and_filename, writer):\r\n",
							"        signal_id_counter = 100\r\n",
							"        signal_types = ['VisitTeamChannel', 'ReactedWithEmoji', 'PostChannelMessage', 'ReplyChannelMessage', 'ExpandChannelMessage', 'CallRecordSummarized', 'FileAccessed', 'FileDownloaded',\r\n",
							"                        'FileModified', 'FileUploaded', 'ShareNotificationRequested', 'CommentCreated', 'UserAtMentioned', 'AddedToSharedWithMe', 'CommentDeleted', 'Unlike']\r\n",
							"        agents = ['', '\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36 Edg/88.0.705.74\"', '\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Teams/1.3.00.34662 Chrome/80.0.3987.165 Electron/8.5.1 Safari/537.36\"',\r\n",
							"                '\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36\"', '\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0\"']\r\n",
							"        applications = ['Other apps', 'Teams', 'PowerPoint', 'Excel', 'PDF viewers', 'Media apps', 'Image apps', 'Word']\r\n",
							"        learning_activities = ['Communications', 'Assignments', 'Meetings']\r\n",
							"\r\n",
							"        # activity_csv.write('SignalType,StartTime,UserAgent,SignalId,SISClassId,OfficeClassId,ChannelId,AppName,ActorId,ActorRole,SchemaVersion,AssignmentId,SubmissionId,Action,AssginmentDueDate,ClassCreationDate,Grade,SourceFileExtension,MeetingDuration')\r\n",
							"        num_of_entries_for_person = self.faker.pyint(min_value=self.activity_min_per_person, max_value=self.activity_max_per_person)\r\n",
							"        for i in range(num_of_entries_for_person):\r\n",
							"            for person in people:\r\n",
							"                signal_type = random.choice(signal_types)\r\n",
							"                start_time = f\"{self.faker.date_time_between(start_date='-60d', end_date='now', tzinfo=None)}.0000000\"\r\n",
							"                agent = random.choice(agents)\r\n",
							"                signal_id = self.faker.uuid4()\r\n",
							"                sis_class_id = random.choice(person['_section_ids'])\r\n",
							"                office_class_id = f\"office_id_{sis_class_id}\"\r\n",
							"                if signal_type == 'CallRecordSummarized':\r\n",
							"                    channel_id = f\"channel_{office_class_id}\"\r\n",
							"                else:\r\n",
							"                    channel_id = ''\r\n",
							"                app_name = random.choice(applications)\r\n",
							"                actor_id = person['_aad']\r\n",
							"                actor_role = person['_role']\r\n",
							"                schema_version = '1.06'\r\n",
							"                assignmentId = ''\r\n",
							"                submissionId = ''\r\n",
							"                action = ''\r\n",
							"                assginment_due_date = ''\r\n",
							"                class_creation_date = ''\r\n",
							"                grade = ''\r\n",
							"                source_file_extension = ''\r\n",
							"\r\n",
							"                hours = self.faker.pyint(min_value=0, max_value=23)\r\n",
							"                minutes = self.faker.pyint(min_value=0, max_value=59)\r\n",
							"                meeting_duration = f'00:{hours:02}:{minutes:02}'\r\n",
							"\r\n",
							"                # SignalType,StartTime,UserAgent,SignalId,SISClassId,OfficeClassId,ChannelId,AppName,ActorId,ActorRole,SchemaVersion,AssignmentId,SubmissionId,Action,AssginmentDueDate,ClassCreationDate,Grade,SourceFileExtension,MeetingDuration\r\n",
							"                writer.write(path_and_filename, f\"{signal_type},{start_time},{agent},{signal_id},{sis_class_id},{office_class_id},{channel_id},{app_name},{actor_id},{actor_role},{schema_version},{assignmentId},{submissionId},{action},{assginment_due_date},{class_creation_date},{grade},{source_file_extension},{meeting_duration}\\n\")\r\n",
							"\r\n",
							"    def get_fake_school_name(self):\r\n",
							"        name = self.faker.last_name()\r\n",
							"        if name == 'Ho': return self.get_fake_school_name()\r\n",
							"        else: return f\"{name} {random.choice(SCHOOL_TYPES)}\"\r\n",
							"\r\n",
							"    def get_random_grade(self):\r\n",
							"        num = random.randint(55, 110)\r\n",
							"        grade = ''\r\n",
							"        if num < 60: grade = 'F'\r\n",
							"        elif num >= 60 and num < 70: grade = 'D'\r\n",
							"        elif num >= 70 and num < 80: grade = 'C'\r\n",
							"        elif num >= 80 and num < 90: grade = 'B'\r\n",
							"        elif num >= 90: grade = 'A'\r\n",
							"        return [str(num), grade]\r\n",
							"\r\n",
							"    def list_of_dict_to_csv(self, list_of_dict):\r\n",
							"        csv_str = ''\r\n",
							"        header = []\r\n",
							"        for column_name in list_of_dict[0].keys(): \r\n",
							"            if not column_name.startswith('_'): header.append(column_name)\r\n",
							"        csv_str += \",\".join(header) + \"\\n\"\r\n",
							"\r\n",
							"        for row in list_of_dict:\r\n",
							"            csv_str += self.obj_to_csv(row) + \"\\n\"\r\n",
							"\r\n",
							"        return csv_str[:-1] # chop the final newline char\r\n",
							"\r\n",
							"    def obj_to_csv(self, obj):\r\n",
							"        csv = ''\r\n",
							"        for key in obj:\r\n",
							"            if not (key.startswith('_')): csv += str(obj[key]) + ','\r\n",
							"        return csv[:-1]        \r\n",
							"\r\n",
							"REF_DEFINITION_CSV=\"\"\"\r\n",
							"    F27548AC-5978-4DC7-8897-1F51FBBD269F,RefPhoneNumberType,ceds.ed.gov,Home,10,Home,True\r\n",
							"    1C20AA37-0D47-428A-9886-275D9314683B,RefPhoneNumberType,ceds.ed.gov,Work,20,Work,True\r\n",
							"    27127BF9-D27F-4550-8DB5-F5C45B9F300A,RefPhoneNumberType,ceds.ed.gov,Mobile,30,Mobile,True\r\n",
							"    2058208C-D839-4050-811E-5C967ED3479A,RefPhoneNumberType,ceds.ed.gov,Fax,40,Fax,True\r\n",
							"    F72DB3A7-60D1-4205-BCCE-261A5C70392A,RefPhoneNumberType,ceds.ed.gov,SMS,50,SMS (text),True\r\n",
							"    BAB42A97-EF46-4D19-BD7C-A16042D69290,RefPhoneNumberType,ceds.ed.gov,Other,60,Other,True\r\n",
							"    296C8859-65B6-41AF-9AC3-A756F805AA7A,RefEmailAddressType,ceds.ed.gov,Home,10,Home/personal,True\r\n",
							"    2BD5CAF9-B2E2-4BB9-9634-D7F9D9C99942,RefEmailAddressType,ceds.ed.gov,Work,20,Work,True\r\n",
							"    B62C5FF6-9C7C-4282-99DA-D989E975FED9,RefEmailAddressType,ceds.ed.gov,Organizational,30,Organizational,True\r\n",
							"    BE4EDAD4-273B-4AC0-B0A9-4AEAAA4D72FC,RefEmailAddressType,ceds.ed.gov,Other,40,Other,True\r\n",
							"    C7BA7784-18EA-48F7-A8CE-8F85317DB1FC,RefSessionType,imsglobal.org,gradingPeriod,10,Grading Period,True\r\n",
							"    1C69DBD1-5CDA-44B2-AEAA-510F9D5DA98D,RefSessionType,imsglobal.org,semester,20,Semester,True\r\n",
							"    535E0286-C64B-4E96-8866-8F05F7FD4B7D,RefSessionType,imsglobal.org,schoolYear,30,School Year,True\r\n",
							"    D3244521-1657-44CC-878D-A731819A8C10,RefSessionType,imsglobal.org,term,40,Term,True\r\n",
							"    9FC6B036-76CB-49C1-9B54-52B6DEA89B13,RefSessionType,imsglobal.org,quarter,50,Quarter,True\r\n",
							"    9CFF5B20-9F10-40CD-BE70-337E1D45EC22,RefOrgType,imsglobal.org,department,10,Department,True\r\n",
							"    0AA7E195-1576-440B-817C-BCCA6949E2ED,RefOrgType,imsglobal.org,school,20,School,True\r\n",
							"    1198ADF7-3DA7-4DA6-A8CB-6FC3313C063C,RefOrgType,imsglobal.org,district,30,District,True\r\n",
							"    DD0FD78C-8E83-4561-BCA9-D622C17239B1,RefOrgType,imsglobal.org,local,40,Local,True\r\n",
							"    92FBF859-EAF5-44DB-A009-F078DC5D9624,RefOrgType,imsglobal.org,state,50,State,True\r\n",
							"    CB89C3EF-00C6-4887-86F6-025E85EE0CD5,RefOrgType,imsglobal.org,national,60,National,True\r\n",
							"    0D70E313-D121-4BEB-873E-32AB1BE585BB,RefOrgType,microsoft.com,departmentOfEducation,70,Department of Education,True\r\n",
							"    A876151F-8E7B-4E0D-AD5E-1644489C06E2,RefOrgType,microsoft.com,ministryOfEducation,80,Ministry of Education,True\r\n",
							"    4EF75D0A-C056-4708-BBA8-93974487E3FB,RefOrgType,microsoft.com,university,90,University,True\r\n",
							"    A330F267-036A-49FD-9E41-BD04E33F72B4,RefOrgType,microsoft.com,college,100,College,True\r\n",
							"    9E5B404E-F884-4213-BB5A-C13896B3C64F,RefOrgType,microsoft.com,campus,110,Campus,True\r\n",
							"    E4DC78EC-B83E-490E-B2AC-A4002F2A1011,RefOrgType,microsoft.com,adultEducation,120,Adult Education,True\r\n",
							"    3F7E3E4A-17D8-4528-8023-4C51E1135DAF,RefAcademicSubject,ceds.ed.gov,13371,10,Arts,False\r\n",
							"    A8B9FD82-A3FE-4B58-B965-6D2485CAF4FF,RefAcademicSubject,ceds.ed.gov,73065,20,Career and Technical Education,False\r\n",
							"    75C20E7F-4064-4E66-93D1-AD60D8AF03E3,RefAcademicSubject,ceds.ed.gov,13372,30,English,False\r\n",
							"    B28AA87C-9357-40F3-8F3F-468D76100470,RefAcademicSubject,ceds.ed.gov,256,40,English as a second language (ESL),False\r\n",
							"    11F6E7A0-188D-4F29-9A85-D6C64DEBF51A,RefAcademicSubject,ceds.ed.gov,546,50,Foreign Languages,False\r\n",
							"    785C7805-478C-437E-9D0F-A42085F19CA6,RefAcademicSubject,ceds.ed.gov,73088,60,History Government - US,False\r\n",
							"    67B144F0-B0B7-4B48-B948-A1C0C41C2316,RefAcademicSubject,ceds.ed.gov,73089,70,History Government - World,False\r\n",
							"    8C053948-3868-4172-8439-90F3C763C1FB,RefAcademicSubject,ceds.ed.gov,554,80,Language arts,False\r\n",
							"    406A9BDB-D00A-47B2-9B58-0D7C6BA4B5F3,RefAcademicSubject,ceds.ed.gov,1166,90,Mathematics,False\r\n",
							"    6542AAA2-4241-41FA-8003-FE0D55C8C9B5,RefAcademicSubject,ceds.ed.gov,560,100,Reading,False\r\n",
							"    EFE570C8-4863-41B1-8F7A-6FE6F17C3FF9,RefAcademicSubject,ceds.ed.gov,13373,110,Reading/Language Arts,False\r\n",
							"    C78DB896-4E57-4118-93B0-4FBC0CFB4892,RefAcademicSubject,ceds.ed.gov,562,120,Science,False\r\n",
							"    C105C6B3-3CF9-472F-B865-043979160403,RefAcademicSubject,ceds.ed.gov,73086,130,Science - Life,False\r\n",
							"    8270A5B4-961D-49BC-93FF-B11B9A355800,RefAcademicSubject,ceds.ed.gov,73087,140,Science - Physical,False\r\n",
							"    857C8075-F125-4316-9C7D-C6F06A59A3B4,RefAcademicSubject,ceds.ed.gov,13374,150,\"Social Sciences (History, Geography, Economics, Civics and Government)\",False\r\n",
							"    71C56B0D-AD9A-44A9-83BD-B1346BA735FD,RefAcademicSubject,ceds.ed.gov,2043,160,Special education,False\r\n",
							"    D998AFA4-15B2-454E-AD56-9BD67562DE09,RefAcademicSubject,ceds.ed.gov,1287,170,Writing,False\r\n",
							"    125AD8F4-CBC2-4780-8ECA-766F6BB3616F,RefAcademicSubject,ceds.ed.gov,9999,180,Other,False\r\n",
							"    AF074314-C807-431D-849E-5C56DCFD56FB,RefSex,ceds.ed.gov,Male,10,Male,True\r\n",
							"    7BA57431-93E6-4F3A-B74F-56C84749E9A7,RefSex,ceds.ed.gov,Female,20,Female,True\r\n",
							"    FEA3A014-218A-470A-AB59-12F3064DC397,RefSex,ceds.ed.gov,Not selected,30,Not selected,True\r\n",
							"    C855A445-E7CC-4093-B6E3-E4B887C6FD92,RefState,ceds.ed.gov,AK,10,Alaska,True\r\n",
							"    16B07D3F-571C-40E6-92AA-73178BEF1542,RefState,ceds.ed.gov,AL,20,Alabama,True\r\n",
							"    50F6DDCA-C75C-4AFE-A024-0D2A0BF9D6CC,RefState,ceds.ed.gov,AR,30,Arkansas,True\r\n",
							"    EA24B73C-B071-453B-9E8A-8BD6E1AE19B8,RefState,ceds.ed.gov,AS,40,American Samoa,True\r\n",
							"    F24214B4-5DED-44D0-B29B-321BE28BCB93,RefState,ceds.ed.gov,AZ,50,Arizona,True\r\n",
							"    FC8D5952-EF82-465A-9D0B-62A06C58C0EE,RefState,ceds.ed.gov,CA,60,California,True\r\n",
							"    4A08E734-6101-4C0D-A066-E65F9183ED8A,RefState,ceds.ed.gov,CO,70,Colorado,True\r\n",
							"    05950FFE-C9F6-4918-8362-E7B7A5202C3C,RefState,ceds.ed.gov,CT,80,Connecticut,True\r\n",
							"    526B4BFB-5A10-40F5-BF4B-9704567AEF4D,RefState,ceds.ed.gov,DC,90,District of Columbia,True\r\n",
							"    9D61F8B8-EF3D-40EF-81CE-B59F69632F53,RefState,ceds.ed.gov,DE,100,Delaware,True\r\n",
							"    4FCAF288-4928-4450-8793-9852C29C2315,RefState,ceds.ed.gov,FL,110,Florida,True\r\n",
							"    35B9C40A-617F-4633-AA76-A56D5147E89E,RefState,ceds.ed.gov,FM,120,Federated States of Micronesia,True\r\n",
							"    FF5BC2E2-1D44-4B7B-8467-7643A6ABA583,RefState,ceds.ed.gov,GA,130,Georgia,True\r\n",
							"    4A38E332-EA89-4625-86D8-016B0628CA9C,RefState,ceds.ed.gov,GU,140,Guam,True\r\n",
							"    51F07FB9-AE06-4F3C-A8F2-99BAA9F143C2,RefState,ceds.ed.gov,HI,150,Hawaii,True\r\n",
							"    744C35E4-8B9F-43F2-BB8A-DDFBF860E581,RefState,ceds.ed.gov,IA,160,Iowa,True\r\n",
							"    84ADEB70-7F0E-4EEC-AC69-61C3EB5186D6,RefState,ceds.ed.gov,ID,170,Idaho,True\r\n",
							"    2770B048-41B8-4ADC-AC7D-359BE9CA77D3,RefState,ceds.ed.gov,IL,180,Illinois,True\r\n",
							"    55D9B58E-7FAA-4D83-8DCC-5C2D9D905444,RefState,ceds.ed.gov,IN,190,Indiana,True\r\n",
							"    D3B16F02-6C56-4D72-8088-23A56C8C353A,RefState,ceds.ed.gov,KS,200,Kansas,True\r\n",
							"    85F3BB5F-533D-4104-813C-8A5BAC6BED76,RefState,ceds.ed.gov,KY,210,Kentucky,True\r\n",
							"    D3355BB2-71AE-43C8-93A4-8A94AD3D368A,RefState,ceds.ed.gov,LA,220,Louisiana,True\r\n",
							"    994F7CFE-D3CA-4B25-9331-630DF404BACC,RefState,ceds.ed.gov,MA,230,Massachusetts,True\r\n",
							"    3F854FB2-918B-495D-9B6C-7E68975A5FB3,RefState,ceds.ed.gov,MD,240,Maryland,True\r\n",
							"    E8E5C5DD-6C00-4D79-91F0-9667C191D53D,RefState,ceds.ed.gov,ME,250,Maine,True\r\n",
							"    91AEB1E0-02AD-43AC-BBDA-C6C6F2EB8229,RefState,ceds.ed.gov,MH,260,Marshall Islands,True\r\n",
							"    8D5F6125-EDC8-4617-8625-CDCA447F0210,RefState,ceds.ed.gov,MI,270,Michigan,True\r\n",
							"    92093A91-AD63-4C8E-A241-54791538B51C,RefState,ceds.ed.gov,MN,280,Minnesota,True\r\n",
							"    975C4751-E25F-4268-AB1B-8802640ACE08,RefState,ceds.ed.gov,MO,290,Missouri,True\r\n",
							"    975F8937-3322-4ED9-8C58-D0B3BF3C7791,RefState,ceds.ed.gov,MP,300,Northern Marianas,True\r\n",
							"    D3C60549-CF5A-4763-9144-7FC62036954A,RefState,ceds.ed.gov,MS,310,Mississippi,True\r\n",
							"    773E67E2-B0BB-4756-BD7B-9483B2F40FEE,RefState,ceds.ed.gov,MT,320,Montana,True\r\n",
							"    D58CA3A6-6C82-4661-95DF-01ACE1075C96,RefState,ceds.ed.gov,NC,330,North Carolina,True\r\n",
							"    64444C9E-FBD7-419A-B0A7-58746793AC6E,RefState,ceds.ed.gov,ND,340,North Dakota,True\r\n",
							"    98934449-5343-46B9-898C-43E1E7C19032,RefState,ceds.ed.gov,NE,350,Nebraska,True\r\n",
							"    05339530-6CD1-43D0-8674-F7873C567D1A,RefState,ceds.ed.gov,NH,360,New Hampshire,True\r\n",
							"    A3B84025-5BA8-4229-8A11-0C518C1F4286,RefState,ceds.ed.gov,NJ,370,New Jersey,True\r\n",
							"    FC843EF9-169A-4D5E-90BB-5F19CB919638,RefState,ceds.ed.gov,NM,380,New Mexico,True\r\n",
							"    80555E2E-3A9F-4602-A90B-BF440C1ACCD4,RefState,ceds.ed.gov,NV,390,Nevada,True\r\n",
							"    E2ACE706-5524-413E-8164-6D74C4FDB2EC,RefState,ceds.ed.gov,NY,400,New York,True\r\n",
							"    7ECFD541-1962-4D01-BB86-5DD85766DD1D,RefState,ceds.ed.gov,OH,410,Ohio,True\r\n",
							"    3B66E105-18F3-4067-ACD7-6A055FB162C7,RefState,ceds.ed.gov,OK,420,Oklahoma,True\r\n",
							"    687A5C51-5F34-40E6-B329-1ADAEC370CD7,RefState,ceds.ed.gov,OR,430,Oregon,True\r\n",
							"    DE4620E9-7C57-4065-8DBD-9F767DDD7B88,RefState,ceds.ed.gov,PA,440,Pennsylvania,True\r\n",
							"    91FBFF8C-B029-45C2-82FE-BFF8C87FDCA8,RefState,ceds.ed.gov,PR,450,Puerto Rico,True\r\n",
							"    67A9EB33-C9E3-413E-B3D0-B00F26007A8E,RefState,ceds.ed.gov,PW,460,Palau,True\r\n",
							"    27B5FF55-80B3-4048-BACC-CA9A3C9DD3C4,RefState,ceds.ed.gov,RI,470,Rhode Island,True\r\n",
							"    26A7361D-2B27-4DE9-BCF7-AD03DBDEAA52,RefState,ceds.ed.gov,SC,480,South Carolina,True\r\n",
							"    21F4366B-9C35-4923-A3F7-45A4559DED6D,RefState,ceds.ed.gov,SD,490,South Dakota,True\r\n",
							"    DDD79C61-65F2-44AF-97C0-ED6E3B2AB65A,RefState,ceds.ed.gov,TN,500,Tennessee,True\r\n",
							"    06A57A29-DA3B-4A07-A8EB-9FA551405AB0,RefState,ceds.ed.gov,TX,510,Texas,True\r\n",
							"    4054F216-1E39-4FB8-ACAA-A9C3CC7824FB,RefState,ceds.ed.gov,UT,520,Utah,True\r\n",
							"    9A64EDAD-4DDE-43D6-A7E3-3E5A457787C5,RefState,ceds.ed.gov,VA,530,Virginia,True\r\n",
							"    6EA96E1A-8F15-4B2B-A6E3-93981E62C889,RefState,ceds.ed.gov,VI,540,Virgin Islands,True\r\n",
							"    98935CC0-B2E6-4120-A4CE-7B3CA18EB32D,RefState,ceds.ed.gov,VT,550,Vermont,True\r\n",
							"    2C1F84CE-FF58-492A-87EC-12B37A360DAD,RefState,ceds.ed.gov,WA,560,Washington,True\r\n",
							"    D1C6EEF1-B2A6-46CF-89A6-47E8BA2F969F,RefState,ceds.ed.gov,WI,570,Wisconsin,True\r\n",
							"    FA5DC2DC-DF72-4052-BE05-BC540196A154,RefState,ceds.ed.gov,WV,580,West Virginia,True\r\n",
							"    426A37AD-A542-4C9D-91C0-26F3D2D4AF42,RefState,ceds.ed.gov,WY,590,Wyoming,True\r\n",
							"    36BCBFE1-7EFA-420E-8FDC-9FED29376B16,RefState,ceds.ed.gov,AA,600,Armed Forces America,True\r\n",
							"    0C9210A8-8728-45C9-BE0C-3E93996BAD3F,RefState,ceds.ed.gov,AE,610,\"Armed Forces Africa, Canada, Europe, and Mideast\",True\r\n",
							"    1B1D8C7A-7DA4-4DEB-B6FB-D75951B0C4B7,RefState,ceds.ed.gov,AP,620,Armed Forces Pacific,True\r\n",
							"    D27CC7C7-B509-4C5D-A19E-296DEB840B0D,RefCountry,ceds.ed.gov,AF,10,AFGHANISTAN,True\r\n",
							"    C4248C85-E6A3-4003-946F-4F8A1465823C,RefCountry,ceds.ed.gov,AX,20,ÅLAND ISLANDS,True\r\n",
							"    BAF71D44-906B-4725-9525-095861DB192C,RefCountry,ceds.ed.gov,AL,30,ALBANIA,True\r\n",
							"    6ED4915A-5F71-471A-B45B-09DB8C9BD6FA,RefCountry,ceds.ed.gov,DZ,40,ALGERIA,True\r\n",
							"    FBCB6596-3A6A-4AFB-AB7F-AFCB85C48674,RefCountry,ceds.ed.gov,AS,50,AMERICAN SAMOA,True\r\n",
							"    B875C46B-C971-4C34-B688-4D2CFB4D8901,RefCountry,ceds.ed.gov,AD,60,ANDORRA,True\r\n",
							"    D58E52A1-669A-4D3D-B3F2-BFB487083E99,RefCountry,ceds.ed.gov,AO,70,ANGOLA,True\r\n",
							"    6D5F15DA-1BCE-43F6-976E-AA4A9760CF26,RefCountry,ceds.ed.gov,AI,80,ANGUILLA,True\r\n",
							"    D8516776-672C-4806-BEA2-57C9C932D0B4,RefCountry,ceds.ed.gov,AQ,90,ANTARCTICA,True\r\n",
							"    1AF6BB03-DDBF-4A06-BB0B-7E2DD435EF00,RefCountry,ceds.ed.gov,AG,100,ANTIGUA AND BARBUDA,True\r\n",
							"    3E489A05-9414-4905-876A-48E6B087DD7C,RefCountry,ceds.ed.gov,AR,110,ARGENTINA,True\r\n",
							"    C95C52A4-06DD-481D-8067-E420C45AF05B,RefCountry,ceds.ed.gov,AM,120,ARMENIA,True\r\n",
							"    218A0515-0DF9-4A79-8A5C-7235CEA3D133,RefCountry,ceds.ed.gov,AW,130,ARUBA,True\r\n",
							"    4D36A8CE-7236-42A9-ADB3-2CAC9A6E0A8A,RefCountry,ceds.ed.gov,AU,140,AUSTRALIA,True\r\n",
							"    D5FBCC82-E6B9-4A7B-9C81-BE91C3BF3051,RefCountry,ceds.ed.gov,AT,150,AUSTRIA,True\r\n",
							"    86454B57-D0DC-4B5F-990B-35A073B725D7,RefCountry,ceds.ed.gov,AZ,160,AZERBAIJAN,True\r\n",
							"    C71E4CF0-43D1-4C5B-9B3B-5BAE9768B659,RefCountry,ceds.ed.gov,BS,170,BAHAMAS,True\r\n",
							"    431FD1D5-0C81-4519-871B-462125EB423F,RefCountry,ceds.ed.gov,BH,180,BAHRAIN,True\r\n",
							"    610B665A-62D2-4043-BD42-ABB357D215F1,RefCountry,ceds.ed.gov,BD,190,BANGLADESH,True\r\n",
							"    F7FD3C44-EF3A-4DCD-9FF8-BF1A6F511F15,RefCountry,ceds.ed.gov,BB,200,BARBADOS,True\r\n",
							"    35606A50-C1B3-467F-BEBA-F9090248EC13,RefCountry,ceds.ed.gov,BY,210,BELARUS,True\r\n",
							"    6B7A07BF-4F9C-4989-9EBD-113E314D94A9,RefCountry,ceds.ed.gov,BE,220,BELGIUM,True\r\n",
							"    053D2AEC-28D7-4657-B6F9-2618ECB66435,RefCountry,ceds.ed.gov,BZ,230,BELIZE,True\r\n",
							"    9DEC5368-A1CA-43A4-A811-79636D63C4CD,RefCountry,ceds.ed.gov,BJ,240,BENIN,True\r\n",
							"    0C40619F-73BE-482A-B0FC-94C65B65E5EE,RefCountry,ceds.ed.gov,BM,250,BERMUDA,True\r\n",
							"    AC73ED1A-8EBB-4FDC-9446-26313A9FCFDC,RefCountry,ceds.ed.gov,BT,260,BHUTAN,True\r\n",
							"    CFBE2FDB-0DB5-4C0E-8D3B-082E13FC0769,RefCountry,ceds.ed.gov,BO,270,BOLIVIA (PLURINATIONAL STATE OF),True\r\n",
							"    E9464C45-7AF9-4F70-B1C8-2799519C9AC4,RefCountry,ceds.ed.gov,BQ,280,\"BONAIRE, SINT EUSTATIUS AND SABA\",True\r\n",
							"    66AFEF2A-AAAC-403D-986A-D30131D0800B,RefCountry,ceds.ed.gov,BA,290,BOSNIA AND HERZEGOVINA,True\r\n",
							"    BF83057A-817C-46DD-9D96-B880D4A43632,RefCountry,ceds.ed.gov,BW,300,BOTSWANA,True\r\n",
							"    19BA7D54-5564-4089-900B-E4A876F501ED,RefCountry,ceds.ed.gov,BV,310,BOUVET ISLAND,True\r\n",
							"    E67825BB-F50A-4113-A0C9-E491254B761D,RefCountry,ceds.ed.gov,BR,320,BRAZIL,True\r\n",
							"    35D3248A-7192-439A-A124-A47EE8C5E22A,RefCountry,ceds.ed.gov,IO,330,BRITISH INDIAN OCEAN TERRITORY,True\r\n",
							"    5526EDE2-3618-4A09-9C85-6989FBDB0EB9,RefCountry,ceds.ed.gov,BN,340,BRUNEI DARUSSALAM,True\r\n",
							"    F835BE43-A886-4B6F-8FBB-FAE8037DA7FE,RefCountry,ceds.ed.gov,BG,350,BULGARIA,True\r\n",
							"    F4619148-DE08-431B-9F20-0AFCB4B0F381,RefCountry,ceds.ed.gov,BF,360,BURKINA FASO,True\r\n",
							"    41DAA537-F493-4613-A939-3854BBF6633C,RefCountry,ceds.ed.gov,BI,370,BURUNDI,True\r\n",
							"    FA8DA2A4-1B94-4768-A0CD-087FE2C3A57C,RefCountry,ceds.ed.gov,KH,380,CAMBODIA,True\r\n",
							"    D10579AF-BB48-4EFF-A28F-A08E67A8F38A,RefCountry,ceds.ed.gov,CM,390,CAMEROON,True\r\n",
							"    9FDB4302-095B-4CB8-BB21-38E92391CCE7,RefCountry,ceds.ed.gov,CA,400,CANADA,True\r\n",
							"    F00048DE-EAE4-4401-A346-3048E028F919,RefCountry,ceds.ed.gov,CV,410,CABO VERDE,True\r\n",
							"    C493E32C-145B-468F-BFBC-178D3617FE1F,RefCountry,ceds.ed.gov,KY,420,CAYMAN ISLANDS,True\r\n",
							"    943FF087-293A-48FC-B7E6-24A3CACA52AC,RefCountry,ceds.ed.gov,CF,430,CENTRAL AFRICAN REPUBLIC,True\r\n",
							"    FDEB4792-0633-41CA-AB8B-8B316DB92630,RefCountry,ceds.ed.gov,TD,440,CHAD,True\r\n",
							"    1C97B8BE-2418-4B72-925B-21486B9CAFEF,RefCountry,ceds.ed.gov,CL,450,CHILE,True\r\n",
							"    770CB099-B1FB-4E4B-B7EB-89DD0BAA15B6,RefCountry,ceds.ed.gov,CN,460,CHINA,True\r\n",
							"    22C29EDF-B3F5-4E84-98BF-68B0B73806C6,RefCountry,ceds.ed.gov,CX,470,CHRISTMAS ISLAND,True\r\n",
							"    7B7BC7C3-3B56-4F4A-B5DD-49583FBD798A,RefCountry,ceds.ed.gov,CC,480,COCOS (KEELING) ISLANDS,True\r\n",
							"    30EA0E0A-06C2-456E-9062-B1527AF18514,RefCountry,ceds.ed.gov,CO,490,COLOMBIA,True\r\n",
							"    8120B8A8-A113-44FD-8AE7-C0BFC05E3EAB,RefCountry,ceds.ed.gov,KM,500,COMOROS,True\r\n",
							"    1F4F8956-5A23-4185-A244-5DDAF2C4A8D5,RefCountry,ceds.ed.gov,CG,510,CONGO,True\r\n",
							"    D81156CD-C2DF-4BF4-B5E0-91A7D495D1F2,RefCountry,ceds.ed.gov,CD,520,\"CONGO, DEMOCRATIC REPUBLIC OF THE\",True\r\n",
							"    EA6D2CD0-4457-4752-AC10-2AD8C2192DFD,RefCountry,ceds.ed.gov,CK,530,COOK ISLANDS,True\r\n",
							"    1EE80E7F-CE07-4192-BC71-92CCE5DF5B87,RefCountry,ceds.ed.gov,CR,540,COSTA RICA,True\r\n",
							"    7D626101-21A0-48FB-A209-374636012EFA,RefCountry,ceds.ed.gov,CI,550,CÔTE D'IVOIRE,True\r\n",
							"    2976CDB1-2EBE-4FED-A988-5EA8166DA16D,RefCountry,ceds.ed.gov,HR,560,CROATIA,True\r\n",
							"    31B0ED95-2375-4E9D-8BA6-09F36FE4B303,RefCountry,ceds.ed.gov,CU,570,CUBA,True\r\n",
							"    3444FFC6-75DC-4BFD-A65F-C981B09A4E5D,RefCountry,ceds.ed.gov,CW,580,CURAÇAO,True\r\n",
							"    7303FDD1-C6C0-4328-8487-DB1E31922014,RefCountry,ceds.ed.gov,CY,590,CYPRUS,True\r\n",
							"    58D2376A-3B7E-4325-B238-080724BF7371,RefCountry,ceds.ed.gov,CZ,600,CZECH REPUBLIC,True\r\n",
							"    0279764E-EB81-4FC2-A027-AA18205E624E,RefCountry,ceds.ed.gov,DK,610,DENMARK,True\r\n",
							"    0D2664E5-F193-448F-8379-71A4B7B35751,RefCountry,ceds.ed.gov,DJ,620,DJIBOUTI,True\r\n",
							"    122C7D71-0875-45E6-BF67-592327F0EA3E,RefCountry,ceds.ed.gov,DM,630,DOMINICA,True\r\n",
							"    275978E1-6AEC-40D1-B9EF-5FD7109F249F,RefCountry,ceds.ed.gov,DO,640,DOMINICAN REPUBLIC,True\r\n",
							"    679BBA36-AE9E-4790-B6FA-8C4BF1DE1691,RefCountry,ceds.ed.gov,EC,650,ECUADOR,True\r\n",
							"    55B12FE3-A9DD-4487-8BD9-F1F5AA8BE5BD,RefCountry,ceds.ed.gov,EG,660,EGYPT,True\r\n",
							"    76B0ECDC-2393-41D8-83D2-5543017B43EA,RefCountry,ceds.ed.gov,SV,670,EL SALVADOR,True\r\n",
							"    1F5F7272-EE24-4BFB-9021-65DCDD641B47,RefCountry,ceds.ed.gov,GQ,680,EQUATORIAL GUINEA,True\r\n",
							"    39963E26-F3A7-4197-B258-8B5E031DBC91,RefCountry,ceds.ed.gov,ER,690,ERITREA,True\r\n",
							"    A42681D9-4185-4D8E-8F47-165D9D60DF2D,RefCountry,ceds.ed.gov,EE,700,ESTONIA,True\r\n",
							"    45963F45-7BAF-4D51-99F4-C71EAF3DD152,RefCountry,ceds.ed.gov,ET,710,ETHIOPIA,True\r\n",
							"    6CF21A67-DDD5-447F-9154-B4BDB8C886E9,RefCountry,ceds.ed.gov,FK,720,FALKLAND ISLANDS (MALVINAS),True\r\n",
							"    2E42F906-C8AA-432D-8EC6-AA4F07B3A98F,RefCountry,ceds.ed.gov,FO,730,FAROE ISLANDS,True\r\n",
							"    6F9646D1-CAE1-47BC-8E41-C82743997ACF,RefCountry,ceds.ed.gov,FJ,740,FIJI,True\r\n",
							"    428DE3F9-D201-4BD4-98CA-F0F92B127C0D,RefCountry,ceds.ed.gov,FI,750,FINLAND,True\r\n",
							"    281C8F83-1AB0-4678-B3AC-1E6DA98A1B8D,RefCountry,ceds.ed.gov,FR,760,FRANCE,True\r\n",
							"    6F8A17F4-006C-4DF0-95BE-2344577B4C87,RefCountry,ceds.ed.gov,GF,770,FRENCH GUIANA,True\r\n",
							"    0CAC2EF1-59E6-4390-9371-9EC5F400D3CA,RefCountry,ceds.ed.gov,PF,780,FRENCH POLYNESIA,True\r\n",
							"    2CD7DC70-F061-4845-B626-24E8C4076FE5,RefCountry,ceds.ed.gov,TF,790,FRENCH SOUTHERN TERRITORIES,True\r\n",
							"    105F3434-B6ED-457B-B395-B0BA7ED2EBD0,RefCountry,ceds.ed.gov,GA,800,GABON,True\r\n",
							"    3E0BA96F-0121-4C51-ADC4-5B0B840C720F,RefCountry,ceds.ed.gov,GM,810,GAMBIA,True\r\n",
							"    9E8290AE-90C6-4D4A-8F6A-B7C5B2BED017,RefCountry,ceds.ed.gov,GE,820,GEORGIA,True\r\n",
							"    8E28378A-05A3-4EEB-A9ED-C3B1695BBC00,RefCountry,ceds.ed.gov,DE,830,GERMANY,True\r\n",
							"    73C7F8FB-CC15-4ED7-9D4C-0B9B5054DABC,RefCountry,ceds.ed.gov,GH,840,GHANA,True\r\n",
							"    4A91F599-1CEB-47DA-9655-239F7414BF49,RefCountry,ceds.ed.gov,GI,850,GIBRALTAR,True\r\n",
							"    549ED6FA-054D-4E88-94A8-9A8CCD6A3A93,RefCountry,ceds.ed.gov,GR,860,GREECE,True\r\n",
							"    4AD8D4C1-2AA5-4F4B-85BF-0FBB2E0463BB,RefCountry,ceds.ed.gov,GL,870,GREENLAND,True\r\n",
							"    3AF9FCF6-15D7-451B-9355-702CB458AD29,RefCountry,ceds.ed.gov,GD,880,GRENADA,True\r\n",
							"    FD1FE91D-640F-4029-A2A7-1C85E939E37C,RefCountry,ceds.ed.gov,GP,890,GUADELOUPE,True\r\n",
							"    1FE1E74B-E294-4ADD-BF3A-5B4598C7C2CC,RefCountry,ceds.ed.gov,GU,900,GUAM,True\r\n",
							"    37F47BB7-4866-4052-8531-F70C6CC05509,RefCountry,ceds.ed.gov,GT,910,GUATEMALA,True\r\n",
							"    31737278-DDE3-4D14-B5BB-71ED800FD70D,RefCountry,ceds.ed.gov,GG,920,GUERNSEY,True\r\n",
							"    596BE35E-82B8-4350-B18A-76BAF253518D,RefCountry,ceds.ed.gov,GN,930,GUINEA,True\r\n",
							"    0A18754D-613A-4B3A-AB0E-CE0147035400,RefCountry,ceds.ed.gov,GW,940,GUINEA-BISSAU,True\r\n",
							"    894E840B-6BF1-4714-B1C1-5F86F1465E09,RefCountry,ceds.ed.gov,GY,950,GUYANA,True\r\n",
							"    C3AB650B-E895-4B45-956F-D4A21DE16762,RefCountry,ceds.ed.gov,HT,960,HAITI,True\r\n",
							"    A9063AF1-0FA1-40C5-BF1B-3C5025C1E226,RefCountry,ceds.ed.gov,HM,970,HEARD ISLAND AND MCDONALD ISLANDS,True\r\n",
							"    5382AB70-5BC5-4EE5-AC89-74222EB063E9,RefCountry,ceds.ed.gov,VA,980,HOLY SEE,True\r\n",
							"    501E2372-EAAC-4DAA-B5F8-498BB79B5D06,RefCountry,ceds.ed.gov,HN,990,HONDURAS,True\r\n",
							"    4566DA89-2577-421F-A7D4-BE159101CA25,RefCountry,ceds.ed.gov,HK,1000,HONG KONG,True\r\n",
							"    17F05B32-C93E-4B65-B97B-47739D7BE2B6,RefCountry,ceds.ed.gov,HU,1010,HUNGARY,True\r\n",
							"    0B407879-7D92-47F0-AD86-655E40283F93,RefCountry,ceds.ed.gov,IS,1020,ICELAND,True\r\n",
							"    922A1996-C5E6-4A8E-A2B4-CA61DD3F12BC,RefCountry,ceds.ed.gov,IN,1030,INDIA,True\r\n",
							"    509756FB-94BF-431D-B96E-9EC18A27298C,RefCountry,ceds.ed.gov,ID,1040,INDONESIA,True\r\n",
							"    85056B48-EB0B-4CA9-8015-116311F92A53,RefCountry,ceds.ed.gov,IR,1050,IRAN (ISLAMIC REPUBLIC OF),True\r\n",
							"    E47C2972-2934-48B8-A26E-A078AF162E45,RefCountry,ceds.ed.gov,IQ,1060,IRAQ,True\r\n",
							"    F7F3EC17-D221-4AD4-AEE4-1155F0487A69,RefCountry,ceds.ed.gov,IE,1070,IRELAND,True\r\n",
							"    73DF0854-8482-4AC8-81AA-AD5B6C4CF02D,RefCountry,ceds.ed.gov,IM,1080,ISLE OF MAN,True\r\n",
							"    F9F71EBE-27D8-4CF1-945E-65A1CD978236,RefCountry,ceds.ed.gov,IL,1090,ISRAEL,True\r\n",
							"    B653EDC2-B645-4BA6-889E-6F20DE6B6001,RefCountry,ceds.ed.gov,IT,1100,ITALY,True\r\n",
							"    751AC8A6-FF95-403B-9CC2-2894B726B76A,RefCountry,ceds.ed.gov,JM,1110,JAMAICA,True\r\n",
							"    A0A473A1-E41E-4C2B-A600-16607A1FB7FE,RefCountry,ceds.ed.gov,JP,1120,JAPAN,True\r\n",
							"    04788D74-1C8D-40DD-B2CD-CDE1D73FED54,RefCountry,ceds.ed.gov,JE,1130,JERSEY,True\r\n",
							"    5BA9655E-CC02-4E69-B586-1072DF66757B,RefCountry,ceds.ed.gov,JO,1140,JORDAN,True\r\n",
							"    3F5F2153-0E28-48C9-8D6D-805867AC67AB,RefCountry,ceds.ed.gov,KZ,1150,KAZAKHSTAN,True\r\n",
							"    479CE3D3-5DD5-4480-A1EB-A830439D329F,RefCountry,ceds.ed.gov,KE,1160,KENYA,True\r\n",
							"    327A46E4-9608-43D5-99A4-6841865FB4DB,RefCountry,ceds.ed.gov,KI,1170,KIRIBATI,True\r\n",
							"    75E9610E-0B9E-4340-B66F-8E405ED76662,RefCountry,ceds.ed.gov,KP,1180,KOREA (DEMOCRATIC PEOPLE'S REPUBLIC OF),True\r\n",
							"    AD688E73-BC4A-4417-9B7F-387BB0B665AA,RefCountry,ceds.ed.gov,KR,1190,\"KOREA, REPUBLIC OF\",True\r\n",
							"    F3B92EB3-4413-4E40-8748-742814C488FB,RefCountry,ceds.ed.gov,KW,1200,KUWAIT,True\r\n",
							"    167F86C4-8C7B-4299-A1A6-C8AF9AB67DBE,RefCountry,ceds.ed.gov,KG,1210,KYRGYZSTAN,True\r\n",
							"    D4844D61-AC72-4D42-B977-AC91738BBD4B,RefCountry,ceds.ed.gov,LA,1220,LAO PEOPLE'S DEMOCRATIC REPUBLIC,True\r\n",
							"    D399E902-AF94-4531-A52C-D956D0B7C55C,RefCountry,ceds.ed.gov,LV,1230,LATVIA,True\r\n",
							"    0724E62D-DF7D-43DE-B88D-C6D7790603A0,RefCountry,ceds.ed.gov,LB,1240,LEBANON,True\r\n",
							"    30C1236C-2A1B-40E5-8E47-9C5CB1BEB8D3,RefCountry,ceds.ed.gov,LS,1250,LESOTHO,True\r\n",
							"    22E384DE-DCE8-43A9-9373-7EA91F1D729A,RefCountry,ceds.ed.gov,LR,1260,LIBERIA,True\r\n",
							"    7C70F8B1-1D8A-48CA-BA4E-888276B155D5,RefCountry,ceds.ed.gov,LY,1270,LIBYA,True\r\n",
							"    30521C6A-BA6B-4B8B-A0D3-C1D1F0F38EDF,RefCountry,ceds.ed.gov,LI,1280,LIECHTENSTEIN,True\r\n",
							"    0B9965B2-6D41-4AA4-A860-96B4D6AE2BC5,RefCountry,ceds.ed.gov,LT,1290,LITHUANIA,True\r\n",
							"    795B7E23-49FA-4851-9228-5816BDC3C3A0,RefCountry,ceds.ed.gov,LU,1300,LUXEMBOURG,True\r\n",
							"    1F000974-CD71-4789-B5C8-7DEDE2BF4354,RefCountry,ceds.ed.gov,MO,1310,MACAO,True\r\n",
							"    7E2F4872-EC4A-4922-BE59-7E8E510319C3,RefCountry,ceds.ed.gov,MK,1320,\"MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF\",True\r\n",
							"    CB6825D4-A079-41DC-9511-D30AB3D9D8A0,RefCountry,ceds.ed.gov,MG,1330,MADAGASCAR,True\r\n",
							"    DAB841AE-A8D0-4B53-81C7-71CAA144BB79,RefCountry,ceds.ed.gov,MW,1340,MALAWI,True\r\n",
							"    55CD15C5-0B88-4B3F-88EA-2378A055B0E6,RefCountry,ceds.ed.gov,MY,1350,MALAYSIA,True\r\n",
							"    5DF7FD05-9BAB-4271-8AB4-A101656B99B7,RefCountry,ceds.ed.gov,MV,1360,MALDIVES,True\r\n",
							"    F38D0885-53A7-42C6-8923-1945E6BB924A,RefCountry,ceds.ed.gov,ML,1370,MALI,True\r\n",
							"    C96DFCAD-A2E6-4CCE-AC7D-BAAAEE4E2A5E,RefCountry,ceds.ed.gov,MT,1380,MALTA,True\r\n",
							"    47BBD0B0-FF49-4E7B-8022-5497DF5BA5C2,RefCountry,ceds.ed.gov,MH,1390,MARSHALL ISLANDS,True\r\n",
							"    B906FFA3-4C09-44D8-90B5-227D3B90CFD0,RefCountry,ceds.ed.gov,MQ,1400,MARTINIQUE,True\r\n",
							"    59EDC14B-E7F5-46C2-9F5C-F9569B5348A2,RefCountry,ceds.ed.gov,MR,1410,MAURITANIA,True\r\n",
							"    7E628BC1-2BB6-48C6-A210-4FD9677FAB9B,RefCountry,ceds.ed.gov,MU,1420,MAURITIUS,True\r\n",
							"    1AF13DD5-50E8-45AF-AAE4-4E45AA7CDA0E,RefCountry,ceds.ed.gov,YT,1430,MAYOTTE,True\r\n",
							"    86111F48-2681-44B5-BEC7-1B46F834C567,RefCountry,ceds.ed.gov,MX,1440,MEXICO,True\r\n",
							"    453FA007-D61C-4D1B-B6DC-CFD74313698C,RefCountry,ceds.ed.gov,FM,1450,MICRONESIA (FEDERATED STATES OF),True\r\n",
							"    01FDAC40-AF6F-477D-890D-8500DCC4432E,RefCountry,ceds.ed.gov,MD,1460,\"MOLDOVA, REPUBLIC OF\",True\r\n",
							"    0061C812-8A47-49DA-AE14-074386532A8F,RefCountry,ceds.ed.gov,MC,1470,MONACO,True\r\n",
							"    466CD301-592F-4480-9153-ECA53DC2DA2B,RefCountry,ceds.ed.gov,MN,1480,MONGOLIA,True\r\n",
							"    410F008B-CDA4-4609-A8AC-91DBF38EAE34,RefCountry,ceds.ed.gov,ME,1490,MONTENEGRO,True\r\n",
							"    B2411F7B-7BD3-4A93-9321-80661F7732E1,RefCountry,ceds.ed.gov,MS,1500,MONTSERRAT,True\r\n",
							"    E65079E9-6064-43F5-A9F3-797CB5DE8A0E,RefCountry,ceds.ed.gov,MA,1510,MOROCCO,True\r\n",
							"    89C048D5-9BD1-47A5-BDAA-9B4E58B22C48,RefCountry,ceds.ed.gov,MZ,1520,MOZAMBIQUE,True\r\n",
							"    5A666073-4114-4C83-9614-A28161BE68FC,RefCountry,ceds.ed.gov,MM,1530,MYANMAR,True\r\n",
							"    C262EBC2-14AC-4C7E-8333-4908FDA99F7A,RefCountry,ceds.ed.gov,NA,1540,NAMIBIA,True\r\n",
							"    1C352B2F-F6F0-401A-82A6-837187B393BB,RefCountry,ceds.ed.gov,NR,1550,NAURU,True\r\n",
							"    FD689F22-09BB-4A3C-AD17-055BF3B3B16C,RefCountry,ceds.ed.gov,NP,1560,NEPAL,True\r\n",
							"    8F9679A5-1B7A-4C35-9297-FCD4AF94CB12,RefCountry,ceds.ed.gov,NL,1570,NETHERLANDS,True\r\n",
							"    EE4E2F96-15AC-44FA-AA43-7ED8903A467D,RefCountry,ceds.ed.gov,NC,1580,NEW CALEDONIA,True\r\n",
							"    A016256C-E7F3-4B9F-9897-0AC80CED7A8D,RefCountry,ceds.ed.gov,NZ,1590,NEW ZEALAND,True\r\n",
							"    14C3C6C1-65E7-46AA-AA0D-A46428C6A7A4,RefCountry,ceds.ed.gov,NI,1600,NICARAGUA,True\r\n",
							"    0706A939-1EF8-45C9-AE0F-6C4E16442B3A,RefCountry,ceds.ed.gov,NE,1610,NIGER,True\r\n",
							"    AA8D132E-F753-4699-AC6B-5975AB620C81,RefCountry,ceds.ed.gov,NG,1620,NIGERIA,True\r\n",
							"    400A1956-D7C2-4207-BD4B-24DDAA4BEF74,RefCountry,ceds.ed.gov,NU,1630,NIUE,True\r\n",
							"    E388E2DB-9EAF-4B9E-AB8E-64CD118BB19F,RefCountry,ceds.ed.gov,NF,1640,NORFOLK ISLAND,True\r\n",
							"    529DCFA0-3191-49D7-9C5A-430BBC7C72F1,RefCountry,ceds.ed.gov,MP,1650,NORTHERN MARIANA ISLANDS,True\r\n",
							"    F6BB8EBD-13FC-492E-8C2F-12DEB51F4BC7,RefCountry,ceds.ed.gov,NO,1660,NORWAY,True\r\n",
							"    4C19193D-BC67-4FCB-94D0-1D7E05C6D5BC,RefCountry,ceds.ed.gov,OM,1670,OMAN,True\r\n",
							"    51E5415D-8663-40A0-92C7-85A4C90D726F,RefCountry,ceds.ed.gov,PK,1680,PAKISTAN,True\r\n",
							"    7C9C9603-04D3-4076-969D-B0FF10DE00CA,RefCountry,ceds.ed.gov,PW,1690,PALAU,True\r\n",
							"    4C5D8A77-B85E-4920-AB76-8F60D113BF81,RefCountry,ceds.ed.gov,PS,1700,\"PALESTINE, STATE OF\",True\r\n",
							"    EF403E92-BF0A-499C-8BFC-F2AF26EEE0C8,RefCountry,ceds.ed.gov,PA,1710,PANAMA,True\r\n",
							"    80BD56AF-3441-4A36-9E0A-275DE4CDFA43,RefCountry,ceds.ed.gov,PG,1720,PAPUA NEW GUINEA,True\r\n",
							"    41E21101-03D8-4549-A6AC-499136490091,RefCountry,ceds.ed.gov,PY,1730,PARAGUAY,True\r\n",
							"    51F14894-83C8-421B-B248-98567587BC9F,RefCountry,ceds.ed.gov,PE,1740,PERU,True\r\n",
							"    B59CD07B-E6C0-4A64-8965-27DDF675E8B9,RefCountry,ceds.ed.gov,PH,1750,PHILIPPINES,True\r\n",
							"    5C3F2B8C-D4D5-4CD7-84D6-E4596E1DD3B8,RefCountry,ceds.ed.gov,PN,1760,PITCAIRN,True\r\n",
							"    F52D0D10-06DD-4937-80B1-0331A1C211CB,RefCountry,ceds.ed.gov,PL,1770,POLAND,True\r\n",
							"    D7B2F40F-74F6-40C1-A02C-C9920B198526,RefCountry,ceds.ed.gov,PT,1780,PORTUGAL,True\r\n",
							"    1EC79991-D73C-4B3F-9CC4-537DC68FC48F,RefCountry,ceds.ed.gov,PR,1790,PUERTO RICO,True\r\n",
							"    46D0B925-44FB-46BD-9488-717888777756,RefCountry,ceds.ed.gov,QA,1800,QATAR,True\r\n",
							"    6827FD44-246C-4F53-9320-17946A6B4017,RefCountry,ceds.ed.gov,RE,1810,RÉUNION,True\r\n",
							"    C5101A5B-B94E-4E45-9291-AC5BF329CCB2,RefCountry,ceds.ed.gov,RO,1820,ROMANIA,True\r\n",
							"    4F9A48C8-A04D-4F5D-9100-E7FD403BBE46,RefCountry,ceds.ed.gov,RU,1830,RUSSIAN FEDERATION,True\r\n",
							"    5DB1879F-AE04-40FE-B3F2-13285D78216D,RefCountry,ceds.ed.gov,RW,1840,RWANDA,True\r\n",
							"    F8124018-FD02-4763-A8B0-57D04084E94D,RefCountry,ceds.ed.gov,BL,1850,SAINT BARTHÉLEMY,True\r\n",
							"    AA552BEE-7833-4A9C-AFE9-8DF0D4996950,RefCountry,ceds.ed.gov,SH,1860,\"SAINT HELENA, ASCENSION AND TRISTAN DA CUNHA\",True\r\n",
							"    7E325754-D43B-4431-A17B-1F39BCBC6FCB,RefCountry,ceds.ed.gov,KN,1870,SAINT KITTS AND NEVIS,True\r\n",
							"    993ED9DD-8902-413E-87F7-0A7F89AEB681,RefCountry,ceds.ed.gov,LC,1880,SAINT LUCIA,True\r\n",
							"    4B927548-A011-4EA4-A807-E9C7CA9B8182,RefCountry,ceds.ed.gov,MF,1890,SAINT MARTIN (FRENCH PART),True\r\n",
							"    9213514F-EF2F-41F1-819F-B5B9AA389DD8,RefCountry,ceds.ed.gov,PM,1900,SAINT PIERRE AND MIQUELON,True\r\n",
							"    A76FAAD0-97CC-4C01-A33B-17A84963DF17,RefCountry,ceds.ed.gov,VC,1910,SAINT VINCENT AND THE GRENADINES,True\r\n",
							"    02BF9BB8-2B0B-48DF-A44A-3F55C5E660CA,RefCountry,ceds.ed.gov,WS,1920,SAMOA,True\r\n",
							"    B777595B-0E66-4597-81D0-2FA3524B3DAF,RefCountry,ceds.ed.gov,SM,1930,SAN MARINO,True\r\n",
							"    AEEEBA86-00EB-4C50-91DC-0FD8BF63296C,RefCountry,ceds.ed.gov,ST,1940,SAO TOME AND PRINCIPE,True\r\n",
							"    ABEEF49C-2E93-458A-84F1-2D5C77424539,RefCountry,ceds.ed.gov,SA,1950,SAUDI ARABIA,True\r\n",
							"    94AD69A4-B71F-4FA9-91AE-F12BE09C81DE,RefCountry,ceds.ed.gov,SN,1960,SENEGAL,True\r\n",
							"    BCA16B75-BF2E-497D-824C-9EA569BD08DA,RefCountry,ceds.ed.gov,RS,1970,SERBIA,True\r\n",
							"    5FA3CF72-FFA4-40CE-8C4D-52793DBCBE64,RefCountry,ceds.ed.gov,SC,1980,SEYCHELLES,True\r\n",
							"    0E5B7268-6612-4092-B075-7CE554F6AA8B,RefCountry,ceds.ed.gov,SL,1990,SIERRA LEONE,True\r\n",
							"    0A490B99-2619-4F6A-AE5B-7F55869E569B,RefCountry,ceds.ed.gov,SG,2000,SINGAPORE,True\r\n",
							"    9585295D-9F85-4A5D-804F-8A78212EFA7E,RefCountry,ceds.ed.gov,SX,2010,SINT MAARTEN (DUTCH PART),True\r\n",
							"    C02772F6-4C93-4ADA-B30A-758A90AE7A2C,RefCountry,ceds.ed.gov,SK,2020,SLOVAKIA,True\r\n",
							"    1D56E8EE-74CC-49D6-8174-9670E6356024,RefCountry,ceds.ed.gov,SI,2030,SLOVENIA,True\r\n",
							"    A6425AC0-72D3-4008-8BBB-BEDC03F20AAA,RefCountry,ceds.ed.gov,SB,2040,SOLOMON ISLANDS,True\r\n",
							"    AC26F682-2AC1-4907-B165-CAE046FC2BCA,RefCountry,ceds.ed.gov,SO,2050,SOMALIA,True\r\n",
							"    A3D38931-C557-4530-902D-C27529532E7C,RefCountry,ceds.ed.gov,ZA,2060,SOUTH AFRICA,True\r\n",
							"    F0B07ACA-C168-4152-B6AB-2B7EE0162D0E,RefCountry,ceds.ed.gov,GS,2070,SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS,True\r\n",
							"    930FB257-80FD-4410-91BE-0B047A0E9483,RefCountry,ceds.ed.gov,SS,2080,SOUTH SUDAN,True\r\n",
							"    7C9A8ABA-B6A4-4B31-8CBE-6609D283322D,RefCountry,ceds.ed.gov,ES,2090,SPAIN,True\r\n",
							"    ED6CE09B-5451-4215-922C-D5F1BD23D2C0,RefCountry,ceds.ed.gov,LK,2100,SRI LANKA,True\r\n",
							"    E9A6F2AE-7BF4-4DA7-92AA-E8685030B1B5,RefCountry,ceds.ed.gov,SD,2110,SUDAN,True\r\n",
							"    83D8D9EB-36E3-4081-9D3F-EFCB894B1EF0,RefCountry,ceds.ed.gov,SR,2120,SURINAME,True\r\n",
							"    0C728176-8046-4390-A579-84E67D67B1E1,RefCountry,ceds.ed.gov,SJ,2130,SVALBARD AND JAN MAYEN,True\r\n",
							"    FE5D4E7F-7E05-4018-89D1-4A2C3BA268A5,RefCountry,ceds.ed.gov,SZ,2140,SWAZILAND,True\r\n",
							"    F63636C1-3123-4700-82CE-C4FD7EA9C289,RefCountry,ceds.ed.gov,SE,2150,SWEDEN,True\r\n",
							"    0B958C09-33BF-47EF-B70E-C42E33FBDDC3,RefCountry,ceds.ed.gov,CH,2160,SWITZERLAND,True\r\n",
							"    D0E968A9-B41A-4301-B7E2-41FAE7B597A2,RefCountry,ceds.ed.gov,SY,2170,SYRIAN ARAB REPUBLIC,True\r\n",
							"    2F4865F0-C6E6-4C24-8D63-8095AE34B472,RefCountry,ceds.ed.gov,TW,2180,TAIWAN,True\r\n",
							"    77867C67-1973-41AD-8824-C08AB2EF346E,RefCountry,ceds.ed.gov,TJ,2190,TAJIKISTAN,True\r\n",
							"    3E8FFA2A-9A41-4ECF-AFFF-9BD16A555078,RefCountry,ceds.ed.gov,TZ,2200,\"TANZANIA, UNITED REPUBLIC OF\",True\r\n",
							"    41767821-A02C-4218-9066-D026FFA3213C,RefCountry,ceds.ed.gov,TH,2210,THAILAND,True\r\n",
							"    240F8689-9BE9-4883-82E5-4212B53DAB5B,RefCountry,ceds.ed.gov,TL,2220,TIMOR-LESTE,True\r\n",
							"    B67AF7FD-9496-46CD-907A-5040F7A4D56C,RefCountry,ceds.ed.gov,TG,2230,TOGO,True\r\n",
							"    03A40FA1-D42C-41D4-AC1C-A58A9309DC25,RefCountry,ceds.ed.gov,TK,2240,TOKELAU,True\r\n",
							"    77C473E4-BC68-4341-8F32-C312DCA7BFE2,RefCountry,ceds.ed.gov,TO,2250,TONGA,True\r\n",
							"    D07FBFC8-DE57-4D65-B0A3-2AC8CD6F12CA,RefCountry,ceds.ed.gov,TT,2260,TRINIDAD AND TOBAGO,True\r\n",
							"    6E2BF916-718B-4FBC-AB54-DD4DEE4D91E0,RefCountry,ceds.ed.gov,TN,2270,TUNISIA,True\r\n",
							"    50D8BE7D-2F24-4E3B-9E29-D75CF7177F19,RefCountry,ceds.ed.gov,TR,2280,TURKEY,True\r\n",
							"    61AFB333-7B93-471E-A4B0-EE4FEC8588B7,RefCountry,ceds.ed.gov,TM,2290,TURKMENISTAN,True\r\n",
							"    2BEB099D-61D0-4E8F-AF1F-96C1C781292C,RefCountry,ceds.ed.gov,TC,2300,TURKS AND CAICOS ISLANDS,True\r\n",
							"    D8DA0877-CCB5-4963-9E26-308BF067320C,RefCountry,ceds.ed.gov,TV,2310,TUVALU,True\r\n",
							"    BA5C6CDE-7D11-45AF-B30B-76500FA91425,RefCountry,ceds.ed.gov,UG,2320,UGANDA,True\r\n",
							"    52ECB0E0-22B9-4267-BDDD-998BAB471EC6,RefCountry,ceds.ed.gov,UA,2330,UKRAINE,True\r\n",
							"    EBF9A8F9-C0CC-4386-B221-25609FB31328,RefCountry,ceds.ed.gov,AE,2340,UNITED ARAB EMIRATES,True\r\n",
							"    3B3D1E6C-28D7-4189-8C7F-607F0211969B,RefCountry,ceds.ed.gov,GB,2350,UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND,True\r\n",
							"    B27E984F-0441-4833-8724-60E2496A47D7,RefCountry,ceds.ed.gov,US,2360,UNITED STATES OF AMERICA,True\r\n",
							"    24D20FA9-94ED-43EB-AC99-0A2E3E0E3A73,RefCountry,ceds.ed.gov,UM,2370,UNITED STATES MINOR OUTLYING ISLANDS,True\r\n",
							"    7EBF4E35-914B-4DB3-9827-08B9A4D3F45B,RefCountry,ceds.ed.gov,UY,2380,URUGUAY,True\r\n",
							"    9F932DC2-F603-4B5E-8F12-0BDD1E6AB1B8,RefCountry,ceds.ed.gov,UZ,2390,UZBEKISTAN,True\r\n",
							"    E8FDD235-C19F-4F0F-9300-78E5C22C70F2,RefCountry,ceds.ed.gov,VU,2400,VANUATU,True\r\n",
							"    F4FCCBA2-DCD9-403A-AF1E-9450EDAA0BDD,RefCountry,ceds.ed.gov,VE,2410,VENEZUELA (BOLIVARIAN REPUBLIC OF),True\r\n",
							"    F3CE298A-889D-4E33-B23B-0436D79AE5CA,RefCountry,ceds.ed.gov,VN,2420,VIET NAM,True\r\n",
							"    8F01500D-B796-48A3-B18D-26FB561A0A63,RefCountry,ceds.ed.gov,VG,2430,VIRGIN ISLANDS (BRITISH),True\r\n",
							"    4783FC4D-9665-4346-8C9D-4DA16D655DFF,RefCountry,ceds.ed.gov,VI,2440,VIRGIN ISLANDS (U.S.),True\r\n",
							"    C98465F0-6A37-4D23-97FE-845E92F82823,RefCountry,ceds.ed.gov,WF,2450,WALLIS AND FUTUNA,True\r\n",
							"    5CA05C14-7A46-4CF2-8E66-2A901E95ADE0,RefCountry,ceds.ed.gov,EH,2460,WESTERN SAHARA,True\r\n",
							"    81539402-144E-46BC-9ED0-FF0C666FDE08,RefCountry,ceds.ed.gov,YE,2470,YEMEN,True\r\n",
							"    2EB51FA4-1241-4614-87FE-190896B35849,RefCountry,ceds.ed.gov,ZM,2480,ZAMBIA,True\r\n",
							"    F0F142DC-C1C0-425E-9961-E438DEDBEB57,RefCountry,ceds.ed.gov,ZW,2490,ZIMBABWE,True\r\n",
							"    F772D02B-3B1E-41A4-941B-77BEBB2AF8B2,RefPersonRelationship,imsglobal.com,parent,10,Parent,True\r\n",
							"    C9D0304D-A529-409A-9C4E-C008E76EFA6E,RefPersonRelationship,imsglobal.com,relative,20,Relative,True\r\n",
							"    FE54C353-BFE9-4229-BDF7-F421423739A3,RefPersonRelationship,imsglobal.com,guardian,30,Guardian,True\r\n",
							"    0D16FCED-6DC7-4235-90BF-724D40ABC7BD,RefStudentOrgRole,imsglobal.org,student,10,Student,True\r\n",
							"    2BE22270-5236-41BF-B359-167E725F45DA,RefStaffOrgRole,imsglobal.org,aide,10,Aide,True\r\n",
							"    96DB6F6A-B3C7-4A8C-8885-42AFC7598528,RefStaffOrgRole,imsglobal.org,proctor,20,Proctor,True\r\n",
							"    03FFC8C5-9C64-4321-8041-334F07A252F0,RefStaffOrgRole,imsglobal.org,teacher,30,Teacher,True\r\n",
							"    6A43802A-4372-44D3-B3F0-7B9BC24EF9D8,RefStaffOrgRole,imsglobal.org,administrator,40,Administrator,True\r\n",
							"    DA004FFF-9B71-4926-9D7C-79B83B19F31B,RefStaffOrgRole,microsoft.com,itAdmin,50,IT Admin,True\r\n",
							"    05DE1E52-6991-4F77-BBC6-620A7171E1A6,RefStaffOrgRole,microsoft.com,officeStaff,60,Office Staff,True\r\n",
							"    57AA30CB-DAD3-4D73-B568-DFD0B431BD83,RefStaffOrgRole,microsoft.com,nurse,70,Nurse,True\r\n",
							"    8F5976E5-3EFB-45E7-8751-89C83BB10D86,RefStaffOrgRole,microsoft.com,occupationalTherapist,80,Occupational Therapist,True\r\n",
							"    DA01A84E-3E08-4047-996E-1240243825E6,RefStaffOrgRole,microsoft.com,physicalTherapist,90,Physical Therapist,True\r\n",
							"    CAA12695-48A2-4EAF-9798-EDB972CF89F2,RefStaffOrgRole,microsoft.com,speechTherapist,100,Speech Therapist,True\r\n",
							"    A5E30209-2416-47FF-BB2B-B30892A4544D,RefStaffOrgRole,microsoft.com,visionTherapist,110,Vision,True\r\n",
							"    4F0164B4-3827-4993-AEF5-29B5CCEAFA48,RefStaffOrgRole,microsoft.com,paraprofessional,120,Paraprofessional,True\r\n",
							"    329EF3DE-913A-45C2-B235-9B5BB9D1B576,RefStaffOrgRole,microsoft.com,teacherAssistant,130,Teacher Assistant,True\r\n",
							"    BC319764-C1EB-4DFA-8C43-65C8C96B5BBF,RefStaffOrgRole,microsoft.com,staff,140,Staff,True\r\n",
							"    D1CA502E-DB62-41D2-B438-AC669E6A9663,RefStudentSectionRole,imsglobal.org,student,10,Student,True\r\n",
							"    38846D3C-397F-40BB-B43E-89092FFB7FAD,RefStaffSectionRole,imsglobal.org,aide,10,Aide,True\r\n",
							"    453DD32F-1088-4BD4-9B0E-FD4AC325D676,RefStaffSectionRole,imsglobal.org,proctor,20,Proctor,True\r\n",
							"    C943E793-2DB7-47C0-B187-A9ED65EEBD5B,RefStaffSectionRole,imsglobal.org,teacher,30,Teacher,True\r\n",
							"    00574D97-8A98-454E-A879-9465A798CFE2,RefStaffSectionRole,microsoft.com,nurse,40,Nurse,True\r\n",
							"    6960C6A5-E850-4547-BF15-762A7260F7D9,RefStaffSectionRole,microsoft.com,occupationalTherapist,50,Occupational Therapist,True\r\n",
							"    F62E6FE1-DAC6-43D1-A6C9-EFB8429BA9C9,RefStaffSectionRole,microsoft.com,physicalTherapist,60,Physical Therapist,True\r\n",
							"    BD3A443E-778B-4B6F-85F7-D6B6E30D1795,RefStaffSectionRole,microsoft.com,speechTherapist,70,Speech Therapist,True\r\n",
							"    54970CC5-EE96-4A29-8A95-441109DEEBD0,RefStaffSectionRole,microsoft.com,visionTherapist,80,Vision,True\r\n",
							"    7690289D-A685-4886-B5A4-122544100B20,RefStaffSectionRole,microsoft.com,paraprofessional,90,Paraprofessional,True\r\n",
							"    C16353AD-902F-4CDC-86A5-30491A0612EA,RefStaffSectionRole,microsoft.com,teacherAssistant,100,Teacher Assistant,True\r\n",
							"    BBE8A650-B452-4B05-9CB6-D800F08A5E3C,RefStaffSectionRole,microsoft.com,staff,110,Staff,True\r\n",
							"    08DF30A4-DFF6-4EC9-8BDA-118F1B40FC4A,RefPersonGroupRole,microsoft.com,participant,10,Participant,True\r\n",
							"    632D8FC9-DEC5-420E-B8F4-D6CCFC3349F6,RefPersonGroupRole,microsoft.com,coach,20,Coach,True\r\n",
							"    E53285DE-8216-45C9-B0D0-3962883E425C,RefPersonGroupRole,microsoft.com,assistant,30,Assistant,True\r\n",
							"    353ABDDA-19D6-4008-8C56-506C65900782,RefGradeLevel,ceds.ed.gov,IT,10,Infant/Toddler,True\r\n",
							"    49EA747D-0A19-4EDF-BCFB-BB5F0166381F,RefGradeLevel,ceds.ed.gov,PR,20,Preschool,True\r\n",
							"    72B89395-E9E3-4564-8DAF-88AEA58AFED3,RefGradeLevel,ceds.ed.gov,PK,30,Prekindergarten,True\r\n",
							"    0CDED2E6-57B6-4A21-ABCC-1E3496DFB73E,RefGradeLevel,ceds.ed.gov,TK,40,Transitional Kindergarten,True\r\n",
							"    B1DA4920-25D6-4561-9221-ED4352F6B1B5,RefGradeLevel,ceds.ed.gov,KG,50,Kindergarten,True\r\n",
							"    6C0804DB-FF53-4CBB-88DC-BD00724A549E,RefGradeLevel,ceds.ed.gov,01,60,First grade,True\r\n",
							"    F81116C9-B37C-405F-A463-9E6279442376,RefGradeLevel,ceds.ed.gov,02,70,Second grade,True\r\n",
							"    E75F1B3A-3FFA-4E4D-8B55-6288F34FA491,RefGradeLevel,ceds.ed.gov,03,80,Third grade,True\r\n",
							"    5C9C9038-3E99-4EFD-9AF7-4B2C465D9ACA,RefGradeLevel,ceds.ed.gov,04,90,Fourth grade,True\r\n",
							"    490E900A-7629-47CD-B677-381718F9E2C4,RefGradeLevel,ceds.ed.gov,05,100,Fifth grade,True\r\n",
							"    DF413EB6-47E5-46DD-88AF-6478B2854D4A,RefGradeLevel,ceds.ed.gov,06,110,Sixth grade,True\r\n",
							"    6C2F76EA-5B22-4293-BA16-5216361AD233,RefGradeLevel,ceds.ed.gov,07,120,Seventh grade,True\r\n",
							"    B106D95C-CA5E-457E-B848-3A231917C34C,RefGradeLevel,ceds.ed.gov,08,130,Eighth grade,True\r\n",
							"    4429F333-536A-458F-AE87-FDF5471B5E8D,RefGradeLevel,ceds.ed.gov,09,140,Ninth grade,True\r\n",
							"    B6747F48-667B-4F0D-8438-9D1B180A3791,RefGradeLevel,ceds.ed.gov,10,150,Tenth grade,True\r\n",
							"    490702EA-9AC0-435E-AB8F-C1999BB0B393,RefGradeLevel,ceds.ed.gov,11,160,Eleventh grade,True\r\n",
							"    37DB651A-E2CC-4C16-8F52-27D4FA17B680,RefGradeLevel,ceds.ed.gov,12,170,Twelfth grade,True\r\n",
							"    8EDEF0A7-FE7A-48DD-A268-CA187E3986A5,RefGradeLevel,ceds.ed.gov,13,180,Grade 13,True\r\n",
							"    9C833058-4DA4-46D8-BB96-9A389105205E,RefGradeLevel,ceds.ed.gov,PS,190,Postsecondary,True\r\n",
							"    87DFDF97-B458-4F24-AD53-A1FEE4850309,RefGradeLevel,ceds.ed.gov,UG,200,Ungraded,True\r\n",
							"    7C0F1F97-101A-4E77-BC41-BAB1CC336733,RefGradeLevel,ceds.ed.gov,Other,210,Other,True\r\n",
							"    171E5E6E-4A6C-45B6-A185-1C8A63886B1C,RefRace,imsglobal.org,americanIndianOrAlaskaNative,10,American Indian or Alaska Native,True\r\n",
							"    49870DDA-FAD1-468E-B81A-103EB6ACC807,RefRace,imsglobal.org,asian,20,Asian,True\r\n",
							"    C417FFAF-9B5D-4809-9AD0-0CC88B334C1E,RefRace,imsglobal.org,blackOrAfricanAmerican,30,Black or African American,True\r\n",
							"    1DE06A27-C07B-4BA4-9228-B76CD70A6148,RefRace,imsglobal.org,nativeHawaiianOrOtherPacificIslander,40,Native Hawaiian or Other Pacific Islander,True\r\n",
							"    B953AE14-E0D1-47D3-B250-C72A8B0290DB,RefRace,imsglobal.org,white,50,White,True\r\n",
							"    547E761B-45D4-4A24-B1D7-814E4ABA35C2,RefEthnicity,imsglobal.org,hispanicOrLatinoEthnicity,10,Hispanic or Latino Ethnicity,True\r\n",
							"    08EAFC29-8F6D-4FF5-83A4-71B131D0E7DB,RefEnrollmentStatus,microsoft.com,ConcurrentlyEnrolled,10,Concurrently enrolled,True\r\n",
							"    F36F047A-F410-4761-B41F-17B952A8EAD4,RefEnrollmentStatus,microsoft.com,CurrentlyEnrolled,10,Currently enrolled,True\r\n",
							"    918F8FB7-D630-406F-BF04-62BF1255A148,RefEnrollmentStatus,microsoft.com,PreviouslyEnrolled,30,Previously enrolled,True\r\n",
							"    BEC33C7F-01C1-41EA-818F-FBFDAE867EB7,RefEnrollmentStatus,microsoft.com,Transferring,40,Transferring (will enroll),True\r\n",
							"    7DAF8820-6691-4D61-A210-CE94EA7D3667,RefIdentifierType,microsoft.com,ActiveDirectoryId,10,Active Directory Id,True\r\n",
							"    DB231C72-7C41-4A65-9A3D-49B9F6CD78C4,RefIdentifierType,microsoft.com,Fed,20,Federal Id,True\r\n",
							"    5D464768-0162-4B69-91CA-49F53AA0A474,RefIdentifierType,imsglobal.org,LTIId,30,LTI Id,True\r\n",
							"    450E6525-61A6-4BF6-A3D5-F95EB5CB1183,RefIdentifierType,imsglobal.org,username,40,Username (OneRoster),True\r\n",
							"    D787E8F6-4DD3-4C89-8293-CB3CDD0CC0A4,RefIdentifierType,imsglobal.org,identifier,50,Identifier (OneRoster),True\r\n",
							"    CEEF7E8E-E083-4048-B3C0-E7D1EE37A4E6,RefSectionType,imsglobal.org,homeroom,10,Homeroom,True\r\n",
							"    96669810-AB33-4B0F-92BE-6E2CC6F30EE9,RefSectionType,imsglobal.org,scheduled,20,Scheduled,True\r\n",
							"    E5F838D4-21C3-4932-850C-0BE7B169A85C,RefPublicSchoolResidenceStatus,ceds.ed.gov,01652,10,Resident of administrative unit and usual school attendance area.,True\r\n",
							"    901B2D88-967B-499B-91E8-9938CD03985F,RefPublicSchoolResidenceStatus,ceds.ed.gov,01653,20,\"Resident of administrative unit, but of other school attendance area.\",True\r\n",
							"    EFB677F4-D913-4A7E-A59D-8DD426CA7256,RefPublicSchoolResidenceStatus,ceds.ed.gov,01654,30,\"Resident of this state, but not of this administrative unit.\",True\r\n",
							"    3B5CBE72-809B-47C5-97BC-84EDF473CCFF,RefPublicSchoolResidenceStatus,ceds.ed.gov,01655,40,Resident of an administrative unit that crosses state boundaries.,True\r\n",
							"    C5BA9B59-F4A3-4506-BA0E-7F5967292D7A,RefPublicSchoolResidenceStatus,ceds.ed.gov,01656,50,Resident of another state.,True\r\n",
							"    BF84752E-4E3F-4B80-BED0-2DE4ABB355D5,RefRace,imsglobal.org,demographicRaceTwoOrMoreRaces,60,Designates multiple races,True\r\n",
							"    4B969AD4-3DF0-4C81-B586-E08DB2F89974,RefAcademicSubject,nces.ed.gov,01,10,English Language and Literature,True\r\n",
							"    DC5AE6F7-F7F7-4B0A-B838-C6A53947FC39,RefAcademicSubject,nces.ed.gov,02,20,Mathematics,True\r\n",
							"    3621BA8C-DA33-4230-AE29-7A69A674CAA1,RefAcademicSubject,nces.ed.gov,03,30,Life and Physical Sciences,True\r\n",
							"    3BCAA0B5-E890-4D44-9630-C2618FD8E872,RefAcademicSubject,nces.ed.gov,04,40,Social Sciences and History,True\r\n",
							"    DD70C99E-4863-4E76-BDC1-998CEE2E6075,RefAcademicSubject,nces.ed.gov,05,50,Visual and Performing Arts,True\r\n",
							"    0EFD2AC5-AA04-406D-BD9A-6C12602B4F44,RefAcademicSubject,nces.ed.gov,07,60,Religious Education and Theology,True\r\n",
							"    6ACD32DE-CF55-4D57-8058-BEADA9FA6745,RefAcademicSubject,nces.ed.gov,08,70,\"Physical, Health, and Safety Education\",True\r\n",
							"    FC6955CD-7355-41DC-A968-EE9BFBA51E19,RefAcademicSubject,nces.ed.gov,09,80,Military Science,True\r\n",
							"    5956FCAC-86B1-4110-B041-37569BD48E52,RefAcademicSubject,nces.ed.gov,10,90,Information Technology,True\r\n",
							"    B6EB7682-6A40-42E4-9963-AF9BB9890ECE,RefAcademicSubject,nces.ed.gov,11,100,Communication and Audio/Visual Technology,True\r\n",
							"    956A937F-A4EA-433D-9736-750E969745E5,RefAcademicSubject,nces.ed.gov,12,110,Business and Marketing,True\r\n",
							"    9F434285-9292-40F5-859D-715F1020AFFD,RefAcademicSubject,nces.ed.gov,13,120,Manufacturing,True\r\n",
							"    480A0424-CBE9-43B3-AF7F-F8BC3D11FECE,RefAcademicSubject,nces.ed.gov,14,130,Health Care Sciences,True\r\n",
							"    38BCFB35-1B7C-4E00-9F15-A9BB9347F7DE,RefAcademicSubject,nces.ed.gov,15,140,\"Public, Protective, and Government Service\",True\r\n",
							"    22A4D31A-E5A2-4C92-84B1-1E924547E083,RefAcademicSubject,nces.ed.gov,16,150,Hospitality and Tourism,True\r\n",
							"    49D3D99D-4AEE-4B59-B286-01978A458348,RefAcademicSubject,nces.ed.gov,17,160,Architecture and Construction,True\r\n",
							"    3690A6BE-5A9E-4D50-A97C-0368EA998A77,RefAcademicSubject,nces.ed.gov,18,170,\"Agriculture, Food, and Natural Resources\",True\r\n",
							"    2A52F377-0668-432C-BAB3-47669DDBFAA8,RefAcademicSubject,nces.ed.gov,19,180,Human Services,True\r\n",
							"    F183FE55-3189-4DA0-8FCF-8B027DD3FFD9,RefAcademicSubject,nces.ed.gov,20,190,\"Transportation, Distribution and Logistics\",True\r\n",
							"    2A7AC5E0-638E-4C56-A9B1-0EA0C4C068E8,RefAcademicSubject,nces.ed.gov,21,200,Engineering and Technology,True\r\n",
							"    B0095617-E1D0-4ADC-B07D-E96D06FFEEFB,RefAcademicSubject,nces.ed.gov,22,210,Miscellaneous,True\r\n",
							"    FC893BDD-3B3F-40F8-BD0E-921B4B7555D6,RefAcademicSubject,nces.ed.gov,23,220,Non-Subject-Specific,True\r\n",
							"    E937C1C2-398F-4DC2-A76A-0B39F3441311,RefAcademicSubject,nces.ed.gov,24,230,World Languages,True\r\n",
							"    F4DF5BDD-6698-4BB9-BC06-AA91325DDB3B,RefOrgType,microsoft.com,municipality,130,Municipality,True\r\n",
							"    8180C51D-59D8-42F5-B283-5F73CCDFE71E,RefOrgType,microsoft.com,academicTrust,140,Academic Trust,True\r\n",
							"    AB328F3A-329D-46B2-89FE-04558D5F3C17,RefOrgType,microsoft.com,localAuthority,150,Local Authority,True\r\n",
							"    A8AAFD43-8EC5-4E23-B4E4-F5FEBCD4EB23,RefOrgType,microsoft.com,region,160,Region,True\r\n",
							"    2432F831-58B0-4418-89DA-3AFB83CAA406,RefOrgType,microsoft.com,division,170,Division,True\r\n",
							"    E5F64566-42B1-4170-91ED-9095A7AABDF8,RefOrgType,microsoft.com,province,180,Province,True\r\n",
							"    A7B552AB-5FEE-4106-A82A-B104AD802243,RefOrgType,microsoft.com,researchCenter,190,Research Center,True\r\n",
							"    4A7A8BDF-CE07-4CF2-A774-061EE8814FB9,RefOrgType,microsoft.com,program,200,Program,True\r\n",
							"    BBDFDE11-F33A-4552-B070-0FEF5786E08F,RefStaffOrgRole,microsoft.com,professor,150,professor,True\r\n",
							"    23CD21F1-9932-4EED-BD5C-EE99A6C57B31,RefStaffOrgRole,microsoft.com,researcher,160,researcher,True\r\n",
							"    2A92CC07-161E-497D-8807-249F6A20948F,RefStaffOrgRole,microsoft.com,lecturer,170,lecturer,True\r\n",
							"    11DE2FAC-CAB6-4726-9462-1C3D91091429,RefStaffOrgRole,microsoft.com,affiliate,180,affiliate,True\r\n",
							"    DB0D832C-AA17-4F43-AB2B-92562DF9EF11,RefStaffOrgRole,microsoft.com,adjunct,190,adjunct,True\r\n",
							"    865BC785-449E-4F0C-A72B-3F8553D83F8A,RefStaffOrgRole,microsoft.com,alumni,200,alumni,True\r\n",
							"    845C489B-2A41-4A8E-B118-3080AD568418,RefStaffOrgRole,microsoft.com,instructor,210,instructor,True\r\n",
							"    75A1395F-CD88-4362-BE34-0AB54235F24C,RefStaffOrgRole,microsoft.com,chair,220,chair,True\r\n",
							"    583A3E66-878F-44E7-BBA3-1146C1BC5B2B,RefStaffOrgRole,microsoft.com,advisor,230,advisor,True\r\n",
							"    4D023BD0-FB4B-40D4-9C66-5995B1A765A6,RefStaffOrgRole,microsoft.com,faculty,240,faculty,True\r\n",
							"    0639C0E4-D351-42EF-92B4-8BD1CF27CA41,RefStaffOrgRole,microsoft.com,substitute,250,substitute,True\r\n",
							"    68294947-AA84-4D64-A9A3-16CBB1187E21,RefStaffOrgRole,microsoft.com,principal,260,principal,True\r\n",
							"    9D95BE64-81F1-49FA-8CC8-A93DD49B218F,RefStaffOrgRole,microsoft.com,specialServices,270,Special services,True\r\n",
							"    75A382BB-904C-461D-BE61-EDC0516B39D6,RefStaffSectionRole,microsoft.com,professor,120,professor,True\r\n",
							"    5742E90C-3600-4026-B014-3E0FFA5AC64C,RefStaffSectionRole,microsoft.com,researcher,130,researcher,True\r\n",
							"    08913527-F988-46E5-861A-A9C64A598CB5,RefStaffSectionRole,microsoft.com,lecturer,140,lecturer,True\r\n",
							"    8D939A14-7077-4A4A-88B5-ADB3C251BF17,RefStaffSectionRole,microsoft.com,affiliate,150,affiliate,True\r\n",
							"    6482B3B0-5A5C-4A32-820A-1749B323F9A9,RefStaffSectionRole,microsoft.com,adjunct,160,adjunct,True\r\n",
							"    65FB1E06-4E0C-4D69-8281-B1DD664FDF02,RefStaffSectionRole,microsoft.com,instructor,170,instructor,True\r\n",
							"    FDA194DD-3EBA-48AE-8ACE-83CE0A59C647,RefStaffSectionRole,microsoft.com,advisor,180,advisor,True\r\n",
							"    9C15F8C6-4287-4AF2-97C4-9A8AD1BE331E,RefStaffSectionRole,microsoft.com,faculty,190,faculty,True\r\n",
							"    75F91BF4-9816-4F36-8EC3-07EED1EE246E,RefStaffSectionRole,microsoft.com,substitute,200,substitute,True\r\n",
							"    15B67274-8286-4874-818B-AA361785B72D,RefStaffSectionRole,microsoft.com,principal,210,principal,True\r\n",
							"    6818DAAB-EBC6-4E3D-8DDE-2872F056F4B4,RefStaffSectionRole,microsoft.com,specialServices,220,Special services,True\r\n",
							"    9D829C49-EF4F-482C-AC37-10974F500889,RefGradeLevel,microsoft.com,PS1,220,Postsecondary freshman,True\r\n",
							"    72C52CC1-09B0-4F83-822C-3E6B41373250,RefGradeLevel,microsoft.com,PS2,230,Postsecondary sophomore,True\r\n",
							"    82C10216-45D1-4754-9B65-91906F220D97,RefGradeLevel,microsoft.com,PS3,240,Postsecondary junior,True\r\n",
							"    941D916E-900F-4AAE-862A-A37203ABB1CB,RefGradeLevel,microsoft.com,PS4,250,Postsecondary senior,True\r\n",
							"    85149F2C-769C-40CE-9CC8-A8F999291899,RefGradeLevel,microsoft.com,undergraduate,260,undergraduate,True\r\n",
							"    85CF8FA2-B882-4B58-8886-6AE741C4F5C7,RefGradeLevel,microsoft.com,graduate,270,graduate,True\r\n",
							"    3C9654D0-496E-421B-AC5B-41AF7A35EE7A,RefGradeLevel,microsoft.com,postgraduate,280,Graduate with an emphasis on research,True\r\n",
							"    CFEAC234-B304-49C4-B814-5448AC3A8FFD,RefGradeLevel,microsoft.com,alumni,290,alumni,True\r\n",
							"    BC7BD092-C3C1-4FAC-B82B-3D074DF4C832,RefGradeLevel,microsoft.com,adultEducation,300,Adult Education,True\"\"\""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_Examples')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f164601f-5014-4373-bf20-ab3452dc4a7c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"def create_sample_data():\r\n",
							"    new_rows = [('CA',22, 45000),(\"WA\",35,65000) ,(\"WA\",50,85000)]\r\n",
							"    demo_df = spark.createDataFrame(new_rows, ['state', 'age', 'salary'])\r\n",
							"    demo_df.show()\r\n",
							"#create_sample_data()\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {}
				},
				"metadata": {
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = 'oea'\r\n",
							"method_name = ''\r\n",
							"kwargs = '{}'"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /ContosoSIS_py"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0b3ff39f-c2b1-4449-bde4-5a37d6213e83"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/1735300c-0c18-453f-b3b7-8b49cbac9c06/resourceGroups/rg-oea-mmarek/providers/Microsoft.Synapse/workspaces/syn-oea-mmarek/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-mmarek.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"from delta.tables import DeltaTable\n",
							"from notebookutils import mssparkutils\n",
							"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, DoubleType, ArrayType, TimestampType, BooleanType, ShortType, DateType\n",
							"from pyspark.sql import functions as F\n",
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.utils import AnalysisException\n",
							"from opencensus.ext.azure.log_exporter import AzureLogHandler, logging\n",
							"import pandas as pd\n",
							"import sys\n",
							"import re\n",
							"import json\n",
							"import datetime\n",
							"import pytz\n",
							"import random\n",
							"import io\n",
							"\n",
							"logger = logging.getLogger('OEA')\n",
							"\n",
							"class OEA:\n",
							"    def __init__(self, storage_account='', instrumentation_key=None, salt='', logging_level=logging.DEBUG):\n",
							"        if storage_account:\n",
							"            self.storage_account = storage_account\n",
							"        else:\n",
							"            oea_id = mssparkutils.env.getWorkspaceName()[8:] # extracts the OEA id for this OEA instance from the synapse workspace name (based on OEA naming convention)\n",
							"            self.storage_account = 'stoea' + oea_id # sets the name of the storage account based on OEA naming convention\n",
							"            self.keyvault = 'kv-oea-' + oea_id\n",
							"        self.keyvault_linked_service = 'LS_KeyVault_OEA'\n",
							"        self.serverless_sql_endpoint = mssparkutils.env.getWorkspaceName() + '-ondemand.sql.azuresynapse.net'\n",
							"        self._initialize_logger(instrumentation_key, logging_level)\n",
							"        self.salt = salt\n",
							"        self.timezone = 'EST'\n",
							"        self.stage1np = 'abfss://stage1np@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.stage2np = 'abfss://stage2np@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.stage2p = 'abfss://stage2p@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.stage3np = 'abfss://stage3np@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.stage3p = 'abfss://stage3p@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.framework_path = 'abfss://oea-framework@' + self.storage_account + '.dfs.core.windows.net'\n",
							"\n",
							"        # Initialize framework db\n",
							"        spark.sql(f\"CREATE DATABASE IF NOT EXISTS oea\")\n",
							"        spark.sql(f\"CREATE TABLE IF NOT EXISTS oea.env (name string not null, value string not null, description string) USING DELTA LOCATION '{self.framework_path}/db/env'\")\n",
							"        df = spark.sql(\"select value from oea.env where name='storage_account'\")\n",
							"        if df.first(): spark.sql(f\"UPDATE oea.env set value='{self.storage_account}' where name='storage_account'\")\n",
							"        else: spark.sql(f\"INSERT INTO oea.env VALUES ('storage_account', '{self.storage_account}', 'The name of the data lake storage account for this OEA instance.')\")\n",
							"        spark.sql(f\"CREATE TABLE IF NOT EXISTS OEA.watermark (source string not null, entity string not null, watermark timestamp not null) USING DELTA LOCATION '{self.framework_path}/db/watermark'\")\n",
							"\n",
							"        logger.debug(\"OEA initialized.\")\n",
							"    \n",
							"    def path(self, container_name, directory_path=None):\n",
							"        if directory_path:\n",
							"            return f'abfss://{container_name}@{self.storage_account}.dfs.core.windows.net/{directory_path}'\n",
							"        else:\n",
							"            return f'abfss://{container_name}@{self.storage_account}.dfs.core.windows.net'\n",
							"\n",
							"    def convert_path(self, path):\n",
							"        \"\"\" Converts the given path into a valid url.\n",
							"            eg, convert_path('stage1np/contoso_sis/student/*') # returns abfss://stage1np@storageaccount.dfs.core.windows.net/contoso_sis/student/*\n",
							"        \"\"\"\n",
							"        path_args = path.split('/')\n",
							"        stage = path_args.pop(0)\n",
							"        return self.path(stage, '/'.join(path_args))            \n",
							"\n",
							"    def _initialize_logger(self, instrumentation_key, logging_level):\n",
							"        logging.lastResort = None\n",
							"        # the logger will print an error like \"ValueError: I/O operation on closed file\" because we're trying to have log messages also print to stdout\n",
							"        # and apparently this causes issues on some of the spark executor nodes. The bottom line is that we don't want these logging errors to get printed in the notebook output.\n",
							"        logging.raiseExceptions = False\n",
							"        logger.setLevel(logging_level)\n",
							"\n",
							"        handler = logging.StreamHandler(sys.stdout)\n",
							"        handler.setLevel(logging_level)\n",
							"        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n",
							"        handler.setFormatter(formatter)\n",
							"        logger.addHandler(handler)\n",
							"\n",
							"        if instrumentation_key:\n",
							"            # Setup logging to go to app insights (more info here: https://github.com/balakreshnan/Samples2021/blob/main/Synapseworkspace/opencensuslog.md#azure-synapse-spark-logs-runtime-errors-to-application-insights)\n",
							"            logger.addHandler(AzureLogHandler(connection_string='InstrumentationKey=' + instrumentation_key))\n",
							"\n",
							"    def get_value_from_db(self, query):\n",
							"        df = spark.sql(query)\n",
							"        if df.first(): return df.first()[0]\n",
							"        else: return None\n",
							"\n",
							"    def get_last_watermark(self, source, entity):\n",
							"        return self.get_value_from_db(f\"select w.watermark from oea.watermark w where w.source='{source}' and w.entity='{entity}' order by w.watermark desc\")\n",
							"\n",
							"    def insert_watermark(self, source, entity, watermark_datetime):\n",
							"        spark.sql(f\"insert into oea.watermark values ('{source}', '{entity}', '{watermark_datetime}')\")\n",
							"\n",
							"    def get_secret(self, secret_name):\n",
							"        \"\"\" Retrieves the specified secret from the keyvault.\n",
							"            This method assumes that the keyvault linked service has been setup and is accessible.\n",
							"        \"\"\"\n",
							"        sc = SparkSession.builder.getOrCreate()\n",
							"        token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\n",
							"        value = token_library.getSecret(self.keyvault, secret_name, self.keyvault_linked_service)        \n",
							"        return value\n",
							"\n",
							"    def delete(self, path):\n",
							"        oea.rm_if_exists(self.convert_path(path))\n",
							"\n",
							"    def land(self, data_source, entity, df, partition_label='', format_str='csv', header=True, mode='overwrite'):\n",
							"        \"\"\" Lands data in stage1np. If partition label is not provided, the current datetime is used with the label of 'batchdate'.\n",
							"            eg, land('contoso_isd', 'student', data, 'school_year=2021')\n",
							"        \"\"\"\n",
							"        tz = pytz.timezone(self.timezone)\n",
							"        datetime_str = datetime.datetime.now(tz).replace(microsecond=0).isoformat()\n",
							"        datetime_str = datetime_str.replace(':', '') # Path names can't have a colon - https://github.com/apache/hadoop/blob/trunk/hadoop-common-project/hadoop-common/src/site/markdown/filesystem/introduction.md#path-names\n",
							"        df.write.format(format_str).save(self.path('stage1np', f'{data_source}/{entity}/{partition_label}/batchdate={datetime_str}'), header=header, mode=mode)\n",
							"\n",
							"    def load(self, folder, table, stage=None, data_format='delta'):\n",
							"        \"\"\" Loads a dataframe based on the path specified in the given args \"\"\"\n",
							"        if stage is None: stage = self.stage2p\n",
							"        path = f\"{stage}/{folder}/{table}\"\n",
							"        try:\n",
							"            df = spark.read.load(f\"{stage}/{folder}/{table}\", format=data_format)\n",
							"            return df        \n",
							"        except AnalysisException as e:\n",
							"            raise ValueError(\"Failed to load. Are you sure you have the right path?\\nMore info below:\\n\" + str(e)) \n",
							"\n",
							"    def load_csv(self, path, header=True):\n",
							"        \"\"\" Loads a dataframe based on the path specified \n",
							"            eg, df = load_csv('stage1np/example/student/*')\n",
							"        \"\"\"\n",
							"        url_path = self.convert_path(path)\n",
							"        try:\n",
							"            df = spark.read.load(url_path, format='csv', header=header)\n",
							"            return df        \n",
							"        except AnalysisException as e:\n",
							"            raise ValueError(f\"Failed to load from: {url_path}. Are you sure you have the right path?\\nMore info below:\\n\" + str(e))\n",
							"\n",
							"    def load_delta(self, path):\n",
							"        \"\"\" Loads a dataframe based on the path specified \n",
							"            eg, df = load_delta('stage2np/example/student/*')\n",
							"        \"\"\"\n",
							"        url_path = self.convert_path(path)\n",
							"        try:\n",
							"            df = spark.read.load(url_path, format='delta')\n",
							"            return df        \n",
							"        except AnalysisException as e:\n",
							"            raise ValueError(f\"Failed to load from: {url_path}. Are you sure you have the right path?\\nMore info below:\\n\" + str(e))\n",
							"\n",
							"    def load_from_stage1(self, path_and_filename, data_format='csv', header=True):\n",
							"        \"\"\" Loads a dataframe with data from stage1, based on the path specified in the given args \"\"\"\n",
							"        path = f\"{self.stage1np}/{path_and_filename}\"\n",
							"        df = spark.read.load(path, format=data_format, header=header)\n",
							"        return df        \n",
							"\n",
							"    def load_sample_from_csv_file(self, path_and_filename, header=True, stage=None):\n",
							"        \"\"\" Loads a sample from the specified csv file and returns a pandas dataframe.\n",
							"            Ex: print(load_sample_from_csv_file('/student_data/students.csv'))\n",
							"        \"\"\"\n",
							"        if stage is None: stage = self.stage1np\n",
							"        csv_str = mssparkutils.fs.head(f\"{stage}/{path_and_filename}\") # https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/microsoft-spark-utilities?pivots=programming-language-python#preview-file-content\n",
							"        complete_lines = re.match(r\".*\\n\", csv_str, re.DOTALL).group(0)\n",
							"        if header: header = 0 # for info on why this is needed: https://pandas.pydata.org/pandas-docs/dev/reference/api/pandas.read_csv.html\n",
							"        else: header = None\n",
							"        pdf = pd.read_csv(io.StringIO(complete_lines), sep=',', header=header)\n",
							"        return pdf\n",
							"\n",
							"    def print_stage(self, path):\n",
							"        \"\"\" Prints out the highlevel contents of the specified stage.\"\"\"\n",
							"        msg = path + \"\\n\"\n",
							"        folders = self.get_folders(path)\n",
							"        for folder_name in folders:\n",
							"            entities = self.get_folders(path + '/' + folder_name)\n",
							"            msg += f\"{folder_name}: {entities}\\n\"\n",
							"        print(msg)            \n",
							"\n",
							"    def fix_column_names(self, df):\n",
							"        \"\"\" Fix column names to satisfy the Parquet naming requirements by substituting invalid characters with an underscore. \"\"\"\n",
							"        df_with_valid_column_names = df.select([F.col(col).alias(re.sub(\"[ ,;{}()\\n\\t=]+\", \"_\", col)) for col in df.columns])\n",
							"        return df_with_valid_column_names\n",
							"\n",
							"    def to_spark_schema(self, schema):#: list[list[str]]):\n",
							"        \"\"\" Creates a spark schema from a schema specified in the OEA schema format. \n",
							"            Example:\n",
							"            schemas['Person'] = [['Id','string','hash'],\n",
							"                                    ['CreateDate','timestamp','no-op'],\n",
							"                                    ['LastModifiedDate','timestamp','no-op']]\n",
							"            to_spark_schema(schemas['Person'])\n",
							"        \"\"\"\n",
							"        fields = []\n",
							"        for col_name, dtype, op in schema:\n",
							"            fields.append(StructField(col_name, globals()[dtype.lower().capitalize() + \"Type\"](), True))\n",
							"        spark_schema = StructType(fields)\n",
							"        return spark_schema\n",
							"\n",
							"    def ingest_incremental_data(self, source_system, tablename, schema, partition_by, primary_key='id', data_format='csv', has_header=True):\n",
							"        \"\"\" Processes incremental batch data from stage1 into stage2 \"\"\"\n",
							"        source_path = f'{self.stage1np}/{source_system}/{tablename}'\n",
							"        p_destination_path = f'{self.stage2p}/{source_system}/{tablename}_pseudo'\n",
							"        np_destination_path = f'{self.stage2np}/{source_system}/{tablename}_lookup'\n",
							"        logger.info(f'Processing incremental data from: {source_path} and writing out to: {p_destination_path}')\n",
							"\n",
							"        if has_header: header_flag = 'true'\n",
							"        else: header_flag = 'false'\n",
							"        spark_schema = self.to_spark_schema(schema)\n",
							"        df = spark.readStream.load(source_path + '/*', format=data_format, header=header_flag, schema=spark_schema)\n",
							"        #df = spark.read.load(source_path + '/*', format=data_format, header=header_flag, schema=spark_schema)\n",
							"        #display(df)\n",
							"        #df = df.withColumn('batchdate', F.to_timestamp(df.batchdate, \"yyyy-MM-dd'T'HHmmssZ\"))\n",
							"        df = df.dropDuplicates([primary_key]) # drop duplicates across batches. More info: https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#streaming-deduplication\n",
							"        \n",
							"        df_pseudo, df_lookup = self.pseudonymize(df, schema)\n",
							"\n",
							"        if len(df_pseudo.columns) == 0:\n",
							"            logger.info('No data to be written to stage2p')\n",
							"        else:        \n",
							"            query = df_pseudo.writeStream.format(\"delta\").outputMode(\"append\").trigger(once=True).option(\"checkpointLocation\", source_path + '/_checkpoints/incremental_p').partitionBy(partition_by)\n",
							"            query = query.start(p_destination_path)\n",
							"            query.awaitTermination()   # block until query is terminated, with stop() or with error; A StreamingQueryException will be thrown if an exception occurs.\n",
							"            logger.info(query.lastProgress)\n",
							"\n",
							"        if len(df_lookup.columns) == 0:\n",
							"            logger.info('No data to be written to stage2np')\n",
							"        else:\n",
							"            query2 = df_lookup.writeStream.format(\"delta\").outputMode(\"append\").trigger(once=True).option(\"checkpointLocation\", source_path + '/_checkpoints/incremental_np').partitionBy(partition_by)\n",
							"            query2 = query2.start(np_destination_path)\n",
							"            query2.awaitTermination()   # block until query is terminated, with stop() or with error; A StreamingQueryException will be thrown if an exception occurs.\n",
							"            logger.info(query2.lastProgress)        \n",
							"\n",
							"    def _merge_into_table(self, df, destination_path, checkpoints_path, condition):\n",
							"        \"\"\" Merges data from the given dataframe into the delta table at the specified destination_path, based on the given condition.\n",
							"            If not delta table exists at the specified destination_path, a new delta table is created and the data from the given dataframe is inserted.\n",
							"            eg, merge_into_table(df_lookup, np_destination_path, source_path + '/_checkpoints/delta_np', \"current.id_pseudonym = updates.id_pseudonym\")\n",
							"        \"\"\"\n",
							"        if DeltaTable.isDeltaTable(spark, destination_path):      \n",
							"            dt = DeltaTable.forPath(spark, destination_path)\n",
							"            def upsert(batch_df, batchId):\n",
							"                dt.alias(\"current\").merge(batch_df.alias(\"updates\"), condition).whenMatchedUpdateAll().whenNotMatchedInsertAll().execute()                \n",
							"            query = df.writeStream.format(\"delta\").foreachBatch(upsert).outputMode(\"update\").trigger(once=True).option(\"checkpointLocation\", checkpoints_path)\n",
							"        else:\n",
							"            logger.info(f'Delta table does not yet exist at {destination_path} - creating one now and inserting initial data.')\n",
							"            query = df.writeStream.format(\"delta\").outputMode(\"append\").trigger(once=True).option(\"checkpointLocation\", checkpoints_path)\n",
							"        query = query.start(destination_path)\n",
							"        query.awaitTermination()   # block until query is terminated, with stop() or with error; A StreamingQueryException will be thrown if an exception occurs.\n",
							"        logger.info(query.lastProgress)    \n",
							"\n",
							"    def ingest_delta_data(self, source_system, tablename, schema, partition_by, primary_key='id', data_format='csv', has_header=True):\n",
							"        \"\"\" Processes delta batch data from stage1 into stage2 \"\"\"\n",
							"        source_path = f'{self.stage1np}/{source_system}/{tablename}'\n",
							"        p_destination_path = f'{self.stage2p}/{source_system}/{tablename}_pseudo'\n",
							"        np_destination_path = f'{self.stage2np}/{source_system}/{tablename}_lookup'\n",
							"        logger.info(f'Processing delta data from: {source_path} and writing out to: {p_destination_path}')\n",
							"\n",
							"        if has_header: header_flag = 'true'\n",
							"        else: header_flag = 'false'\n",
							"        spark_schema = self.to_spark_schema(schema)\n",
							"        df = spark.readStream.load(source_path + '/*', format=data_format, header=header_flag, schema=spark_schema)\n",
							"        \n",
							"        df_pseudo, df_lookup = self.pseudonymize(df, schema)\n",
							"\n",
							"        if len(df_pseudo.columns) == 0:\n",
							"            logger.info('No data to be written to stage2p')\n",
							"        else:\n",
							"            self._merge_into_table(df_pseudo, p_destination_path, source_path + '/_checkpoints/delta_p', \"current.id_pseudonym = updates.id_pseudonym\")\n",
							"\n",
							"        if len(df_lookup.columns) == 0:\n",
							"            logger.info('No data to be written to stage2np')\n",
							"        else:\n",
							"            self._merge_into_table(df_lookup, np_destination_path, source_path + '/_checkpoints/delta_np', \"current.id_pseudonym = updates.id_pseudonym\")\n",
							"\n",
							"    def ingest_snapshot_data(self, source_system, tablename, schema, partition_by, primary_key='id', data_format='csv', has_header=True):\n",
							"        \"\"\" Processes snapshot batch data from stage1 into stage2 \"\"\"\n",
							"        source_path = f'{self.stage1np}/{source_system}/{tablename}'\n",
							"        latest_batch = self.get_latest_folder(source_path)\n",
							"        source_path = source_path + '/' + latest_batch\n",
							"        p_destination_path = f'{self.stage2p}/{source_system}/{tablename}_pseudo'\n",
							"        np_destination_path = f'{self.stage2np}/{source_system}/{tablename}_lookup'\n",
							"        logger.info(f'Processing snapshot data from: {source_path} and writing out to: {p_destination_path}')\n",
							"\n",
							"        if has_header: header_flag = 'true'\n",
							"        else: header_flag = 'false'\n",
							"        spark_schema = self.to_spark_schema(schema)\n",
							"        df = spark.read.load(source_path, format=data_format, header=header_flag, schema=spark_schema)\n",
							"        df = df.dropDuplicates([primary_key]) # More info: https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#streaming-deduplication\n",
							"        \n",
							"        df_pseudo, df_lookup = self.pseudonymize(df, schema)\n",
							"\n",
							"        if len(df_pseudo.columns) == 0:\n",
							"            logger.info('No data to be written to stage2p')\n",
							"        else:\n",
							"            df_pseudo.write.save(p_destination_path, format='delta', mode='overwrite', partitionBy=partition_by) \n",
							"\n",
							"        if len(df_lookup.columns) == 0:\n",
							"            logger.info('No data to be written to stage2np')\n",
							"        else:\n",
							"            df_lookup.write.save(np_destination_path, format='delta', mode='overwrite', partitionBy=partition_by) \n",
							"\n",
							"    def pseudonymize(self, df, schema): #: list[list[str]]):\n",
							"        \"\"\" Performs pseudonymization of the given dataframe based on the provided schema.\n",
							"            For example, if the given df is for an entity called person, \n",
							"            2 dataframes will be returned, one called person that has hashed ids and masked fields, \n",
							"            and one called person_lookup that contains the original person_id, person_id_pseudo,\n",
							"            and the non-masked values for columns marked to be masked.\"\"\"\n",
							"        \n",
							"        df_pseudo = df_lookup = df\n",
							"\n",
							"        for col_name, dtype, op in schema:\n",
							"            if op == \"hash-no-lookup\" or op == \"hnl\":\n",
							"                # This means that the lookup can be performed against a different table so no lookup is needed.\n",
							"                df_pseudo = df_pseudo.withColumn(col_name, F.sha2(F.concat(F.col(col_name), F.lit(self.salt)), 256)).withColumnRenamed(col_name, col_name + \"_pseudonym\")\n",
							"                df_lookup = df_lookup.drop(col_name)           \n",
							"            elif op == \"hash\" or op == 'h':\n",
							"                df_pseudo = df_pseudo.withColumn(col_name, F.sha2(F.concat(F.col(col_name), F.lit(self.salt)), 256)).withColumnRenamed(col_name, col_name + \"_pseudonym\")\n",
							"                df_lookup = df_lookup.withColumn(col_name + \"_pseudonym\", F.sha2(F.concat(F.col(col_name), F.lit(self.salt)), 256))\n",
							"            elif op == \"mask\" or op == 'm':\n",
							"                df_pseudo = df_pseudo.withColumn(col_name, F.lit('*'))\n",
							"            elif op == \"partition-by\":\n",
							"                pass # make no changes for this column so that it will be in both dataframes and can be used for partitioning\n",
							"            elif op == \"no-op\" or op == 'x':\n",
							"                df_lookup = df_lookup.drop(col_name)\n",
							"\n",
							"        df_pseudo = self.fix_column_names(df_pseudo)\n",
							"        df_lookup = self.fix_column_names(df_lookup)\n",
							"\n",
							"        return (df_pseudo, df_lookup)\n",
							"\n",
							"    # Returns true if the path exists\n",
							"    def path_exists(self, path):\n",
							"        tableExists = False\n",
							"        try:\n",
							"            items = mssparkutils.fs.ls(path)\n",
							"            tableExists = True\n",
							"        except Exception as e:\n",
							"            # This Exception comes as a generic Py4JJavaError that occurs when the path specified is not found.\n",
							"            pass\n",
							"        return tableExists\n",
							"\n",
							"    def ls(self, path):\n",
							"        if not path.startswith(\"abfss:\"):\n",
							"            path = self.convert_path(path)\n",
							"        folders = []\n",
							"        files = []\n",
							"        try:\n",
							"            items = mssparkutils.fs.ls(path)\n",
							"            for item in items:\n",
							"                if item.isFile:\n",
							"                    files.append(item.name)\n",
							"                elif item.isDir:\n",
							"                    folders.append(item.name)\n",
							"        except Exception as e:\n",
							"            logger.warning(\"[OEA] Could not peform ls on specified path: \" + path + \"\\nThis may be because the path does not exist.\")\n",
							"        return (folders, files)\n",
							"\n",
							"    def print_stage(self, path):\n",
							"        print(path)\n",
							"        folders = self.get_folders(path)\n",
							"        for folder_name in folders:\n",
							"            entities = self.get_folders(path + '/' + folder_name)\n",
							"            print(f\"{folder_name}: {entities}\")\n",
							"\n",
							"    # Return the list of folders found in the given path.\n",
							"    def get_folders(self, path):\n",
							"        dirs = []\n",
							"        try:\n",
							"            items = mssparkutils.fs.ls(path)\n",
							"            for item in items:\n",
							"                #print(item.name, item.isDir, item.isFile, item.path, item.size)\n",
							"                if item.isDir:\n",
							"                    dirs.append(item.name)\n",
							"        except Exception as e:\n",
							"            logger.warning(\"[OEA] Could not get list of folders in specified path: \" + path + \"\\nThis may be because the path does not exist.\")\n",
							"        return dirs\n",
							"\n",
							"    def get_latest_folder(self, path):\n",
							"        folders = self.get_folders(path)\n",
							"        if len(folders) > 0: return folders[-1]\n",
							"        else: return None\n",
							"\n",
							"    # Remove a folder if it exists (defaults to use of recursive removal).\n",
							"    def rm_if_exists(self, path, recursive_remove=True):\n",
							"        try:\n",
							"            mssparkutils.fs.rm(path, recursive_remove)\n",
							"        except Exception as e:\n",
							"            pass\n",
							"\n",
							"    def pop_from_path(self, path):\n",
							"        \"\"\" Pops the last arg in a path and returns the path and the last arg as a tuple.\n",
							"            pop_from_path('abfss://stage2@xyz.dfs.core.windows.net/ms_insights/test.csv') # returns ('abfss://stage2@xyz.dfs.core.windows.net/ms_insights', 'test.csv')\n",
							"        \"\"\"\n",
							"        m = re.match(r\"(.*)\\/([^/]+)\", path)\n",
							"        return (m.group(1), m.group(2))\n",
							"\n",
							"    def parse_source_path(self, path):\n",
							"        \"\"\" Parses a path that looks like this: abfss://stage2p@stoeacisd3ggimpl3.dfs.core.windows.net/ms_insights\n",
							"            and returns a dictionary like this: {'stage_num': '2', 'ss': 'ms_insights'}\n",
							"            Note that it will also return a 'stage_num' of 2 if the path is stage2p or stage2np - this is by design because the spark db with the s2 prefix will be used for data in stage2 and stage2p.\n",
							"        \"\"\"\n",
							"        m = re.match(r\".*:\\/\\/stage(?P<stage_num>\\d+)[n]?[p]?@[^/]+\\/(?P<ss>[^/]+)\", path)\n",
							"        return m.groupdict()\n",
							"    \n",
							"    def create_lake_db(self, stage_num, source_dir, source_format='DELTA'):\n",
							"        \"\"\" Creates a spark db that points to data in the given stage under the specified source directory (assumes that every folder in the source_dir is a table).\n",
							"            Example: create_lake_db(2, 'contoso_sis')\n",
							"            Note that a spark db that points to source data in the delta format can't be queried via SQL serverless pool. More info here: https://docs.microsoft.com/en-us/azure/synapse-analytics/sql/resources-self-help-sql-on-demand#delta-lake\n",
							"        \"\"\"\n",
							"        db_name = f's{stage_num}_{source_dir}'\n",
							"        spark.sql(f'CREATE DATABASE IF NOT EXISTS {db_name}')\n",
							"        self.create_lake_views(db_name, self.path(f'stage{stage_num}p', source_dir), source_format)\n",
							"        self.create_lake_views(db_name, self.path(f'stage{stage_num}np', source_dir), source_format)\n",
							"        result = \"Database created: \" + db_name\n",
							"        logger.info(result)\n",
							"        return result        \n",
							"\n",
							"    def create_lake_views(self, db_name, source_path, source_format):\n",
							"        dirs = self.get_folders(source_path)\n",
							"        for table_name in dirs:\n",
							"            spark.sql(f\"create table if not exists {db_name}.{table_name} using {source_format} location '{source_path}/{table_name}'\")\n",
							"\n",
							"    def drop_lake_db(self, db_name):\n",
							"        spark.sql(f'DROP DATABASE IF EXISTS {db_name} CASCADE')\n",
							"        result = \"Database dropped: \" + db_name\n",
							"        logger.info(result)\n",
							"        return result       \n",
							"\n",
							"    def create_sql_db(self, stage_num, source_dir, source_format='DELTA'):\n",
							"        \"\"\" Prints out the sql script needed for creating a sql serverless db and set of views. \"\"\"\n",
							"        db_name = f'sqls{stage_num}_{source_dir}'\n",
							"        cmd += '-- Create a new sql script then execute the following in it:'\n",
							"        cmd += f\"IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = '{db_name}')\\nBEGIN\\n  CREATE DATABASE {db_name};\\nEND;\\nGO\\n\"\n",
							"        cmd += f\"USE {db_name};\\nGO\\n\\n\"\n",
							"        cmd += self.create_sql_views(self.path(f'stage{stage_num}p', source_dir), source_format)\n",
							"        cmd += self.create_sql_views(self.path(f'stage{stage_num}np', source_dir), source_format)\n",
							"        print(cmd)\n",
							"\n",
							"    def create_sql_views(self, source_path, source_format):\n",
							"        cmd = ''      \n",
							"        dirs = self.get_folders(source_path)\n",
							"        for table_name in dirs:\n",
							"            cmd += f\"CREATE OR ALTER VIEW {table_name} AS\\n  SELECT * FROM OPENROWSET(BULK '{source_path}/{table_name}', FORMAT='{source_format}') AS [r];\\nGO\\n\"\n",
							"        return cmd\n",
							"\n",
							"    def drop_sql_db(self, db_name):\n",
							"        print('Click on the menu next to the SQL db and select \"Delete\"')\n",
							"\n",
							"    # List installed packages\n",
							"    def list_packages(self):\n",
							"        import pkg_resources\n",
							"        for d in pkg_resources.working_set:\n",
							"            print(d)\n",
							"\n",
							"    def print_schema_starter(self, entity_name, df):\n",
							"        \"\"\" Prints a starter schema that can be modified as needed when developing the oea schema for a new module. \"\"\"\n",
							"        st = f\"self.schemas['{entity_name}'] = [\"\n",
							"        for col in df.schema:\n",
							"            st += f\"['{col.name}', '{str(col.dataType)[:-4].lower()}', 'no-op'],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\"\n",
							"        return st[:-11] + ']'\n",
							"\n",
							"    def write_rows_as_csv(data, folder, filename, container=None):\n",
							"        \"\"\" Writes a dictionary as a csv to the specified location. This is helpful when creating test data sets and landing them in stage1np.\n",
							"            data = [{'id':'1','fname':'John'}, {'id':'1','fname':'Jane'}]\n",
							"        \"\"\"\n",
							"        if container == None: container = self.stage1np\n",
							"        pdf = pd.DataFrame(data)\n",
							"        mssparkutils.fs.put(f\"{container}/{folder}/{filename}\", pdf.to_csv(index=False), True) # True indicates overwrite mode  \n",
							"\n",
							"    def write_rowset_as_csv(data, folder, container=None):\n",
							"        \"\"\" Writes out as csv rows the passed in data. The inbound data should be in a format like this:\n",
							"            data = { 'students':[{'id':'1','fname':'John'}], 'courses':[{'id':'31', 'name':'Math'}] }\n",
							"        \"\"\"\n",
							"        if container == None: container = self.stage1np\n",
							"        for entity_name, value in data.items():\n",
							"            pdf = pd.DataFrame(value)\n",
							"            mssparkutils.fs.put(f\"{container}/{folder}/{entity_name}.csv\", pdf.to_csv(index=False), True) # True indicates overwrite mode         \n",
							"\n",
							"    def create_empty_dataframe(self, schema):\n",
							"        \"\"\" Creates an empty dataframe based on the given schema which is specified as an array of column names and sql types.\n",
							"            eg, schema = [['data_source','string'], ['entity','string'], ['watermark','timestamp']]\n",
							"        \"\"\"\n",
							"        fields = []\n",
							"        for col_name, col_type in schema:\n",
							"            fields.append(StructField(col_name, globals()[col_type.lower().capitalize() + \"Type\"](), True))\n",
							"        spark_schema = StructType(fields)\n",
							"        df = spark.createDataFrame(spark.sparkContext.emptyRDD(), spark_schema)\n",
							"        return df\n",
							"\n",
							"    def delete_data_source(self, data_source):\n",
							"        self.rm_if_exists(self.convert_path(f'stage1np/{data_source}'))\n",
							"        self.rm_if_exists(self.convert_path(f'stage2np/{data_source}'))\n",
							"        self.rm_if_exists(self.convert_path(f'stage2p/{data_source}'))\n",
							"\n",
							"class BaseOEAModule:\n",
							"    \"\"\" Provides data processing methods for Contoso SIS data (the student information system for the fictional Contoso school district).  \"\"\"\n",
							"    def __init__(self, source_folder, pseudonymize = True):\n",
							"        self.source_folder = source_folder\n",
							"        self.pseudonymize = pseudonymize\n",
							"        self.stage1np = f\"{oea.stage1np}/{source_folder}\"\n",
							"        self.stage2np = f\"{oea.stage2np}/{source_folder}\"\n",
							"        self.stage2p = f\"{oea.stage2p}/{source_folder}\"\n",
							"        self.stage3np = f\"{oea.stage3np}/{source_folder}\"\n",
							"        self.stage3p = f\"{oea.stage3p}/{source_folder}\"\n",
							"        self.module_path = f\"{oea.framework_path}/modules/{source_folder}\"\n",
							"        self.schemas = {}\n",
							"\n",
							"    def _process_entity_from_stage1(self, path, entity_name, format='csv', write_mode='overwrite', header='true'):\n",
							"        spark_schema = oea.to_spark_schema(self.schemas[entity_name])\n",
							"        df = spark.read.format(format).load(f\"{self.stage1np}/{path}/{entity_name}\", header=header, schema=spark_schema)\n",
							"\n",
							"        if self.pseudonymize:\n",
							"            df_pseudo, df_lookup = oea.pseudonymize(df, self.schemas[entity_name])\n",
							"            df_pseudo.write.format('delta').mode(write_mode).save(f\"{self.stage2p}/{entity_name}\")\n",
							"            if len(df_lookup.columns) > 0:\n",
							"                df_lookup.write.format('delta').mode(write_mode).save(f\"{self.stage2np}/{entity_name}_lookup\")\n",
							"        else:\n",
							"            df = oea.fix_column_names(df)   \n",
							"            df.write.format('delta').mode(write_mode).save(f\"{self.stage2np}/{entity_name}\")\n",
							"\n",
							"    def delete_stage1(self):\n",
							"        oea.rm_if_exists(self.stage1np)\n",
							"\n",
							"    def delete_stage2(self):\n",
							"        oea.rm_if_exists(self.stage2np)\n",
							"        oea.rm_if_exists(self.stage2p)\n",
							"\n",
							"    def delete_stage3(self):\n",
							"        oea.rm_if_exists(self.stage3np)\n",
							"        oea.rm_if_exists(self.stage3p)                \n",
							"\n",
							"    def delete_all_stages(self):\n",
							"        self.delete_stage1()\n",
							"        self.delete_stage2()\n",
							"        self.delete_stage3()\n",
							"\n",
							"    def create_stage2_lake_db(self, format='DELTA'):\n",
							"        oea.create_lake_db(self.stage2p, format)\n",
							"        oea.create_lake_db(self.stage2np, format)\n",
							"\n",
							"    def create_stage3_lake_db(self, format='DELTA'):\n",
							"        oea.create_lake_db(self.stage3p, format)\n",
							"        oea.create_lake_db(self.stage3np, format)\n",
							"\n",
							"    def copy_test_data_to_stage1(self):\n",
							"        mssparkutils.fs.cp(self.module_path + '/test_data', self.stage1np, True)   \n",
							"\n",
							"class DataLakeWriter:\n",
							"    def __init__(self, root_destination):\n",
							"        self.root_destination = root_destination\n",
							"\n",
							"    def write(self, path_and_filename, data_str, format='csv'):\n",
							"        mssparkutils.fs.append(f\"{self.root_destination}/{path_and_filename}\", data_str, True) # Set the last parameter as True to create the file if it does not exist\n",
							"\n",
							"oea = OEA()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OneRosterDataGenerator')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b4818dd7-65ec-49a6-9b0e-a905ebeb1585"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import math\r\n",
							"from faker import Faker\r\n",
							"\r\n",
							"\r\n",
							"_SUBJECTS = ['Math - Algebra', 'Math - Geometry', 'English Language', 'History - World History', \r\n",
							"             'Science Biology', 'Health', 'Technology - Programming', 'Physical Education', 'Art', 'Music']\r\n",
							"_SCHOOL_TYPES = ['Elementary', 'Middle', 'High']\r\n",
							"\r\n",
							"class OneRosterDataGenerator:\r\n",
							"  def __init__(self, students_per_school=100, classes_in_student_schedule=6, students_per_section=25, student_teacher_ratio=9, include_optional_fields=True):\r\n",
							"    # Set a seed value in Faker so it generates the same values every time it's run\r\n",
							"    self.faker = Faker('en_US')\r\n",
							"    Faker.seed(1) \r\n",
							"\r\n",
							"    self.students_per_school = students_per_school\r\n",
							"    self.classes_in_student_schedule = classes_in_student_schedule\r\n",
							"    self.students_per_section = students_per_section\r\n",
							"    self.student_teacher_ratio = student_teacher_ratio\r\n",
							"    self.include_optional = include_optional_fields\r\n",
							"\r\n",
							"    self.teachers_per_school = math.ceil(self.students_per_school/self.student_teacher_ratio)\r\n",
							"    self.section_id = 1\r\n",
							"    self.student_id = 1\r\n",
							"    self.teacher_id = 1\r\n",
							"    self.course_id = 1\r\n",
							"    self.school_id = 1\r\n",
							"    self.term_id = 1\r\n",
							"    self.domain = '@Classrmtest86.org'\r\n",
							"\r\n",
							"  def create_schools(self, quantity):\r\n",
							"    schools = []\r\n",
							"    for n in range(quantity):\r\n",
							"      school = self.create_school(str(self.school_id))\r\n",
							"      schools.append(school)\r\n",
							"      self.school_id += 1\r\n",
							"    return schools\r\n",
							"\r\n",
							"  def create_school(self, school_id):\r\n",
							"    school_info = {\r\n",
							"      'sourcedId':f'sch{school_id}',\r\n",
							"      'name':f\"{self.faker.last_name()} {self.faker.random_element(_SCHOOL_TYPES)}\",\r\n",
							"      'identifier': school_id if self.include_optional else '',\r\n",
							"      'status':'active' if self.include_optional else '',\r\n",
							"      'dateLastModified': '2020-04-15T08:30:11.944Z' if self.include_optional else ''\r\n",
							"      }\r\n",
							"\r\n",
							"    school_data = {}\r\n",
							"    school_data['students'] = self.create_students(school_info['sourcedId'])\r\n",
							"    school_data['teachers'] = self.create_teachers(school_info['sourcedId'])\r\n",
							"    school_data['courses'] = self.create_courses()\r\n",
							"    school_data['terms'] = self.create_terms('2021')\r\n",
							"    school_data['student_enrollments'] = self.create_student_enrollments(school_info['sourcedId'], school_data)\r\n",
							"    school_data['teacher_enrollments'] = self.create_teacher_enrollments(school_info['sourcedId'], school_data)\r\n",
							"    for term in school_data['terms']:\r\n",
							"      self.create_sections(term, school_info['sourcedId'], school_data['courses'])\r\n",
							"\r\n",
							"    # Now that all the data is generated across the various entities, we need to extract only what we need for OneRoster's spec\r\n",
							"    one_roster_data = {}\r\n",
							"    one_roster_data['users'] = school_data['students']\r\n",
							"    one_roster_data['users'] += school_data['teachers']\r\n",
							"    one_roster_data['courses'] = school_data['courses']\r\n",
							"\r\n",
							"    one_roster_data['classes'] = []\r\n",
							"    for term in school_data['terms']:\r\n",
							"      term.pop('_section_spots')\r\n",
							"      one_roster_data['classes'] += term.pop('_sections')\r\n",
							"    one_roster_data['academicSessions'] = school_data['terms']\r\n",
							"\r\n",
							"    return school_info, one_roster_data\r\n",
							"\r\n",
							"  def create_terms(self, school_year):\r\n",
							"    terms = []\r\n",
							"    terms.append({\r\n",
							"      'sourcedId' : 'term' + str(self.term_id),\r\n",
							"      'title' : 'Fall Semester',\r\n",
							"      'startDate' : '9/1/2020',\r\n",
							"      'endDate' : '12/22/2020',\r\n",
							"      'type' : 'semester',\r\n",
							"      'schoolYear': school_year,\r\n",
							"      '_sections' : [],\r\n",
							"      '_section_spots' : []  # this is an array of arrays representing the sections and the spots within each section\r\n",
							"      })\r\n",
							"    self.term_id += 1\r\n",
							"    terms.append({\r\n",
							"      'sourcedId' : 'term' + str(self.term_id),\r\n",
							"      'title' : 'Spring Semester',\r\n",
							"      'startDate' : '1/21/2021',\r\n",
							"      'endDate' : '5/30/2021',\r\n",
							"      'type' : 'semester',\r\n",
							"      'schoolYear': school_year,\r\n",
							"      '_sections' : [],\r\n",
							"      '_section_spots' : []  # this is an array of arrays representing the sections and the spots within each section\r\n",
							"      })\r\n",
							"    return terms\r\n",
							"\r\n",
							"  def create_courses(self):\r\n",
							"    courses = []\r\n",
							"    for subject in _SUBJECTS:\r\n",
							"      courses.append({\r\n",
							"        'sourcedId' : 'course' + str(self.course_id),\r\n",
							"        'status': '',\r\n",
							"        'dateLastModified':'',\r\n",
							"        'Course Name' : subject,\r\n",
							"        'courseCode' : str(self.course_id),\r\n",
							"        'Course Description' : \"Instruction covering \" + subject,\r\n",
							"        'Course Subject' : subject\r\n",
							"        })\r\n",
							"      self.course_id += 1\r\n",
							"    return courses\r\n",
							"\r\n",
							"  def create_students(self, school_id):\r\n",
							"    students = []\r\n",
							"    for n in range(self.students_per_school):\r\n",
							"      students.append(self.create_user(school_id, self.student_id, 'student'))\r\n",
							"      self.student_id += 1\r\n",
							"    return students\r\n",
							"\r\n",
							"  def create_teachers(self, school_id):\r\n",
							"    teachers = []\r\n",
							"    for n in range(self.teachers_per_school):\r\n",
							"      teachers.append(self.create_user(school_id, self.teacher_id, 'teacher'))\r\n",
							"      self.teacher_id += 1\r\n",
							"    return teachers\r\n",
							"\r\n",
							"  def create_user(self, school_id, user_id, user_type):\r\n",
							"    id_prefix = 'st' if user_type == 'student' else 't'\r\n",
							"    fname = self.faker.first_name()\r\n",
							"    lname = self.faker.last_name()\r\n",
							"    email = f\"{fname.lower()}{lname.lower()}{user_id}{self.domain}\"\r\n",
							"    user = {\r\n",
							"        'userIds': [{\"type\":\"LDAP\", \"identifier\":self.faker.uuid4()}] if self.include_optional else '',\r\n",
							"        'enabledUser': True,\r\n",
							"        'middleName': self.faker.first_name() if self.include_optional else '',\r\n",
							"        'grades': [self.faker.random_element(['9','10','11','12'])] if self.include_optional else '',\r\n",
							"        'password': self.faker.password() if self.include_optional else '',\r\n",
							"        'username' : f\"{fname.lower()}{lname.lower()}{user_id}\",\r\n",
							"        'givenName' : fname,\r\n",
							"        'familyName' : lname,\r\n",
							"        'role' : user_type,\r\n",
							"        'identifier': str(user_id) if self.include_optional else '',\r\n",
							"        'email': email if self.include_optional else '',\r\n",
							"        'sms' : self.faker.phone_number(),\r\n",
							"        'phone' : self.faker.phone_number(),\r\n",
							"        'agents': None,\r\n",
							"        'orgs': [ {'href':'http://orgrefhere', 'sourcedId':school_id, 'type':'school'}],\r\n",
							"        'sourcedId' : id_prefix + str(user_id),\r\n",
							"        'status':'active' if self.include_optional else '',\r\n",
							"        'dateLastModified': '2020-04-15T08:30:11.944Z' if self.include_optional else ''\r\n",
							"        }\r\n",
							"    return user\r\n",
							"\r\n",
							"  def create_sections(self, term, school_id, courses):\r\n",
							"    spots_needed = self.students_per_school * self.classes_in_student_schedule\r\n",
							"    sections_needed = math.ceil(spots_needed / self.students_per_section) + 1 # determine the number of sections needed\r\n",
							"    for n in range(sections_needed):\r\n",
							"      course = self.faker.random_element(courses)\r\n",
							"      term['_sections'].append({\r\n",
							"        'grades': [self.faker.random_element(['9','10','11','12'])] if self.include_optional else '',\r\n",
							"        'subjectCodes': ['001'], #todo: populate this\r\n",
							"        'periods': ['per1'], #todo: populate this\r\n",
							"        'resources': [{'href':'http://resourcerefhere', 'sourcedId': '121212', 'type': 'resource'}], #todo: populate this\r\n",
							"        'title' : course['Course Subject'] + \" \" + str(self.section_id),\r\n",
							"        'classCode' : str(self.section_id) if self.include_optional else '',\r\n",
							"        'classType': 'scheduled',\r\n",
							"        'location' : self.faker.random_element(['room1', 'room2', 'room3', 'room4', 'room5']) if self.include_optional else '',\r\n",
							"        'subjects' : [course['Course Subject']] if self.include_optional else '',\r\n",
							"        'course' : {'href':'http://courserefhere', 'sourcedId':course['Course SIS ID'], 'type':'course'},\r\n",
							"        'school' : {'href':'http://schoolrefhere', 'sourcedId':school_id, 'type':'school'},\r\n",
							"        'terms' : [{'href':'http://termrefhere', 'sourcedId':term['sourcedId'], 'type':'academicSession'}],\r\n",
							"        'sourcedId' : str(self.section_id),\r\n",
							"        'status' : 'active' if self.include_optional else '',\r\n",
							"        'dateLastModified': '2020-04-15T08:30:11.944Z' if self.include_optional else ''\r\n",
							"        })\r\n",
							"      # add section spots   \r\n",
							"      spots = []\r\n",
							"      for i in range(self.students_per_section):\r\n",
							"        spots.append(str(self.section_id))\r\n",
							"      term['_section_spots'].append(spots)\r\n",
							"      self.section_id += 1\r\n",
							"\r\n",
							"  def create_student_enrollments(self, school_id, school_data):\r\n",
							"    enrollments = []\r\n",
							"    for student in school_data['students']:\r\n",
							"      for term in school_data['terms']:\r\n",
							"        num_enrollments = 0\r\n",
							"        for section_spots in term['_section_spots']:\r\n",
							"          if(len(section_spots) == 0): \r\n",
							"            continue\r\n",
							"          else:\r\n",
							"            spot_taken = section_spots.pop()\r\n",
							"            num_enrollments += 1\r\n",
							"            enrollment = self.create_enrollment('student', school_id, student['sourcedId'], spot_taken)\r\n",
							"            enrollments.append(enrollment)\r\n",
							"          if (num_enrollments >= self.classes_in_student_schedule): break\r\n",
							"    return enrollments\r\n",
							"\r\n",
							"  def create_teacher_enrollments(self, school_id, school_data):\r\n",
							"    enrollments = []\r\n",
							"    for term in school_data['terms']:\r\n",
							"      teacher_index = 0\r\n",
							"      for section in term['_sections']:\r\n",
							"        teacher_id = school_data['teachers'][teacher_index]['sourcedId']\r\n",
							"        enrollment = self.create_enrollment('teacher', school_id, teacher_id, section['sourcedId'])\r\n",
							"        enrollments.append(enrollment)\r\n",
							"        teacher_index += 1\r\n",
							"        if (teacher_index == len(school_data['teachers'])): teacher_index = 0 # start over from the beginning of the list of teachers\r\n",
							"    return enrollments\r\n",
							"\r\n",
							"  def create_enrollment(self, role, school_id, user_id, section_id):\r\n",
							"    enrollment = {\r\n",
							"        \"beginDate\": \"2020-04-16T18:22:04.645Z\",\r\n",
							"        \"endDate\": \"2020-07-16T18:22:04.645Z\",\r\n",
							"        \"role\": role,\r\n",
							"        \"primary\": True,\r\n",
							"        \"user\": {\r\n",
							"          \"href\": \"http://userhrefhere\",\r\n",
							"          \"sourcedId\": user_id,\r\n",
							"          \"type\": \"user\"\r\n",
							"        },\r\n",
							"        \"school\": {\r\n",
							"          \"href\": \"http://schoolhrefhere\",\r\n",
							"          \"sourcedId\": school_id,\r\n",
							"          \"type\": \"org\"\r\n",
							"        },\r\n",
							"        \"class\": {\r\n",
							"          \"href\": \"http://classhrefhere\",\r\n",
							"          \"sourcedId\": section_id,\r\n",
							"          \"type\": \"class\"\r\n",
							"        },\r\n",
							"        \"sourcedId\": self.faker.uuid4(),\r\n",
							"        \"status\": \"active\",\r\n",
							"        \"dateLastModified\": \"2020-04-16T18:22:04.647Z\"\r\n",
							"    }\r\n",
							"    return enrollment\r\n",
							"\r\n",
							"##########################\r\n",
							"#generate_data()\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/test_DataGenerator')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f86a8676-c6d5-45d1-8a40-ec280110b120"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import os\r\n",
							"import shutil\r\n",
							"import DataGenUtil\r\n",
							"import ContosoDataGenerator\r\n",
							"import M365DataGenerator\r\n",
							"import MSInsightsDataGenerator\r\n",
							"import EdFiDataGenerator\r\n",
							"#import OneRosterDataGenerator\r\n",
							"\r\n",
							"destination = 'tmp_generated_data'\r\n",
							"if os.path.exists(destination): shutil.rmtree(destination)\r\n",
							"os.makedirs(destination)\r\n",
							"\r\n",
							"def test_ContosoDataGenerator():\r\n",
							"    dg = ContosoDataGenerator.ContosoDataGenerator()\r\n",
							"    writer = DataGenUtil.FileWriter(destination)\r\n",
							"    dg.generate_data(2, writer)\r\n",
							"    \r\n",
							"def test_M365DataGenerator():\r\n",
							"    dg = M365DataGenerator.M365DataGenerator()\r\n",
							"    writer = DataGenUtil.FileWriter(destination)\r\n",
							"    dg.generate_data(1, writer)\r\n",
							"    \r\n",
							"def test_MSInsightsDataGenerator():\r\n",
							"    dg = MSInsightsDataGenerator.MSInsightsDataGenerator()\r\n",
							"    writer = DataGenUtil.FileWriter(destination)\r\n",
							"    dg.generate_data(2, writer)\r\n",
							"\r\n",
							"def test_EdFiDataGenerator():\r\n",
							"    dg = EdFiDataGenerator.EdFiDataGenerator()\r\n",
							"    writer = DataGenUtil.FileWriter(destination)\r\n",
							"    dg.generate_data(2, writer)\r\n",
							"\r\n",
							"#test_ContosoDataGenerator()\r\n",
							"test_M365DataGenerator()\r\n",
							"#test_EdFiDataGenerator()\r\n",
							"#test_MSInsightsDataGenerator()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spark3p1sm')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 12,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"libraryRequirements": {
					"content": "opencensus-ext-azure >= 1.0.8\r\nFaker >= 8.0",
					"filename": "/usr/csuser/clouddrive/OpenEduAnalytics/framework/requirements.txt",
					"time": "2022-03-11T03:56:59.8123732Z"
				},
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "australiaeast"
		}
	]
}