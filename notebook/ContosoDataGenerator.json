{
	"name": "ContosoDataGenerator",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "62089197-f2a5-4f4a-a4af-294e14b1e680"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import datetime\r\n",
					"import random\r\n",
					"import math\r\n",
					"import pandas as pd\r\n",
					"from faker import Faker\r\n",
					"\r\n",
					"# DataGenUtils\r\n",
					"def list_of_dict_to_csv(list_of_dict, includeHeaders = True):\r\n",
					"    csv_str = ''\r\n",
					"    if includeHeaders == True:\r\n",
					"        header = []\r\n",
					"        for column_name in list_of_dict[0].keys(): \r\n",
					"            if not column_name.startswith('_'): header.append(column_name)\r\n",
					"        csv_str += \",\".join(header) + \"\\n\"\r\n",
					"\r\n",
					"    for row in list_of_dict:\r\n",
					"        csv_str += obj_to_csv(row) + \"\\n\"\r\n",
					"\r\n",
					"    return csv_str\r\n",
					"\r\n",
					"def obj_to_csv(obj):\r\n",
					"    csv = ''\r\n",
					"    for key in obj:\r\n",
					"        if not (key.startswith('_')): csv += str(obj[key]) + ','\r\n",
					"    return csv[:-1]\r\n",
					"\r\n",
					"def list_of_dict_to_json(list_of_dict):\r\n",
					"    json_str = '['\r\n",
					"    for row in list_of_dict:\r\n",
					"        json_str += obj_to_json(row) + \",\\n\"\r\n",
					"    return json_str[:-2] + ']'\r\n",
					"\r\n",
					"def obj_to_json(obj):\r\n",
					"    json_dict = {}\r\n",
					"    for key in obj:\r\n",
					"        if not (key.startswith('_')): json_dict[key] = obj[key]\r\n",
					"    return json.dumps(json_dict)\r\n",
					"\r\n",
					"class FileWriter:\r\n",
					"    def __init__(self, root_destination=None):\r\n",
					"        if not root_destination: self.root_destination = ''\r\n",
					"        elif not root_destination.endswith('/'): self.root_destination = root_destination + '/'\r\n",
					"        else: self.root_destination = root_destination\r\n",
					"        self.writers = {}\r\n",
					"\r\n",
					"    def write(self, path_and_filename, data_str):\r\n",
					"        path_and_filename = self.root_destination + path_and_filename\r\n",
					"        if path_and_filename not in self.writers.keys():\r\n",
					"            if not os.path.exists(os.path.dirname(path_and_filename)):\r\n",
					"                os.makedirs(os.path.dirname(path_and_filename))\r\n",
					"            self.writers[path_and_filename] = open(path_and_filename, 'a')\r\n",
					"        \r\n",
					"        self.writers[path_and_filename].write(data_str)    \r\n",
					"\r\n",
					"\r\n",
					"SUBJECTS = ['Math - Algebra', 'Math - Geometry', 'English Language', 'History - World History',\r\n",
					"            'Science Biology', 'Health', 'Technology - Programming', 'Physical Education', 'Art', 'Music']\r\n",
					"SCHOOL_TYPES = ['Elementary', 'Middle', 'High']\r\n",
					"GRADES = [(0, 'Kindergarten'), (1, 'First'), (2, 'Second'), (3, 'Third'),\r\n",
					"          (4, 'Fourth'), (5, 'Fifth'), (6, 'Sixth'), (7, 'Seventh'), (8, 'Eigth')]\r\n",
					"ACTIONS = [('ID', 'In-school Suspension'), ('ES', 'Restorative Dialogue'), ('RJ', 'Restorative Justice'), ('EY', 'Expelled Remainder Of School/yr'),\r\n",
					"           ('As', 'Tcher/parent/student Conference'), ('IS', 'In-school Detention'), ('LD', 'Lunch Detention'), ('PC', 'Parent Contact'), ('EL', 'Expelled Less Than School Year'),\r\n",
					"           ('AC', 'Behavior/Attendance Contract'), ('VB', 'Verbal Warning'), ('SF', 'Suspension 5 Days Or Less'), ('RS', 'Referral To Social Worker'), ('SM', 'Suspension More Than Five Days'),\r\n",
					"           ('SS', 'Saturday School'), ('AP', 'Admin/Prnt/Gurdn/Stu Conference'), ('RF', 'Referral To Counseling'), ('DB', 'Detention Before/after School'), ('LP', 'Loss of Privileges'),\r\n",
					"           ('IA', 'In-school Alternative'), ('Cn', 'Ref Police - No charges filed'), ('EN', 'Expelled Into Next School Year')]\r\n",
					"ATTENDANCE_TYPES = [('V', 'Early Completion'), ('5', 'Parent Request Opt Out Testing'), ('A', 'Absent (unexcused)'), ('F', 'Field Trip'), ('C', 'Counselor'), ('X', 'Excused Tardy'), ('I', 'In School Detention'), ('Q', 'Went Home Ill'), ('O', 'Office'), ('W', 'Weather'),\r\n",
					"                    ('6', 'State or District Testing'), ('N', 'Nurse/Infirmary'), ('G', 'Early Release/Parent'), ('H', 'Timeout to Home'), ('Y', 'In a Facility'), ('R', 'Runaway'), ('P', 'Prearranged'), ('S', 'Suspended'), ('L', 'Tutored-District'), ('D', 'Enrolled in Special Program'),\r\n",
					"                    ('M', 'SPED ONLY in school no IEP Svcs'), ('J', 'Teacher Excused'), ('E', 'Excused Absence'), ('T', 'Tardy (Unexcused)'), ('Pr', 'Present'), ('K', 'Social Worker'), ('Z', 'In Detention Center (SCYSC)')]\r\n",
					"INVOLVEMENTS = [('A', 'Accomplice'), ('W', 'Witness'), ('V', 'Victim'), ('P', 'Perpetrator'), ('N', 'Not Applicable')]\r\n",
					"INCIDENTS = [('AA1', 'L1 Unexcused Absences'), ('ALA', 'L2 Abusive Lang w/Staff'), ('ALP', 'L1 Abusive Lang/Intim w/Student'), ('APL', 'L3 Any Act Prohibit by F/S/L Law'),\r\n",
					"             ('ASR', 'L2 Altering Sch/Classrm Rcrds'), ('AT3', 'L3 3rd Degree Assault  (by adult'), ('CLM', 'L1 Classroom Misconduct'), ('CLO', 'L2 Continual LEVEL I Infraction'),\r\n",
					"             ('CLT', 'L3 Continual LEVEL II Infraction'), ('CP2', 'L2 Campus Misconduct'), ('CPM', 'L1 Campus Misconduct'), ('DEP', 'L3 Destruction/Sch/Emp Prop'), ('DIS', 'L1 Dishonesty'),\r\n",
					"             ('DSP', 'L2 Defacing School Prop'), ('FCD', 'L2 Fail Complete Disc Asignmt'), ('FIG', 'L2 Fighting'), ( 'HA3', 'L3 Harassment'), ('HAR', 'L2 Harassment'), ('IDH', 'L1 Inappropriate Dress/Hygiene'),\r\n",
					"             ('INS', 'L1 Insubordination'), ('IS2', 'L2 Insubor/open/persist defiance'), ('L1E', 'L1 Inappropriate/Prsnl Elect Dev'), ('L2B', 'L2 Bullying'), ('L2E', 'L2 Inappropriate/Prsnl Elect Dev'),\r\n",
					"             ('L2P', 'L2 Phys Mistreatment of Studnt'), ('L2V', 'L2 Violation of AUA'), ('L3A', 'L3 P/U of Alcohol'), ('L3D', 'L3 P/U of Drug Paraphernalia'), ('PSV', 'L2 P/D/S Sched 4 or 5 substances'),\r\n",
					"             ('PU4', 'L4 P/U Dangerous Weapon'), ('PUT', 'L2 P/U of  Tobacco/Simulated'), ('PUW', 'L2 Inadvertent  Pos(Stand )Weap'), ('SV2', 'L2 Serious Violations at School'), ('SV3', 'L3 Serious Violations at School'),\r\n",
					"             ('THE', 'L2 Theft'), ('ULC', 'L2 Unauthorized Leaving Campus'), ('ULM', 'L3 Unlawful U/P/D/S of Marijuana'), ('UNA', 'L2 Unexcused Absences/Truancy'), ('UNT', 'L1 Unexcused Tardiness'), ('WF3', 'L3 Weapon/Facsimile (Standard)')]\r\n",
					"\r\n",
					"class ContosoDataGenerator:\r\n",
					"    def __init__(self, students_per_school=100, classes_in_student_schedule=6, students_per_section=25, student_teacher_ratio=9, include_optional_fields=True,\r\n",
					"                 fall_semester_start_date='2021-08-15', fall_semester_end_date='2021-12-15', spring_semester_start_date='2022-01-10', spring_semester_end_date='2022-05-10'):\r\n",
					"        # Set a seed value in Faker so it generates the same values every time it's run\r\n",
					"        self.faker = Faker('en_US')\r\n",
					"        Faker.seed(1)\r\n",
					"\r\n",
					"        self.students_per_school = students_per_school\r\n",
					"        self.classes_in_student_schedule = classes_in_student_schedule\r\n",
					"        self.students_per_section = students_per_section\r\n",
					"        self.student_teacher_ratio = student_teacher_ratio\r\n",
					"        self.include_optional = include_optional_fields\r\n",
					"        self.fall_semester_start_date = fall_semester_start_date\r\n",
					"        self.fall_semester_end_date = fall_semester_end_date\r\n",
					"        self.spring_semester_start_date = spring_semester_start_date\r\n",
					"        self.spring_semester_end_date = spring_semester_end_date\r\n",
					"\r\n",
					"        self.teachers_per_school = math.ceil(self.students_per_school/self.student_teacher_ratio)\r\n",
					"        self.section_id = 1\r\n",
					"        self.student_id = 1\r\n",
					"        self.teacher_id = 1\r\n",
					"        self.course_id = 1\r\n",
					"        self.school_id = 1\r\n",
					"        self.term_id = 1\r\n",
					"        self.domain = '@Classrmtest86.org'\r\n",
					"\r\n",
					"    def generate_data(self, num_of_schools, writer):\r\n",
					"        schools = []\r\n",
					"        for n in range(num_of_schools):\r\n",
					"            school_data = self.create_school(n)\r\n",
					"            schools.append(school_data.pop('School'))\r\n",
					"            for key in school_data.keys(): \r\n",
					"                data_str = list_of_dict_to_csv(school_data[key])\r\n",
					"                writer.write(f\"contoso_sis/{key}.csv\", data_str)\r\n",
					"\r\n",
					"        data_str = list_of_dict_to_csv(schools)\r\n",
					"        writer.write('contoso_sis/School.csv', data_str)        \r\n",
					"\r\n",
					"    def create_school(self, school_id):\r\n",
					"        school_data = {}\r\n",
					"        school_data['School'] = {\r\n",
					"            'SchoolID': school_id,\r\n",
					"            'SchoolName': f\"{self.faker.last_name()} {random.choice(SCHOOL_TYPES)}\"\r\n",
					"        }\r\n",
					"        school_data['Students'] = self.create_students(school_id)\r\n",
					"        school_data['Courses'] = self.create_courses()\r\n",
					"        school_data['Terms'] = self.create_terms()\r\n",
					"        school_data['Attendance'], school_data['ClassAttendance'], school_data['DailyIncidents'] = self.create_daily_records(school_id, school_data)\r\n",
					"        return school_data\r\n",
					"\r\n",
					"    def create_students(self, school_id):\r\n",
					"        students = []\r\n",
					"        for n in range(self.students_per_school):\r\n",
					"            students.append(self.create_student(school_id, self.student_id, 'student'))\r\n",
					"            self.student_id += 1\r\n",
					"        return students\r\n",
					"\r\n",
					"    def create_student(self, school_id, user_id, user_type):\r\n",
					"        grade_num, grade = random.choice(GRADES)\r\n",
					"        gender = random.choice(['Male', 'Female'])\r\n",
					"        if gender == 'Male': fname = self.faker.first_name_male()\r\n",
					"        else: fname = self.faker.first_name_female()\r\n",
					"\r\n",
					"        user = {\r\n",
					"            'ID': user_id,\r\n",
					"            'Firstname': fname,\r\n",
					"            'Lastname': self.faker.last_name(),\r\n",
					"            'Gender': gender,\r\n",
					"            'FederalRaceCategory': random.choice(['Asian', 'Black', 'White', 'Hispanic', 'American Indian']),\r\n",
					"            'PrimaryLanguage': random.choices(['English', 'Spanish', 'German', 'French', 'Japanese'], weights=(85, 10, 2, 2, 1))[0],\r\n",
					"            'ELLStatus': random.choices(['', 'English Learner', 'Initially Fluent English Proficient', 'Redesignated Fluent English Proficient'], weights=(80, 10, 5, 5))[0],\r\n",
					"            'SpecialEducation': random.choices(['', 'Designated Instruction Service', 'Resource Specialty Program', 'Special Day Class'], weights=(80, 10, 5, 5))[0],\r\n",
					"            'LowIncome': random.choices([0, 1], weights=(60, 40))[0],\r\n",
					"            'GradeNumber': grade_num,\r\n",
					"            'Grade': grade,\r\n",
					"            'CumulativeGPA': random.choice([0.523, 0.423, 1.13, 2.63, 2.33, 3.33, 4.0]),\r\n",
					"            'StartSchoolYear': self.fall_semester_start_date,\r\n",
					"            'EndSchoolYear': self.spring_semester_end_date\r\n",
					"        }\r\n",
					"        return user\r\n",
					"\r\n",
					"    def create_terms(self):\r\n",
					"        terms = []\r\n",
					"        terms.append({\r\n",
					"            'TermID': self.term_id,\r\n",
					"            'TermName': 'Fall Semester',\r\n",
					"            'TermStartDate': self.fall_semester_start_date,\r\n",
					"            'TermEndDate': self.fall_semester_end_date,\r\n",
					"        })\r\n",
					"        self.term_id += 1\r\n",
					"        terms.append({\r\n",
					"            'TermID': self.term_id,\r\n",
					"            'TermName': 'Spring Semester',\r\n",
					"            'TermStartDate': self.spring_semester_start_date,\r\n",
					"            'TermEndDate': self.spring_semester_end_date,\r\n",
					"        })\r\n",
					"        self.term_id += 1\r\n",
					"        return terms\r\n",
					"\r\n",
					"    def create_courses(self):\r\n",
					"        courses = []\r\n",
					"        for subject in SUBJECTS:\r\n",
					"            courses.append({\r\n",
					"                'CourseID': self.course_id,\r\n",
					"                'CourseName': subject,\r\n",
					"                'CourseCode': subject\r\n",
					"            })\r\n",
					"            self.course_id += 1\r\n",
					"        return courses\r\n",
					"\r\n",
					"    def create_daily_records(self, school_id, school_data):\r\n",
					"        date_range = pd.date_range(datetime.datetime.strptime(self.fall_semester_start_date, \"%Y-%m-%d\"), datetime.datetime.strptime(self.spring_semester_end_date, \"%Y-%m-%d\"))\r\n",
					"        daily_attendance = []\r\n",
					"        class_attendance = []\r\n",
					"        incidents = []\r\n",
					"        for student in school_data['Students']:\r\n",
					"            for single_date in date_range:\r\n",
					"                daily_attendance.append(self.create_daily_attendance_record(school_id, student, single_date))\r\n",
					"                class_attendance.append(self.create_class_attendance_record(school_id, student, single_date, school_data['Courses']))\r\n",
					"                if (random.randint(1, 100)) <= 10:  # 10% chance of an incident occurring\r\n",
					"                    incidents.append(self.create_incident_record(school_id, student['ID'], single_date))\r\n",
					"        return (daily_attendance, class_attendance, incidents)\r\n",
					"\r\n",
					"    def create_class_attendance_record(self, school_id, student_id, date_value, courses):\r\n",
					"        # todo: fix term id to use the correct term id based on the date\r\n",
					"        class_attendance = {\r\n",
					"            'SchoolID': school_id,\r\n",
					"            'AttendanceDate': date_value.strftime(\"%Y-%m-%d\"),\r\n",
					"            'StudentID': student_id,\r\n",
					"            'Term': '1',\r\n",
					"            'CourseID': random.choice(courses)['CourseID'],\r\n",
					"            'AttendTypeID': random.choice(ATTENDANCE_TYPES)[0]\r\n",
					"        }\r\n",
					"        return class_attendance\r\n",
					"\r\n",
					"    def create_incident_record(self, school_id, student_id, date_value):\r\n",
					"        incident_id, incident = random.choice(INCIDENTS)\r\n",
					"        involvement_id, incident = random.choice(INVOLVEMENTS)\r\n",
					"        action_id, action = random.choice(ACTIONS)\r\n",
					"        incident_record = {\r\n",
					"            'StudentID': student_id,\r\n",
					"            'SchoolID': school_id,\r\n",
					"            'IncidentID': incident_id,\r\n",
					"            'InvolvementID': involvement_id,\r\n",
					"            'IncidentDate': date_value.strftime(\"%Y-%m-%d\"),\r\n",
					"            'ActionID': action_id\r\n",
					"        }\r\n",
					"        return incident_record\r\n",
					"\r\n",
					"    def create_daily_attendance_record(self, school_id, student, date_value):\r\n",
					"        possible_periods_in_day = 6\r\n",
					"        unexcused_all_day = random.choices([0, 1], weights=(80, 20))[0]\r\n",
					"        if unexcused_all_day == 1:\r\n",
					"            excused_all_day = 0\r\n",
					"        else:\r\n",
					"            excused_all_day = random.choices([0, 1], weights=(70, 30))[0]\r\n",
					"\r\n",
					"        attendance_record = {\r\n",
					"            'SchoolID': school_id,\r\n",
					"            'AttendanceDate': date_value.strftime(\"%Y-%m-%d\"),\r\n",
					"            'StudentID': student['ID'],\r\n",
					"            'NumofPossiblePeriods': possible_periods_in_day,\r\n",
					"            'NumofTardies': random.choices([0, 1, 2, 3, 4, 5, 6], weights=(50, 20, 10, 5, 5, 5, 5))[0],\r\n",
					"            'NumofUnexcusedAbsent': random.choices([0, 1, 2, 3], weights=(70, 10, 10, 10))[0],\r\n",
					"            'NumofExcusedAbsent': random.choices([0, 1, 2, 3], weights=(60, 20, 10, 10))[0],\r\n",
					"            'UnexcusedAllDay': unexcused_all_day,\r\n",
					"            'ExcusedAllDay': excused_all_day,\r\n",
					"            'Cumulative GPA': student['CumulativeGPA']\r\n",
					"        }\r\n",
					"        return attendance_record\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}