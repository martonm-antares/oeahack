{
	"name": "AzureClient",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "79dbc1a5-5f67-434a-ad39-9b336b1ff45f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# need to run \"pip install -r requirements.txt\"\r\n",
					"#import sys\r\n",
					"#import secrets\r\n",
					"#import string\r\n",
					"#import logging\r\n",
					"#import os, random\r\n",
					"#import json\r\n",
					"#import time\r\n",
					"from azure.identity import AzureCliCredential\r\n",
					"from azure.mgmt.resource import ResourceManagementClient\r\n",
					"from azure.mgmt.keyvault import KeyVaultManagementClient\r\n",
					"from azure.mgmt.synapse import SynapseManagementClient\r\n",
					"from azure.synapse.artifacts import ArtifactsClient\r\n",
					"from azure.mgmt.storage import StorageManagementClient\r\n",
					"from azure.core.exceptions import HttpResponseError\r\n",
					"\r\n",
					"class AzureClient:\r\n",
					"    \"\"\" todo: consider removing self.resource_group_name and self.storage_account_name - those should probably be passed in as needed \"\"\"\r\n",
					"    def __init__(self, tenant_id, subscription_id, location, default_tags = None, resource_group_name = None):\r\n",
					"        self.credential = AzureCliCredential()\r\n",
					"        self.tenant_id = tenant_id\r\n",
					"        self.subscription_id = subscription_id\r\n",
					"        self.location = location\r\n",
					"        self.tags = default_tags if default_tags else {}\r\n",
					"        self.resource_group_name = resource_group_name\r\n",
					"        self.key_vault_client = None\r\n",
					"        self.resource_client = None\r\n",
					"        self.storage_client = None\r\n",
					"        self.artifacts_client = {}\r\n",
					"        self.synapse_client = None\r\n",
					"        self.storage_account_name = None\r\n",
					"\r\n",
					"    def get_storage_account_id(self):\r\n",
					"        return f\"/subscriptions/{self.subscription_id}/resourceGroups/{self.resource_group_name}/providers/Microsoft.Storage/storageAccounts/{self.storage_account_name}\"\r\n",
					"\r\n",
					"    def get_resource_client(self):\r\n",
					"        if not self.resource_client: self.resource_client = ResourceManagementClient(self.credential, self.subscription_id)\r\n",
					"        return self.resource_client\r\n",
					"\r\n",
					"    def get_key_vault_client(self):\r\n",
					"        if not self.key_vault_client: self.key_vault_client = KeyVaultManagementClient(self.credential, self.subscription_id)\r\n",
					"        return self.key_vault_client\r\n",
					"\r\n",
					"    def get_storage_client(self):\r\n",
					"        if not self.storage_client: self.storage_client = StorageManagementClient(self.credential, self.subscription_id)\r\n",
					"        return self.storage_client\r\n",
					"\r\n",
					"    def get_synapse_client(self):\r\n",
					"        if not self.synapse_client: self.synapse_client = SynapseManagementClient(self.credential, self.subscription_id)\r\n",
					"        return self.synapse_client\r\n",
					"\r\n",
					"    def get_artifacts_client(self, synapse_workspace_name):\r\n",
					"        if not synapse_workspace_name in self.artifacts_client:\r\n",
					"            self.artifacts_client[synapse_workspace_name] = ArtifactsClient(self.credential, f\"https://{synapse_workspace_name}.dev.azuresynapse.net\")\r\n",
					"        return self.artifacts_client[synapse_workspace_name]        \r\n",
					"\r\n",
					"    # ref info: https://docs.microsoft.com/en-us/python/api/azure-mgmt-keyvault/azure.mgmt.keyvault.keyvaultmanagementclient?view=azure-python#vaults\r\n",
					"    # example: https://docs.microsoft.com/en-us/samples/azure-samples/resource-manager-python-resources-and-groups/manage-azure-resources-and-resource-groups-with-python/#create-resource\r\n",
					"    def create_key_vault(self, key_vault_name, access_policies):\r\n",
					"        #availability_result = self.get_key_vault_client().vaults.check_name_availability({ \"name\": key_vault_name }  )\r\n",
					"        #if not availability_result.name_available:\r\n",
					"        #    logger.error(f\"Key Vault name {key_vault_name} is not available. Try another name.\")\r\n",
					"        #    exit()\r\n",
					"        \r\n",
					"        poller = self.get_key_vault_client().vaults.begin_create_or_update(self.resource_group_name, key_vault_name,\r\n",
					"            {\r\n",
					"                'location': self.location,\r\n",
					"                'properties': {\r\n",
					"                    'sku': { 'name': 'standard', 'family': 'A' },\r\n",
					"                    'tenant_id': self.tenant_id,\r\n",
					"                    'access_policies': access_policies\r\n",
					"                }\r\n",
					"            }\r\n",
					"    )\r\n",
					"\r\n",
					"    def create_notebook_with_ipynb(self, notebook_name, notebook_filename, synapse_workspace_name):\r\n",
					"        # todo: remove hardcoded url - this is just an example\r\n",
					"        with open(notebook_filename) as f: \r\n",
					"            notebook_dict = json.load(f)\r\n",
					"        artifacts_client = self.get_artifacts_client(synapse_workspace_name)\r\n",
					"        poller = artifacts_client.notebook.begin_create_or_update_notebook(notebook_name, {'name':notebook_name, 'properties':notebook_dict} )\r\n",
					"        return poller\r\n",
					"\r\n",
					"    def create_notebook(self, notebook_filename, synapse_workspace_name):\r\n",
					"        \"\"\" Creates synapse notebook from json (using the json from git when Synapse studio is connected to a repo) \"\"\"\r\n",
					"        artifacts_client = ArtifactsClient(AzureCliCredential(), f\"https://{synapse_workspace_name}.dev.azuresynapse.net\")\r\n",
					"        with open(notebook_filename) as f: notebook_dict = json.load(f)\r\n",
					"        validate_notebook_json(notebook_dict)\r\n",
					"        logger.info(\"Creating notebook: notebook_dict['name']\")\r\n",
					"        poller = artifacts_client.notebook.begin_create_or_update_notebook(notebook_dict['name'], notebook_dict)\r\n",
					"        return poller #AzureOperationPoller\r\n",
					"\r\n",
					"    def validate_notebook_json(self, nb_json):\r\n",
					"        \"\"\" These attributes must exist for the call to begin_create_or_update_notebook to pass validation \"\"\"\r\n",
					"        if not 'nbformat' in nb_json: nb_json['properties']['nbformat'] = 4\r\n",
					"        if not 'nbformat_minor' in nb_json: nb_json['properties']['nbformat_minor'] = 2\r\n",
					"        for cell in nb_json['properties']['cells']:\r\n",
					"            if not 'metadata' in cell: cell['metadata'] = {}\r\n",
					"\r\n",
					"    def create_spark_pool(self):\r\n",
					"        pass\r\n",
					"\r\n",
					"    #create_notebook('new_notebook.json', 'syn-oea-cisdggv04r')\r\n",
					"\r\n",
					"    def delete_resource_group(self, name):\r\n",
					"        self.get_resource_client().resource_groups.begin_delete(name)\r\n",
					"        self.resource_group_name = None\r\n",
					"\r\n",
					"    def create_resource_group(self, resource_group_name, tags=None):\r\n",
					"        if not tags: tags = {}\r\n",
					"        self.get_resource_client().resource_groups.create_or_update(resource_group_name, {'location': self.location, 'tags': tags})\r\n",
					"        self.resource_group_name = resource_group_name\r\n",
					"\r\n",
					"    def create_synapse_workspace(self, synapse_workspace_name, storage_account_name):\r\n",
					"        \"\"\" https://docs.microsoft.com/en-us/python/api/azure-mgmt-synapse/azure.mgmt.synapse.aio.operations.workspacesoperations?view=azure-python#begin-create-or-update-resource-group-name--str--workspace-name--str--workspace-info--azure-mgmt-synapse-models--models-py3-workspace----kwargs-----azure-core-polling--async-poller-asynclropoller--forwardref---models-workspace--- \"\"\"\r\n",
					"        # https://docs.microsoft.com/en-us/python/api/azure-mgmt-synapse/azure.mgmt.synapse.aio.operations.workspacesoperations?view=azure-python\r\n",
					"        cmd = (f\"az synapse workspace create --name {synapse_workspace_name} --resource-group {self.resource_group_name} --tags oea_version=0.4+ \"\r\n",
					"          f\"--storage-account {storage_account_name} --file-system synapse-workspace --location {self.location} \"\r\n",
					"          f\"--sql-admin-login-user oea-admin --sql-admin-login-password {AzureClient.create_random_password()}\")\r\n",
					"        os.system(cmd)\r\n",
					"\r\n",
					"    def create_storage_account(self, storage_account_name):\r\n",
					"        storage_client = self.get_storage_client()\r\n",
					"        # Check if the account name is available.\r\n",
					"        #availability_result = storage_client.storage_accounts.check_name_availability({ \"name\": storage_account_name })\r\n",
					"        #if not availability_result.name_available:\r\n",
					"            #logger.error(f\"Storage name {storage_account_name} is already in use. Try another name.\")\r\n",
					"            #exit()\r\n",
					"\r\n",
					"        poller = storage_client.storage_accounts.begin_create(self.resource_group_name, storage_account_name,\r\n",
					"            {           \r\n",
					"                \"location\" : self.location,\r\n",
					"                \"tags\" : self.tags,\r\n",
					"                \"kind\": \"StorageV2\",\r\n",
					"                \"sku\": {\"name\": \"Standard_RAGRS\"},\r\n",
					"                \"enable-hierarchical-namespace\": True,\r\n",
					"                \"access-tier\": \"Hot\",\r\n",
					"                \"default-action\": \"Allow\"\r\n",
					"            }\r\n",
					"        )\r\n",
					"        # Call poller.result() to wait for completion\r\n",
					"        account_result = poller.result()\r\n",
					"        self.storage_account_name = storage_account_name\r\n",
					"        return account_result\r\n",
					"\r\n",
					"    def create_containers(self, storage_account_name, container_names):\r\n",
					"        storage_client = self.get_storage_client()\r\n",
					"        keys = storage_client.storage_accounts.list_keys(self.resource_group_name, storage_account_name)\r\n",
					"        conn_string = f\"DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName={storage_account_name};AccountKey={keys.keys[0].value}\"\r\n",
					"        # Provision the containers in the account (this call is synchronous)\r\n",
					"        for name in container_names:\r\n",
					"            container = storage_client.blob_containers.create(self.resource_group_name, storage_account_name, name, {})\r\n",
					"\r\n",
					"    def create_linked_service(self):\r\n",
					"        #os.system(\"az synapse linked-service create --workspace-name syn-oea-cisdggv04r --name MSGraphAPI2 --file @./MSGraphAPI.json\")\r\n",
					"        pass\r\n",
					"\r\n",
					"    def add_role_assignment_to_storage_account(self, role, assignee):\r\n",
					"        os.system(f\"az role assignment create --role \\\"{role}\\\" --assignee {assignee} --scope {self.get_storage_account_id()}\")\r\n",
					"    \r\n",
					"    def add_firewall_rule_for_synapse(self, synapse_workspace_name):\r\n",
					"        os.system(f\"az synapse workspace firewall-rule create --name allowAll --workspace-name {synapse_workspace_name} --resource-group {self.resource_group_name} --start-ip-address 0.0.0.0 --end-ip-address 255.255.255.255\")\r\n",
					"\r\n",
					"    def create_spark_pool(self, synapse_workspace_name, spark_pool_name, library_requirements):\r\n",
					"        os.system(f\"az synapse spark pool create --name {spark_pool_name} --workspace-name {synapse_workspace_name} --resource-group {self.resource_group_name} \"\r\n",
					"                   \"--spark-version 3.1 --node-count 3 --node-size Small --min-node-count 3 --max-node-count 10 --enable-auto-scale true --delay 15 --enable-auto-pause true\")\r\n",
					"        #Now update spark pool to include required libraries (note that this has to be done as a separate step or the create command will fail, despite what the docs say)\r\n",
					"        os.system(f\"az synapse spark pool update --name {spark_pool_name} --workspace-name {synapse_workspace_name} --resource-group {self.resource_group_name} --library-requirements {library_requirements} --no-wait\")       \r\n",
					"\r\n",
					"    def create_random_password():\r\n",
					"        password = secrets.choice(string.ascii_uppercase) + secrets.choice(string.digits) + secrets.choice(['*', '%', '#', '@'])\r\n",
					"        for _ in range(9): password += secrets.choice(string.ascii_lowercase)\r\n",
					"        return password    "
				],
				"execution_count": null
			}
		]
	}
}