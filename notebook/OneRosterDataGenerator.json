{
	"name": "OneRosterDataGenerator",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b4818dd7-65ec-49a6-9b0e-a905ebeb1585"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import math\r\n",
					"from faker import Faker\r\n",
					"\r\n",
					"\r\n",
					"_SUBJECTS = ['Math - Algebra', 'Math - Geometry', 'English Language', 'History - World History', \r\n",
					"             'Science Biology', 'Health', 'Technology - Programming', 'Physical Education', 'Art', 'Music']\r\n",
					"_SCHOOL_TYPES = ['Elementary', 'Middle', 'High']\r\n",
					"\r\n",
					"class OneRosterDataGenerator:\r\n",
					"  def __init__(self, students_per_school=100, classes_in_student_schedule=6, students_per_section=25, student_teacher_ratio=9, include_optional_fields=True):\r\n",
					"    # Set a seed value in Faker so it generates the same values every time it's run\r\n",
					"    self.faker = Faker('en_US')\r\n",
					"    Faker.seed(1) \r\n",
					"\r\n",
					"    self.students_per_school = students_per_school\r\n",
					"    self.classes_in_student_schedule = classes_in_student_schedule\r\n",
					"    self.students_per_section = students_per_section\r\n",
					"    self.student_teacher_ratio = student_teacher_ratio\r\n",
					"    self.include_optional = include_optional_fields\r\n",
					"\r\n",
					"    self.teachers_per_school = math.ceil(self.students_per_school/self.student_teacher_ratio)\r\n",
					"    self.section_id = 1\r\n",
					"    self.student_id = 1\r\n",
					"    self.teacher_id = 1\r\n",
					"    self.course_id = 1\r\n",
					"    self.school_id = 1\r\n",
					"    self.term_id = 1\r\n",
					"    self.domain = '@Classrmtest86.org'\r\n",
					"\r\n",
					"  def create_schools(self, quantity):\r\n",
					"    schools = []\r\n",
					"    for n in range(quantity):\r\n",
					"      school = self.create_school(str(self.school_id))\r\n",
					"      schools.append(school)\r\n",
					"      self.school_id += 1\r\n",
					"    return schools\r\n",
					"\r\n",
					"  def create_school(self, school_id):\r\n",
					"    school_info = {\r\n",
					"      'sourcedId':f'sch{school_id}',\r\n",
					"      'name':f\"{self.faker.last_name()} {self.faker.random_element(_SCHOOL_TYPES)}\",\r\n",
					"      'identifier': school_id if self.include_optional else '',\r\n",
					"      'status':'active' if self.include_optional else '',\r\n",
					"      'dateLastModified': '2020-04-15T08:30:11.944Z' if self.include_optional else ''\r\n",
					"      }\r\n",
					"\r\n",
					"    school_data = {}\r\n",
					"    school_data['students'] = self.create_students(school_info['sourcedId'])\r\n",
					"    school_data['teachers'] = self.create_teachers(school_info['sourcedId'])\r\n",
					"    school_data['courses'] = self.create_courses()\r\n",
					"    school_data['terms'] = self.create_terms('2021')\r\n",
					"    school_data['student_enrollments'] = self.create_student_enrollments(school_info['sourcedId'], school_data)\r\n",
					"    school_data['teacher_enrollments'] = self.create_teacher_enrollments(school_info['sourcedId'], school_data)\r\n",
					"    for term in school_data['terms']:\r\n",
					"      self.create_sections(term, school_info['sourcedId'], school_data['courses'])\r\n",
					"\r\n",
					"    # Now that all the data is generated across the various entities, we need to extract only what we need for OneRoster's spec\r\n",
					"    one_roster_data = {}\r\n",
					"    one_roster_data['users'] = school_data['students']\r\n",
					"    one_roster_data['users'] += school_data['teachers']\r\n",
					"    one_roster_data['courses'] = school_data['courses']\r\n",
					"\r\n",
					"    one_roster_data['classes'] = []\r\n",
					"    for term in school_data['terms']:\r\n",
					"      term.pop('_section_spots')\r\n",
					"      one_roster_data['classes'] += term.pop('_sections')\r\n",
					"    one_roster_data['academicSessions'] = school_data['terms']\r\n",
					"\r\n",
					"    return school_info, one_roster_data\r\n",
					"\r\n",
					"  def create_terms(self, school_year):\r\n",
					"    terms = []\r\n",
					"    terms.append({\r\n",
					"      'sourcedId' : 'term' + str(self.term_id),\r\n",
					"      'title' : 'Fall Semester',\r\n",
					"      'startDate' : '9/1/2020',\r\n",
					"      'endDate' : '12/22/2020',\r\n",
					"      'type' : 'semester',\r\n",
					"      'schoolYear': school_year,\r\n",
					"      '_sections' : [],\r\n",
					"      '_section_spots' : []  # this is an array of arrays representing the sections and the spots within each section\r\n",
					"      })\r\n",
					"    self.term_id += 1\r\n",
					"    terms.append({\r\n",
					"      'sourcedId' : 'term' + str(self.term_id),\r\n",
					"      'title' : 'Spring Semester',\r\n",
					"      'startDate' : '1/21/2021',\r\n",
					"      'endDate' : '5/30/2021',\r\n",
					"      'type' : 'semester',\r\n",
					"      'schoolYear': school_year,\r\n",
					"      '_sections' : [],\r\n",
					"      '_section_spots' : []  # this is an array of arrays representing the sections and the spots within each section\r\n",
					"      })\r\n",
					"    return terms\r\n",
					"\r\n",
					"  def create_courses(self):\r\n",
					"    courses = []\r\n",
					"    for subject in _SUBJECTS:\r\n",
					"      courses.append({\r\n",
					"        'sourcedId' : 'course' + str(self.course_id),\r\n",
					"        'status': '',\r\n",
					"        'dateLastModified':'',\r\n",
					"        'Course Name' : subject,\r\n",
					"        'courseCode' : str(self.course_id),\r\n",
					"        'Course Description' : \"Instruction covering \" + subject,\r\n",
					"        'Course Subject' : subject\r\n",
					"        })\r\n",
					"      self.course_id += 1\r\n",
					"    return courses\r\n",
					"\r\n",
					"  def create_students(self, school_id):\r\n",
					"    students = []\r\n",
					"    for n in range(self.students_per_school):\r\n",
					"      students.append(self.create_user(school_id, self.student_id, 'student'))\r\n",
					"      self.student_id += 1\r\n",
					"    return students\r\n",
					"\r\n",
					"  def create_teachers(self, school_id):\r\n",
					"    teachers = []\r\n",
					"    for n in range(self.teachers_per_school):\r\n",
					"      teachers.append(self.create_user(school_id, self.teacher_id, 'teacher'))\r\n",
					"      self.teacher_id += 1\r\n",
					"    return teachers\r\n",
					"\r\n",
					"  def create_user(self, school_id, user_id, user_type):\r\n",
					"    id_prefix = 'st' if user_type == 'student' else 't'\r\n",
					"    fname = self.faker.first_name()\r\n",
					"    lname = self.faker.last_name()\r\n",
					"    email = f\"{fname.lower()}{lname.lower()}{user_id}{self.domain}\"\r\n",
					"    user = {\r\n",
					"        'userIds': [{\"type\":\"LDAP\", \"identifier\":self.faker.uuid4()}] if self.include_optional else '',\r\n",
					"        'enabledUser': True,\r\n",
					"        'middleName': self.faker.first_name() if self.include_optional else '',\r\n",
					"        'grades': [self.faker.random_element(['9','10','11','12'])] if self.include_optional else '',\r\n",
					"        'password': self.faker.password() if self.include_optional else '',\r\n",
					"        'username' : f\"{fname.lower()}{lname.lower()}{user_id}\",\r\n",
					"        'givenName' : fname,\r\n",
					"        'familyName' : lname,\r\n",
					"        'role' : user_type,\r\n",
					"        'identifier': str(user_id) if self.include_optional else '',\r\n",
					"        'email': email if self.include_optional else '',\r\n",
					"        'sms' : self.faker.phone_number(),\r\n",
					"        'phone' : self.faker.phone_number(),\r\n",
					"        'agents': None,\r\n",
					"        'orgs': [ {'href':'http://orgrefhere', 'sourcedId':school_id, 'type':'school'}],\r\n",
					"        'sourcedId' : id_prefix + str(user_id),\r\n",
					"        'status':'active' if self.include_optional else '',\r\n",
					"        'dateLastModified': '2020-04-15T08:30:11.944Z' if self.include_optional else ''\r\n",
					"        }\r\n",
					"    return user\r\n",
					"\r\n",
					"  def create_sections(self, term, school_id, courses):\r\n",
					"    spots_needed = self.students_per_school * self.classes_in_student_schedule\r\n",
					"    sections_needed = math.ceil(spots_needed / self.students_per_section) + 1 # determine the number of sections needed\r\n",
					"    for n in range(sections_needed):\r\n",
					"      course = self.faker.random_element(courses)\r\n",
					"      term['_sections'].append({\r\n",
					"        'grades': [self.faker.random_element(['9','10','11','12'])] if self.include_optional else '',\r\n",
					"        'subjectCodes': ['001'], #todo: populate this\r\n",
					"        'periods': ['per1'], #todo: populate this\r\n",
					"        'resources': [{'href':'http://resourcerefhere', 'sourcedId': '121212', 'type': 'resource'}], #todo: populate this\r\n",
					"        'title' : course['Course Subject'] + \" \" + str(self.section_id),\r\n",
					"        'classCode' : str(self.section_id) if self.include_optional else '',\r\n",
					"        'classType': 'scheduled',\r\n",
					"        'location' : self.faker.random_element(['room1', 'room2', 'room3', 'room4', 'room5']) if self.include_optional else '',\r\n",
					"        'subjects' : [course['Course Subject']] if self.include_optional else '',\r\n",
					"        'course' : {'href':'http://courserefhere', 'sourcedId':course['Course SIS ID'], 'type':'course'},\r\n",
					"        'school' : {'href':'http://schoolrefhere', 'sourcedId':school_id, 'type':'school'},\r\n",
					"        'terms' : [{'href':'http://termrefhere', 'sourcedId':term['sourcedId'], 'type':'academicSession'}],\r\n",
					"        'sourcedId' : str(self.section_id),\r\n",
					"        'status' : 'active' if self.include_optional else '',\r\n",
					"        'dateLastModified': '2020-04-15T08:30:11.944Z' if self.include_optional else ''\r\n",
					"        })\r\n",
					"      # add section spots   \r\n",
					"      spots = []\r\n",
					"      for i in range(self.students_per_section):\r\n",
					"        spots.append(str(self.section_id))\r\n",
					"      term['_section_spots'].append(spots)\r\n",
					"      self.section_id += 1\r\n",
					"\r\n",
					"  def create_student_enrollments(self, school_id, school_data):\r\n",
					"    enrollments = []\r\n",
					"    for student in school_data['students']:\r\n",
					"      for term in school_data['terms']:\r\n",
					"        num_enrollments = 0\r\n",
					"        for section_spots in term['_section_spots']:\r\n",
					"          if(len(section_spots) == 0): \r\n",
					"            continue\r\n",
					"          else:\r\n",
					"            spot_taken = section_spots.pop()\r\n",
					"            num_enrollments += 1\r\n",
					"            enrollment = self.create_enrollment('student', school_id, student['sourcedId'], spot_taken)\r\n",
					"            enrollments.append(enrollment)\r\n",
					"          if (num_enrollments >= self.classes_in_student_schedule): break\r\n",
					"    return enrollments\r\n",
					"\r\n",
					"  def create_teacher_enrollments(self, school_id, school_data):\r\n",
					"    enrollments = []\r\n",
					"    for term in school_data['terms']:\r\n",
					"      teacher_index = 0\r\n",
					"      for section in term['_sections']:\r\n",
					"        teacher_id = school_data['teachers'][teacher_index]['sourcedId']\r\n",
					"        enrollment = self.create_enrollment('teacher', school_id, teacher_id, section['sourcedId'])\r\n",
					"        enrollments.append(enrollment)\r\n",
					"        teacher_index += 1\r\n",
					"        if (teacher_index == len(school_data['teachers'])): teacher_index = 0 # start over from the beginning of the list of teachers\r\n",
					"    return enrollments\r\n",
					"\r\n",
					"  def create_enrollment(self, role, school_id, user_id, section_id):\r\n",
					"    enrollment = {\r\n",
					"        \"beginDate\": \"2020-04-16T18:22:04.645Z\",\r\n",
					"        \"endDate\": \"2020-07-16T18:22:04.645Z\",\r\n",
					"        \"role\": role,\r\n",
					"        \"primary\": True,\r\n",
					"        \"user\": {\r\n",
					"          \"href\": \"http://userhrefhere\",\r\n",
					"          \"sourcedId\": user_id,\r\n",
					"          \"type\": \"user\"\r\n",
					"        },\r\n",
					"        \"school\": {\r\n",
					"          \"href\": \"http://schoolhrefhere\",\r\n",
					"          \"sourcedId\": school_id,\r\n",
					"          \"type\": \"org\"\r\n",
					"        },\r\n",
					"        \"class\": {\r\n",
					"          \"href\": \"http://classhrefhere\",\r\n",
					"          \"sourcedId\": section_id,\r\n",
					"          \"type\": \"class\"\r\n",
					"        },\r\n",
					"        \"sourcedId\": self.faker.uuid4(),\r\n",
					"        \"status\": \"active\",\r\n",
					"        \"dateLastModified\": \"2020-04-16T18:22:04.647Z\"\r\n",
					"    }\r\n",
					"    return enrollment\r\n",
					"\r\n",
					"##########################\r\n",
					"#generate_data()\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}