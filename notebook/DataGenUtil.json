{
	"name": "DataGenUtil",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a903c0bf-6c35-4952-ae8d-e62f79da9648"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import os\r\n",
					"import json\r\n",
					"\r\n",
					"def list_of_dict_to_csv(list_of_dict, includeHeaders = True):\r\n",
					"    csv_str = ''\r\n",
					"    if includeHeaders == True:\r\n",
					"        header = []\r\n",
					"        for column_name in list_of_dict[0].keys(): \r\n",
					"            if not column_name.startswith('_'): header.append(column_name)\r\n",
					"        csv_str += \",\".join(header) + \"\\n\"\r\n",
					"\r\n",
					"    for row in list_of_dict:\r\n",
					"        csv_str += obj_to_csv(row) + \"\\n\"\r\n",
					"\r\n",
					"    return csv_str\r\n",
					"\r\n",
					"def obj_to_csv(obj):\r\n",
					"    csv = ''\r\n",
					"    for key in obj:\r\n",
					"        if not (key.startswith('_')): csv += str(obj[key]) + ','\r\n",
					"    return csv[:-1]\r\n",
					"\r\n",
					"def list_of_dict_to_json(list_of_dict):\r\n",
					"    json_str = '['\r\n",
					"    for row in list_of_dict:\r\n",
					"        json_str += obj_to_json(row) + \",\\n\"\r\n",
					"    return json_str[:-2] + ']'\r\n",
					"\r\n",
					"def obj_to_json(obj):\r\n",
					"    json_dict = {}\r\n",
					"    for key in obj:\r\n",
					"        if not (key.startswith('_')): json_dict[key] = obj[key]\r\n",
					"    return json.dumps(json_dict)\r\n",
					"\r\n",
					"class FileWriter:\r\n",
					"    def __init__(self, root_destination=None):\r\n",
					"        if not root_destination: self.root_destination = ''\r\n",
					"        elif not root_destination.endswith('/'): self.root_destination = root_destination + '/'\r\n",
					"        else: self.root_destination = root_destination\r\n",
					"        self.writers = {}\r\n",
					"\r\n",
					"    def write(self, path_and_filename, data_str):\r\n",
					"        path_and_filename = self.root_destination + path_and_filename\r\n",
					"        if path_and_filename not in self.writers.keys():\r\n",
					"            if not os.path.exists(os.path.dirname(path_and_filename)):\r\n",
					"                os.makedirs(os.path.dirname(path_and_filename))\r\n",
					"            self.writers[path_and_filename] = open(path_and_filename, 'a')\r\n",
					"        \r\n",
					"        self.writers[path_and_filename].write(data_str)    "
				],
				"execution_count": null
			}
		]
	}
}